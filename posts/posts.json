[
  {
    "path": "posts/2022-01-24-the-toc-in-distill/",
    "title": "A poor man's TOC in {distill}",
    "description": "A floating Table of Contents (TOC) in {distill} in fixed position with Toggle (show/hide) button and Scrolling Active States.",
    "author": [
      {
        "name": "Radovan Miletiƒá",
        "url": "https://github.com/Radovan-Miletic"
      }
    ],
    "date": "2022-04-18",
    "categories": [
      "tutorial",
      "css",
      "javascript",
      "html",
      "toc",
      "features"
    ],
    "contents": "\n\nContents\nCrumbs from a\npoor man‚Äôs table (of contents)\nFloating TOC in fixed\nposition\nToggle (show/hide) button\nScrolling Active States\n\nLayouts\nDefault layout\nl-body\n\nWider layouts\nl-body-outset\nl-page\n\nTables with Knitr kable\nPaged tables\nFull screen layout\nl-screen-inset shaded\nl-screen-inset\nl-screen\n\n\nHeading h1\nHeading h2\nHeading h3\nHeading h4\nHeading h5\nHeading h6\n\n\n\n\n\n\n\n\n\nNote: This post was originally written by Radovan Miletic and copied\nhere on April 18, 2022 - see the original post here\nfor a potentially updated version.\n\nImage from https://www.wikigallery.org/wiki/painting_366127/William-Harris-Weatherhead/Crumbs-From-A-Poor-Man's-Table.\nWilliam Harris Weatherhead (British 1843-1903), CRUMBS FROM A POOR MAN‚ÄôS\nTABLECrumbs from a poor\nman‚Äôs table (of contents)\nYou may find the crumbs here: toc-styles.css and\nthe-toc-in-distill.Rmd. Hope they will be inspirational to\nsomeone.\nJudging by the {distill} issues 16, 341, 366, 420, and the Stack Overflow question it seems that there is a genuine need for\nsome kind of a ‚Äúfloating TOC on the side‚Äù in {distill}.\nIn his comment, J.J. Allaire summarizes the problem:\n- any change in {distill} should be linked to distll.pub web framework,\n- floating TOC on the side would be tricky to implement due to specific\nlayout ‚Äúfigures that extend into the sidebar (quite common w/\ndistill)‚Äù.\nAn optimal solution can be found within Quarto publishing system. You may try scrolling up\nand down and observe the collapsible sidebar navigation. HTML documents\nrendered with Quarto use Bootstrap 5 by default, which is not the case\nwith distill.pub.\nWhile we wait for a solution, you may feel tempted to try ‚Äúa poor\nman‚Äôs TOC‚Äù that I came up with for my use case (applied to single\narticle).\nLet me know how it goes!\nFloating TOC in fixed\nposition\n\n\n\n\nYAML output\nYou may include a toc-styles.css file in the post\ndirectory and add a reference to it in YAML output options:\ncss: toc-styles.css.\ntitle: \"Post title\"\ndescription: |\n  Description\nauthor:\n  - first_name: \"R\"\n    last_name: \"M\"\noutput:\n  distill::distill_article:\n    toc: true\n    toc_depth: 6\n    toc_float: true\n    css: toc-styles.css\n    self_contained: false\nCSS elements\nIf you want to place the TOC below the figures, you need to disable\nthe z-index.\n/* This hack is needed to temporary disable the predefined layout style */\nd-article {\n    contain: none;\n  }\n\n/* Sidebar Navigation */\n#TOC {\n  opacity: 1;\n  position: fixed;\n  left: calc(7%);\n  top: calc(5.5%);\n  /* width: 20%; */\n  max-width: 260px;\n  max-height: 85%;\n  overflow-y: auto;\n  background: white;            /* Optional, remove to enable the blur filter (just for fun). */\n  backdrop-filter: blur(10px);  /* Optional, wouldn't not work with Firefox browser. */\n  padding: 10px;                /* Optional */\n  /* border-right: 1px solid rgba(0, 0, 0, 0.1); */\n  border: 1px solid rgba(0, 0, 0, 0.1);\n  /* border-radius: 1px; */\n  transition: all 0.5s;\n  z-index: 999;                 /* Optional */\n  }\n\n/* Hide the TOC when resized to mobile or tablet:  480px, 768px, 900px */\n@media screen and (max-width: 1000px) {\n#TOC {\n    position: relative;\n    left: 0;\n    top: 0;\n    max-width: none;\n    max-height: none;\n    overflow-y: auto;\n    border: none;\n    background: none; }\n  }\n\nToggle (show/hide) button\n\nCSS elements\nYou may disable the hover effect, if preferred.\n.d-contents nav h3 {\n    text-indent: 25px;\n  }\n\n#TOC.hide { \n  opacity: 0;\n  transition: visibility 0s linear 0.5s, opacity 0.5s;\n  }\n\n/* Optional, remove to disable the hover effect */\n#TOC:hover {\n  opacity: 1;\n  transition: all 0.5s;\n  }\n\n/* Hide the TOC when resized to mobile or tablet:  480px, 768px, 900px */\n@media screen and (max-width: 1000px) {\n#TOC {\n    }\n    .d-contents nav h3 {\n      text-indent: 0; }\n    input[type=\"button\" i] {  \n      display: none; }\n  }\nJAVASCRIPT elements\nfunction toggle () {\n  document.getElementById(\"TOC\").classList.toggle(\"hide\");\n};\nHTML elements\n<input type=\"button\" class=\"d-article-with-toc\" id=\"TOC\" value=\"&#x2630\" \ntitle=\"Toggle (Hide/Show) Table of Contents\" \nonclick=\"toggle()\" style=\"padding:7px; border: 0px;\"/>\n\nScrolling Active States\nIt was Rich Pauloo (author of Stack Overflow question mentioned\nabove) who pointed out to a scrolling active state implementation, ‚Äúsuch\nthat the TOC responds to the header the user is currently on‚Äù.\nAll credits for ‚Äúscrolling active state‚Äù lightweight solution goes to\nBramus Van Damme (see his tutorial) and Chris Coyier (his tutorial) and to the powerful IntersectionObserver.\nI just made slight changes needed to track all headings that have an\nid applied.\nPlease note that IntersectionObserver will only observe\nchanges in document‚Äôs viewport, in our case - headings currently being\ndisplayed on the screen.\n\nCSS elements\n/* ScrollSpy active styles (see JAVASCRIPT tab for activation) */\n.d-contents nav ul li.active > a { \n    font-weight: bold;  \n    /* border-left: 1px solid #2780e3; */\n    color: #0f2e3d !important;\n  }\n\n/* üí° This small transition makes setting of the active state smooth */\n.d-contents nav a {\n      transition: all 0.1s ease-in-out;\n  }\nJAVASCRIPT elements\nwindow.addEventListener('DOMContentLoaded', () => {\n\n  const observer = new IntersectionObserver(entries => {\n    entries.forEach(entry => {\n      const id = entry.target.getAttribute('id');\n      if (entry.intersectionRatio > 0) {\n        document.querySelector(`[href=\"#${id}\"]`).parentElement.classList.add('active');\n      } else {\n        document.querySelector(`[href=\"#${id}\"]`).parentElement.classList.remove('active');\n      }\n    });\n  });\n\n  // Track all headings that have an `id` applied\n  document.querySelectorAll('h1[id], h2[id], h3[id], h4[id], h5[id], h6[id]').forEach((h1, h2, h3, h4, h5, h6) => {\n    observer.observe(h1, h2, h3, h4, h5, h6);\n  });\n  \n});\n\nLayouts\nDefault layout\nl-body\n\n\n\nWider layouts\nl-body-outset\n\n\n\nl-page\n\n\n\nTables with Knitr kable\n\n\nmpg\ncyl\ndisp\nhp\ndrat\nwt\nqsec\nvs\nam\ngear\ncarb\nMazda RX4\n21.0\n6\n160\n110\n3.90\n2.620\n16.46\n0\n1\n4\n4\nMazda RX4 Wag\n21.0\n6\n160\n110\n3.90\n2.875\n17.02\n0\n1\n4\n4\nDatsun 710\n22.8\n4\n108\n93\n3.85\n2.320\n18.61\n1\n1\n4\n1\nHornet 4 Drive\n21.4\n6\n258\n110\n3.08\n3.215\n19.44\n1\n0\n3\n1\nHornet Sportabout\n18.7\n8\n360\n175\n3.15\n3.440\n17.02\n0\n0\n3\n2\nValiant\n18.1\n6\n225\n105\n2.76\n3.460\n20.22\n1\n0\n3\n1\n\nPaged tables\n\n\n\n\n\n\n\n\nFull screen layout\nl-screen-inset shaded\n\n\n\nl-screen-inset\n\n\n\nl-screen\n\n\n\nHeading h1\nHeading h2\nHeading h3\nHeading h4\nHeading h5\nHeading h6\n\n\n\n",
    "preview": "posts/2022-01-24-the-toc-in-distill/images/painting1.jpg",
    "last_modified": "2022-06-07T15:39:59+00:00",
    "input_file": {}
  },
  {
    "path": "posts/2021-12-21-upgrading-distill-blog-settings/",
    "title": "Upgrading Distill Blog Settings",
    "description": "The second part of a series on how I upgraded this `Distill` themed blog",
    "author": [
      {
        "name": "Shamindra Shrotriya",
        "url": "https://www.shamindras.com/"
      }
    ],
    "date": "2021-12-21",
    "categories": [
      "features",
      "disqus",
      "tutorial",
      "netlify",
      "analytics"
    ],
    "contents": "\n\nContents\nStep 0: Introduction\nStep 1: Setup Disqus comments\nStep 2: Setup Google Analytics tracking\nStep 3: Add Netlify Status Badge\nStep 4: Add blog post sharing options\nStep 5: Add Corrections/Change Tracking and RSS feed\nNext Steps\nConcluding Thoughts\n\n\nNote: This post was originally written by Shamindra Shrotriya and copied here on December 21, 2021 - see the original post here for a potentially updated version.\n\nStep 0: Introduction\nThis is a meta blogpost and a second-part in a series to describe how I setup this personal academic blog using the amazing distill package by the RStudio team.\nThe first part of this meta blogpost series can be found here, where I detailed the steps to setup this blog using Netlify and Google Domains. If you haven‚Äôt setup a distill themed blog then you are encouraged to check it out before reading this post.\nFortunately distill comes with easy to configure settings as well see below. I‚Äôve only implemented some of the options available. I should note that the RStudio distill team has already created an excellent distill blog creation tutorial which I thoroughly used and highly recommend to new users to check out.\n\nAdmittedly this blogpost is verbose, but hopefully the details help new users of the distill blogging package.\nWith that said, here are some key upgrades I made to this blog.\nStep 1: Setup Disqus comments\nI really wanted to setup some comments system for each blogpost. This way I can learn new tips from readers and find out how to improve posts going forward. I will go with the recommended Disqus comments option from the distill blog. I simply created a Disqus account and selected Get Started. I then clicked the following button to Install Disqus on my site.\n\n\n\n\nFigure 1: Getting Started with Disqus\n\n\n\n\nI was then presented with the following Disqus site configuration menu. I entered https:://www.shamindras.com/ for my Website Name and manually set my Disqus shortname to be shamindras-distill to be easier to remember and specific to this site, in case I make more websites later on. This Disqus shortname is important to note down (üñä) as we‚Äôll see shortly.\n\n\n\n\nFigure 2: Setup Disqus shortname\n\n\n\n\nAfter clicking Create Site in the previous menu I proceeded to select the free plan option by subscribing to the Basic, Free, Ads Supported comments option as seen below:\n\nAs a student got to always know when to get a freebie r emo::ji(\"smile\")\n\n\n\n\nFigure 3: Select Basic (Free, Ads supported) mode\n\n\n\n\nIn terms of implementing Disqus on my site, I clicked on the following button to install Disqus on my site manually:\n\n\n\n\nFigure 4: Manual installation of Disqus\n\n\n\n\nBefore finishing the manual installation of Disqus I ensured that I set the following configuration options. I particularly like setting an opiononated comments policy and selected the Grist Comment Policy:\n\n\n\n\nFigure 5: Disqus Configuration Settings\n\n\n\n\nFinally to ensure that the implementation is completed I added the following line to the _site.yml post using the Disqus shortname set earlier i.e. shamindras-distill and ensuring hidden: true so that the comments are not expanded by default:\nNote: You can see my _site.yml with these settings here\n\ncollections:\n  posts:\n    disqus:\n      shortname: shamindras-distill\n      hidden: true\n\nWe now see the following comments option at the bottom of every post:\n\n\n\n\nFigure 6: Distill Disqus Comments Selection\n\n\n\n\nYou can read more about setting up comments from the official distill blog here\nStep 2: Setup Google Analytics tracking\nI also wanted to setup basic user viewing tracking for my site. Fortunately distill can be easily configured to work with Google Analytics. In order to set this up I simply created an account for Google Analytics (using my personal gmail account). I then logged in and selected the option to track my website as follows:\n\n\n\n\nFigure 7: Google Analytics Settings\n\n\n\n\nNote that I specified the Website Name field to be shamindras-distill. This is indeed the same as the Disqus shortname from earlier but did not have to be. I just did it for consistency and easy reference. I was then given a Google Analytics token and concluded this setup by adding the token to the _site.yml file as follows:\nNote: You can see my _site.yml with these settings here\n\ngoogle_analytics: \"UA-145015693-1\"\n\nYou can read more about setting up Google Analytics from the official distill blog here\nStep 3: Add Netlify Status Badge\nSince Netlify is the web hosting platform for my site (see setup details here). I just logged into my Netlify account and went to my Site Details and obtained the following code from the Status Badges option.\n\n\n\n\nFigure 8: Netlify Badge Code\n\n\n\n\nI copy-pasted the above code in at the top of my site README.md file. This let‚Äôs me quickly know whether my website is up and running as expected by simply checking out my github page.\nNote: You can see my README.md with these settings here\nStep 4: Add blog post sharing options\nIt is easy to configure distill to allow for easy sharing of posts using a variety of social media platforms. I allow for twitter, linkedin, pinterest, and facebook. I did this by simply adding the following line in the _site.yml file:\n\ncollections:\n  posts:\n    share: [twitter, linkedin, pinterest, facebook]\n\nNow the following sharing options appear at the bottom of every post:\n\n\n\n\nFigure 9: Distill Sharing Options\n\n\n\n\nI also added in the following lines to _site.yml to ensure that twitter cards are correctly generated when posts are shared on twitter:\nNote: You can see my _site.yml with these settings here\n\ntwitter:\n  site: \"@shamindraas\"\n  creator: \"@shamindraas\"\n\nStep 5: Add Corrections/Change Tracking and RSS feed\nI frequently make edits to blogposts and intend to do so going forward. Fortunately distill makes it easy track changes/corrections made to blogposts. I did this by simply adding the site repo url to the _site.yml as follows:\n\nrepository_url: https://github.com/shamindras/ss_personal_distill_blog\n\nNow the following appears at the bottom of all blogposts:\n\n\n\n\nFigure 10: Changes and Corrections Tracking\n\n\n\n\nSo users can easily track changes or file any concerns as issues, though hopefully the Disqus comment feature makes this easier for everyone.\nFinally it is easy to add an RSS feed for the blog by simply adding the following to _site.yml:\n\nbase_url: https://www.shamindras.com/\nnavbar:\n  left:\n    - icon: fa fa-rss\n      href: index.xml\n\nNote: You can see my _site.yml with these settings here\nThe critical elements are adding in the base_url fields and adding in fa fa-rss which is derived from the index.xml file. The index.xml file is automatically generated from the index.Rmd when you render the distill blog using the usual command:\n\nrmarkdown::render_site(here::here())\n\nNext Steps\nIn terms of core distill blog settings, these are the main options that I‚Äôm happy to implement for now. For me the next steps are more about customizing my own blog workflow. This will involve setting up utilities to automatically:\nWrap Rmd files to 80 characters for consistency\nQuickly delete unused files e.g.¬†DS_Store files on mac\nClear knitr cache for all posts and thoroughly re-render the site\nI expect to do this using a combination of R functions/Makefile workflow, but do stay tuned!\nConcluding Thoughts\nAs it can be seen it is quite easy to customize distill for commonly required features. Really great work by the RStudio team in making such customizations so user-friendly üëç.\n\n\n\n",
    "preview": "posts/2021-12-21-upgrading-distill-blog-settings/images/step_01_disqus_02.png",
    "last_modified": "2022-06-07T15:39:59+00:00",
    "input_file": {},
    "preview_width": 706,
    "preview_height": 568
  },
  {
    "path": "posts/2021-12-18-quality-of-life-modifications-for-your-distill-websites/",
    "title": "Quality of life modifications for your distill websites",
    "description": "In this post, you can find simple but useful enhancements that can be applied to your distill website. From enhancing your table of contents tab to adding a 'copy to clipboard button' in source code chunks, learn how you can make your distill website even more awesome!",
    "author": [
      {
        "name": "Jewel Johnson",
        "url": "https://jeweljohnsonj.github.io/jeweljohnson.github.io/"
      }
    ],
    "date": "2021-12-18",
    "categories": [
      "features",
      "twitter",
      "tutorial"
    ],
    "contents": "\n\nContents\nQuality of life mods for distill websites\n1. Making the table of contents more useful\n2. Adding a visitor counter\n3. Adding next/previous button\n4. Having social media share buttons\n5. Adding last updated date in the appendix\n6. Displaying your twitter feed\n7. Changing overflow to contain elements within the article body\n8. Copy to clipboard button in source code chunks\nSummary\nLast updated on\nAcknowledgments\nReferences\n\n\nNote: This post was originally written by Jewel Johnson and copied here on December 21, 2021 - see the original post here for a potentially updated version.\n\n\n\n\n# xaringanExtra package will help us to have inbuilt tabs insdie the article\n\n\n\nQuality of life mods for distill websites\nIn my one month time of learning about the distill r-package, I was fascinated by how amazing it is. Without knowing much about HTML or CSS coding, using the distill package, one can build a website from scratch. What was even more amazing was that the package had an active and friendly community who have written excellent and easy to follow tutorials aiming at beginners like me. Almost everything I know about the distill package was thanks to these tutorials. Along the way, I also learned how to implement a few interesting features that can make a distill website even better. As a thank you for all the help I have received from this community, I would like to share some of my findings that might prove useful. Most of these findings are born out of curiosity coupled with Google search and from the source codes of the brilliant websites featured in the distill website showcase.\n1. Making the table of contents more useful\nIf you had used the Rmarkdown package for making websites before you began using the distill package, one thing you will immediately appreciate is the ‚Äòtable of contents (toc)‚Äô in Rmarkdown. I feel that the toc in Rmarkdown is better than the toc in distill. The purpose of a toc is for enabling quick navigation through the contents of an article via the headers, so the toc should always be accessible to the reader. In distill articles, however, because of the way they manage the layout of the figures and other elements, a floating toc that is fixed even when the page is scrolled down is not possible out of the box. This issue has been raised in GitHub and hopefully, the developers will find an elegant way to reimagine the toc. Nevertheless, all is not lost, from a stack overflow question on having a floating fixed toc for distill articles, the answer by Dr Rich Pauloo provides relief. The code provided by Dr Pauloo allows the toc to be fixed on the left side even when you scroll down the page. But the down side is that by doing so, the toc will overlap over any element which is extending over the body layout. Also, the default font for the toc in distill is too small I feel, so if you increase the font size while using this code, it will create even more overlapping. So what can be done?\nOne thing I thought of implementing was that I will use the code by Dr Pauloo and fix the toc on top-left but with a transparent background. But when I hover over the toc headers it should zoom in on the screen, making the font bigger but over a white background, so that it is more legible. I used white colour as that was my background colour in the article body. I also changed the scrolling behaviour from ‚Äòsmooth‚Äô to ‚Äòauto‚Äô as it made navigating via toc snappier and more responsive.\nIf you are adamant about having a fixed toc like me then you just have to tolerate the overlap problem. Another issue is that by using this code, when your website is viewed on mobile devices, the toc overlaps with the main text. But apart from that, I did not find any other major issues. The modified code is given below.\nEither insert the code below to your main theme CSS file, if you are using a custom theme for your distill website. Otherwise, insert the code in a separate .css file and insert it in the article where you want to implement this feature.\n\nhtml {\n  scroll-behavior: auto;\n}\nd-article {\n    contain: none;\n}\n\n/* the value in left: will allow you to change the left edge gap */\n/* try using the value I have provided and check if the text goes beyond */\n/* the edge of the screen when you hover over using the mouse pointer */\n/* otherwise modify the values till you get a desirable result */\n\n#TOC {\n  position: fixed;\n  z-index: 50;\n  background: none; /* makes the toc background layer transparent */    \n  left: 1.5em; /* changes the left edge gap */\n  top: 6em; /* changes the top edge gap */\n}\n\n.d-contents nav a:hover {\n    color: black;\n    transform: scale(1.7); /* change scale to control hover zoom, now it is in 1:7 ratio */\n    padding-left:20%; /* change percentage value to control left gap during hover */\n    background-color: white; /* background colour on hover, kept as white as it is my bg colour */\n    display: block; /* keep it as block to station the text on hover */\n}\n\n/* Hide the ToC when resized to mobile or tablet:  480px, 768px, 900px */\n@media screen and (max-width: 900px) {\n#TOC {\n    position: relative;\n  }\n}\n\nFor inserting multiple CSS files use the following code.\n\n---\ntitle: \"Untitled\"\ndate: \"`r Sys.Date()`\"\noutput: distill::distill_article\ncss: [style.css, hover.css] #the hover.css file will be containing the above modified code\n---\n\nIf done properly, you will have a toc just like mine, which is shown on the left side of this page. If you come across any problems while implementing this feature please put them as a comment below this article. I will do my best to solve them.\n2. Adding a visitor counter\nIf you fancy a visitor counter on your website and additionally you would also like to know information like the location data of your visitors, how many people are currently online viewing your website etc. then you can add an HTML widget to your page which shows the visitor count. This can be done by following the steps below.\nVisit https://www.freecounterstat.com/ and click on ‚Äòoriginals‚Äô. I chose this website as it requires no annoying sign-in or account creation. Plus it is a free service.\n\n\n\nFigure 1: Figure from the Front page of https://www.freecounterstat.com/\n\n\n\nPick the theme you like and customize the widget till you are content. Add relevant details like location, category of your website etc and remember to pick the ‚Äòstandard‚Äô layout if you want the counter to be displayed horizontally. The difference between hit counter and visitor counter is that the hit counter only tracks visits for the page it is installed on whereas the visitor counter tracks all users who have visited any of your pages on your website. So select the ‚Äòvisitor counter‚Äô. You can either make the stats public or private, choose public as it also allows the readers to see your visitor data. Then finally prove that ‚Äòyou are not a robot‚Äô and press ‚Äòsubmit query‚Äô.\n\n\n\nFigure 2: Customizing your widget, Figure from the Front page of https://www.freecounterstat.com/\n\n\n\nThe first code shown inside the red rectangle in the figure below has a javascript code that allows you to access various interesting information about the visitors to your webpage. Copy the first code.\n\n\n\nFigure 3: The code for the visitor counter widget, Figure from https://www.freecounterstat.com/\n\n\n\nInsert the copied code which displays the widget in your distill article of liking. For example, the code below will place the counter in the centre of the distill article and will have ‚Äòvisitors‚Äô written above it. Paste the code that you have copied between the <center> tags. You can take a look at my file for reference. If done properly you will have the visitor counter widget placed in the centre position like in this page.\n<center>Visitors<center>\n<center>\n/* paste the code you copied here */\n<\/div><center>\n3. Adding next/previous button\nIf you are making a tutorial and have sequential sections or chapters, then you might need navigation buttons at the end of each chapter for easy navigation. In the picture below you can see that I used it for my R tutorial articles. Have a look at my file for reference.\n\n\n\nFigure 4: Source: https://jeweljohnsonj.github.io/jeweljohnson.github.io/project1.html\n\n\n\nUse the following code inside your distill article to get navigation buttons at the end of your page. Change the href values to your respective html files and change the text accordingly for right and left sided buttons. Insert the code given below at the end of your article.\n<br> \n\n<a href=\"project3.html\" class=\"btn button_round\" style=\"float: right;\">Next chapter:\n<br> 3. Even more customizations in ggplot2<\/a>\n\n<a href=\"project1.html\" class=\"btn button_round\" style=\"float: left;\">Previous chapter:\n<br> 1. Data visualization using ggplot2<\/a>\nYou should also add the following code to your main CSS theme file. You can change the values in the code to modify the button as you like.\n\n/* next and previous buttons at the end of the article */\n\n.btn {\n  border: none; /* button border */\n  background-color: #000000; /* button background colour */\n  padding: 14px 28px; /* length and width of the button */\n  font-size: 16px; /* font size of text inside the button */\n  cursor: pointer;\n  display: inline-block;\n}\n\n.button_round {border-radius: 12px;} /* makes the button round */\n\n4. Having social media share buttons\nYou can display social media share buttons for enabling easy sharing of your articles, like what I have, on the right side of this webpage.\nVisit https://www.addtoany.com/buttons/for/website and fill up the relevant details and get your html code. The reason for choosing this website over others was that you could use their service for free without signing up for an account.\nThen simply paste that code directly anywhere in your distill article to enable the share buttons.\nHave a look at my file for reference.\n\n\n\nFigure 5: Source: https://www.addtoany.com/buttons/for/website\n\n\n\n5. Adding last updated date in the appendix\nShowing when your article was last updated can prove useful for returning visitors. As it will allow them to see that the article has been modified. You can include this information in the appendix using the code below. Insert this code directly to your distill article.\n## Last updated on {.appendix}\n```{r,echo=FALSE}\nSys.time()\n```\nNow, this might not be very elegant, but it gets the job done in just one line of code. There is a more elegant way of including the ‚Äúlast updated date‚Äù in the appendix as explained by Dr Danielle Navarro. You can read more about it here. But it requires setting up a few prerequisites.\n6. Displaying your twitter feed\nIf you want to display your tweet activity on your webpage then follow the steps below.\nFirst go to your Twitter profile and copy your Twitter profile link address. Then visit https://publish.twitter.com/#. Your profile link would look like this -> 'https://twitter.com/[YOUR TWITTER USERNAME]\nPaste the link that you have copied on the input bar and press enter.\nSelect the ‚Äòembedded timeline‚Äô for showcasing the live feed of your Twitter activity and then copy the HTML widget code.\nNow you can insert the code directly anywhere on any distill page. When done correctly you will get your own widget like mine as shown below.\nTweets by jeweljohnsonj\nI placed my Twitter feed on the blog page where my posts are listed. By following the guide from the distill package tutorial, which allows one to add custom HTML files to the side section of a page, I was able to place the twitter feed on the right side of my blog page.\nTo do the same, first, open a text file in R Studio and using the template code below, paste the HTML code that you copied between the <div> tags in the code.\n<div class=\"sidebar-section custom\">\n  <!--place the code here -->\n \n<\/div>\nThen save the file as twitter.html (or in any name you like but save it as an HTML file) and then include it in the distill blog list page by modifying your collection section in your _site.yml file, like shown below.\n\n\ncollections:\n  posts:\n    custom: twitter.html #the html file containing the twitter feed widget code, add this code\n\n\n\nHave a look at my file for reference. If done properly you are now the proud owner of a Twitter feed widget in your distill website. Good job!\n7. Changing overflow to contain elements within the article body\nSometimes you will have text in your code chunks that will go over the boundary of your article body. This is especially true if you add comments to your codes in the code chunks. You can see in the picture below, the earlier version of this page that you are viewing did not have the text contained within the article body, which made it messy to read at one time. But fear not! you can use the overflow property in CSS to fix this issue. When properly implemented it will convert the code chunks containing long text into a scrollable window chunk. Add the code below to your main CSS theme file. This code was inspired by the source codes of Dr Joel Nitta‚Äôs website.\n\n/* making code chunks with scroll bar */\n\n/* the code below will change output chunk properties */\nd-article pre { \n  border-radius: 5px; /* rounded chunk window*/\n  font-size: 12px; /* output text size */\n  color: black; /* output text colour */\n  background-color: #F5F5F5; /* output chunk background colour */\n  padding: 5px 5px 5px 18px; /* top,right,bottom,left padding values */\n  overflow: auto !important; /* enables scroll bar */ \n}\n\n/* the code below will change source code chunk properties */\nd-article div.sourceCode pre { \n  border-radius: 5px;\n  background-color: #F8F8FF;\n  color: black;\n  padding: 5px 5px 5px 18px;\n  overflow: auto !important;\n}\n\n\n\nBefore overflow change\n\nBefore changing the overflow property, the comments in the code chuks overflowed the article body\n\n\n\n\nFigure 6: Earlier version of this page\n\n\n\nAfter overflow change\n\nAfter changing the overflow property, the comments in the code chunks are contained inside the code chunk via a scrollable window.\n\n\n\n\nFigure 7: Current version of this page\n\n\n\n\n\n8. Copy to clipboard button in source code chunks\nGone are the days of dragging your mouse pointer to select text. A copy to clipboard button on your source code chunk will make everyone‚Äôs life easy by allowing one to copy the whole code in the chunk window with a single click. This is extremely useful if you are making tutorial articles or learning materials for a course, where there is a high chance that students will want to copy and use your code. So for implementing the copy to clipboard button, follow the steps below.\nYou will need the xaringanExtra and htmltools packages installed in your R library to make this work. If you have not installed the packages then run the code shown below.\n\n\n# install.packages(\"devtools\")\ndevtools::install_github(\"gadenbuie/xaringanExtra\")\ninstall.packages(\"htmltools\")\n\n\n\nThen simply insert the code shown below directly to anywhere in your distill article. If you want to customize your icons then visit https://fontawesome.com/v4.7/icons/ and choose the icon of your liking, then change fa-ICON NAME in the code below. For example, changing ‚Äòfa-clone‚Äô to ‚Äòfa-coffee‚Äô will give a coffee cup icon as the ‚Äòcopy to clipboard button‚Äô. Also change the hex code in color: to the colour of your liking. If done properly you will see a ‚Äòcopy‚Äô button on the top-right position of your source code chunk.\n```{r, xaringanExtra-clipboard, echo=FALSE}\nhtmltools::tagList(\n  xaringanExtra::use_clipboard(\n    button_text = \"<i class=\\\"fa fa-clone fa-2x\\\" style=\\\"color: #301e64\\\"><\/i>\",\n    success_text = \"<i class=\\\"fa fa-check fa-2x\\\" style=\\\"color: #90BE6D\\\"><\/i>\",\n    error_text = \"<i class=\\\"fa fa-times fa-2x\\\" style=\\\"color: #F94144\\\"><\/i>\"\n  ),\n  rmarkdown::html_dependency_font_awesome()\n)\n```\nSummary\nSo in short in this article we have learned;\nHow to modify the toc to have it fixed on the left side and zoom in on hover\nHow to add a visitor counter\nHow to add navigation buttons at the end of the page\nHow to add social media share buttons\nHow to add last updated date of a article in the appendix\nHow to display your Twitter feed on your distill website\nHow to add a scrolling code chunk window\nHow to add a copy to clipboard button in source code chunks\nI hope this was useful and in case you come across some problem while implementing these features, please specify them in the comments. I will try my best to fix them. In case if anyone is wondering how I was able to make panel sets within this webpage just follow this amazing tutorial guide. They are features from the xaringanExtra r-package. Thanks!\nLast updated on\n\n[1] \"2021-12-21 06:42:55 EST\"\n\nAcknowledgments\nI would like to thank Awanti Shastri for taking her valuable time to proofread this article. I also appreciate the valuable feedback and suggestions she gave for this article.\nReferences\nThe stackoverflow question on fixed toc in distill articles: https://stackoverflow.com/questions/67323162/floating-toc-in-distill-for-r/67387516?noredirect=1#comment119140135_67387516\nVisiter counter source: https://www.freecounterstat.com/\nSocial media share buttons source: https://www.addtoany.com/buttons/for/website\nTwitter feed widget source: https://publish.twitter.com/#\nFor changing the icons visit: https://fontawesome.com/v4.7/icons/\nFor implementing panelsets in distill articles: https://pkg.garrickadenbuie.com/xaringanExtra/#/panelset\nJJ Allaire, Rich Iannone, Alison Presmanes Hill and Yihui Xie (2021). distill: ‚ÄòR Markdown‚Äô Format for Scientific and Technical Writing. R package version 1.3. https://CRAN.R-project.org/package=distill\nGarrick Aden-Buie and Matthew T. Warkentin (2021). xaringanExtra: Extras And Extensions for Xaringan Slides. R package version 0.5.5. https://github.com/gadenbuie/xaringanExtra\n\n\n\n\n\n\n\n\n\n\n\n\n\n",
    "preview": "posts/2021-12-18-quality-of-life-modifications-for-your-distill-websites/meme.gif",
    "last_modified": "2022-06-07T15:39:59+00:00",
    "input_file": {}
  },
  {
    "path": "posts/2021-12-13-modifying-the-github-repo-containing-my-distill-website/",
    "title": "Modifying the GitHub repo containing my Distill website",
    "description": "Adventures with giscus (easier) and GitHub Actions (harder)",
    "author": [
      {
        "name": "Shannon Pileggi",
        "url": {}
      }
    ],
    "date": "2021-12-13",
    "categories": [
      "tutorial",
      "giscus",
      "github",
      "deploy"
    ],
    "contents": "\n\nContents\nTL; DR\nGiscus commenting\nGitHub Actions README\nAfterwards\nAcknowledgements\n\n\nNote: This post was originally written by Shannon Pileggi and copied here on December 21, 2021 - see the original post here for a potentially updated version.\n\n\n\n\nFigure 1: Artwork by @allison_horst. Except in my case, I just needed 12 days of intermittent attempts.\n\n\n\nTL; DR\nI made two modifications to my distill website and the corresponding GitHub repository:\nAdded giscus commenting to my blog - this was fairly straightforward and completed within 1 to 2 hours.\nAdded GitHub actions to automatically update the repository‚Äôs README with blog stats - this took several attempts over the course of a few days.\nGiscus commenting\nStraightforward and completed within 1 to 2 hours.\nUpdating the commenting mechanism on my website from discus was something I had been meaning to do for a while, but held off on because you never know when a seemingly small change will take you down a rabbit hole.\nI went for it, and thanks to Joel‚Äôs awesome post Enable giscus in Distill it was a pretty quick and easy process. üôå\n\n\ntonight i intended to update my #rstats blog from disqus to utterances, but then i found this great post by @joel_nitta about ‚ú®giscus‚ú®! thanks, Joel! üëèi hope the new giscus gets used - go ahead, pipe up!üòâhttps://t.co/Wx1j80TKVD\n\n‚Äî Shannon Pileggi (@PipingHotData) December 1, 2021\n\nGitHub Actions README\nSeveral attempts over the course of a few days.\nAfter the amazingly quick success of the giscus implementation, I was ready to tackle more! I thought a mini-project on my blog would be a nice entry point to learn GitHub Actions, and I decided to replicate Matt Dray‚Äôs post Up-to-date blog stats in your README. Between intricacies with both the README and the GitHub Action workflow yaml, this happened:\n\n\nhow is figuring out #rstats github actions going, you ask? preeetttty well üëç pic.twitter.com/Boj7KvXCAi\n\n‚Äî Shannon Pileggi (@PipingHotData) December 3, 2021\n\nI mean, sometimes you can skip reading documentation fully, make a few tweaks to your code, cross your fingers, and hope that everything works. GitHub Actions is probably not one of those things. üò¨ Below are a few of the errors I suffered through to get this working; hopefully I can save you some of the pain!\nGitHub Actions\nWorkflow #1 (error) I needed to add {distill} as an installed package in my workflow. ü§∑\nWorkflow #2 (error) I was lazy with my README and workflow and loaded tidvyerse instead of the specific packages I needed, which didn‚Äôt go well. I tried to resolve this via the pak route (see next error), which also didn‚Äôt go well, and ended up trimming back the dependencies to the essential ones.\n\nCheck out Alison Hill working through some unexpected GitHub Actions problems with bookdown & Netlify!\nWorkflow #10 (error) I tried a few different things to install packages in the workflow with pak instead of install.packages. I attempted to use r-lib/actions/setup-r-dependencies, and I really should have read the documentation thoroughly. My blog repo is not a package and does not have DESCRIPTION file. I tried to add a DESCRIPTION file to coerce this, but really, this workflow setup is made for packages. I also attempted to review the source of the workflow and make some tweaks to achieve something similar outside of the package framework, but to no avail. My workflow currently uses install.packages(). I could have tried r-lib/actions/setup-renv instead, but I was tired. There are many errors in my workflow history that correspond to this experimentation.\nREADME\nWorkflow #30 (no error) I thought I would get fancy and make the ggplot graphic interactive through {ggiraph} with hover over and click effects. This didn‚Äôt error out, but it also didn‚Äôt work, which I should have anticipated, as the rendered file is a .md and not a .Rmd.\nWorkflow #26 (no error) I had many workflows that didn‚Äôt error out, but also did not result in an updated README. I actually had a lot of trouble getting the README to work. Some things I learned include:\nusethis::use_readme_rmd() is designed for use with R packages, and again, didn‚Äôt work well on my blog repo.\ndevtools::build_rmd() is designed for use with R packages, and again, didn‚Äôt work well on my blog repo.\nAfter I ditched these and my README still wasn‚Äôt rendering correctly, I really, truly thought I was going crazy. I finally found a solution on RStudio Community by updating rmarkdown::render(\"README.Rmd\") to rmarkdown::render(\"README.Rmd\", \"github_document\") in the YAML of the GitHub Action workflow. I wonder if {distill} has some YAML stuff going on that required the \"github_document\" argument.\n\nAfter much perseverance and persistence, I prevailed with my first GitHub Action. üí™\n\n\n\nFigure 2: Updated README file for the pipinghotdata_distill GitHub repository, with the stats section automatically updated daily with GitHub Actions.\n\n\n\nPerhaps reading the documentation more closely or slowing down to think through things might have worked better for this situation. If you want to have a laugh or or want to feel better about your own struggling efforts, browse through my 34 commits or check out the corresponding GitHub Action history Dec 1 - 12, 2021. Despite the frustration, I remain grateful for these experiences as I learned a lot.\nAfterwards\nSo what happened after these changes?\nGiscus\nOne unexpected side effect of using giscus is all of the automatic notifications I receive about the discussion. I get notifications for:\non my blog: all comments\non blogs by others:\nreplies to my comments\nall comments subsequent to mine, by anyone, as we are now all engaged in the same GitHub discussion.\n\nThe last one was a bit surprising to me, but I like it for now!\nGitHub Actions\nNow that I am using GitHub Actions on the README of my repository, I am no longer the only contributor to my repository! üòØ This means that when I open up my R project, I now need to remember to pull before I start working on my website.\nIn addition, despite my GitHub Actions working, I ran out of free time as shown in the workflow #39 error. ü§¶ I guess I either need to figure out {pak} out with GitHub Actions to hopefully speed things up, or experiment less to get my actions right.üòÜ\nAcknowledgements\nThanks to:\nDan Sjoberg and Travis Gerke for talking me through some GitHub Action concepts!\nAllison Horst for the amazing illustrations.\nJoel Nitta for the giscus post.\nMatt Dray for the readme github action post.\nChristophe Dervieux for being a hero on RStudio Community.\n\n\n\n",
    "preview": "posts/2021-12-13-modifying-the-github-repo-containing-my-distill-website/woof_today.png",
    "last_modified": "2022-06-07T15:39:59+00:00",
    "input_file": {},
    "preview_width": 1627,
    "preview_height": 927
  },
  {
    "path": "posts/2021-11-24_using-giscus/",
    "title": "Enable giscus in Distill",
    "description": "How to use the giscus commenting system on a Distill blog",
    "author": [
      {
        "name": "Joel Nitta",
        "url": "https://joelnitta.com"
      }
    ],
    "date": "2021-11-24",
    "categories": [
      "tutorial",
      "html",
      "utterances",
      "giscus",
      "github",
      "features"
    ],
    "contents": "\n\n\n\n\n\n\nNote: This post was originally written by Joel Nitta and copied here on November 29, 2021 - see the original post here for a potentially updated version.\n\nTL;DR\ngiscus is a free, open-source commenting system for blogs that uses the GitHub API\ngiscus uses GitHub Discussions (not Issues) to store data\nI show how to enable giscus on a Distill blog\n\n\n\nFigure 1: Image by Adam Solomon on unsplash.\n\n\n\nLike many R-bloggers these days, I have made some changes: I switched from blogdown to Distill 1, and from disqus to utterances 2. Several things about utterances appealed to me: free, open-source, no data tracking. But when I started using it, I immediately was turned off by the dual use of GitHub issues as a way to store comments. It just felt odd to have an issue that wasn‚Äôt an issue!\nFortunately, I‚Äôm not the only one to feel this way, and @laymonage actually did something about it: there is now a very similar app to utterances, called giscus. It offers almost the same functionality, but it uses GitHub Discussions as the place to store comments instead of Issues. This makes much more sense to me.\nThere are several blogposts 3 on how to enable utterances on Distill, but none that I‚Äôve found so far on giscus. So, here goes!\nEnable Discussions on your blog repo. Optionally, if you want to use a non-default Discussions category for storing giscus content, add a new category. I did this and called it ‚ÄúComments‚Äù. As recommended by giscus, it‚Äôs a good idea to set the discussion format to ‚ÄúAnnouncement‚Äù so that non-authorized users can‚Äôt add content via the Discussions interface (only the giscus widget on your blog).\nInstall the giscus GitHub app and configure it to have access to your blog‚Äôs repo.\nGo to the giscus app interface, scroll down to ‚Äúconfiguration‚Äù and fill in the details for your blog. Once you‚Äôve done so, further down you should see an HTML code block under ‚ÄúEnable giscus‚Äù populated with your information.\n\n\n\nFigure 2: giscus configuration menu.\n\n\n\n\n\n\nFigure 3: giscus HTML block. Once you fill in the fields in the configuration menu, the parts starting with [ENTER ...] will get automatically populated.\n\n\n\nAs described in Miles McBain‚Äôs blogpost, unfortunately in Distill, you can‚Äôt just paste the HTML directly into an Rmd file. It won‚Äôt show up. But the same work-around that he describes for utterances also happily works for giscus! Read on‚Ä¶\nAdd an .html file (I‚Äôve called mine giscus.html) to the root of your blog repo that looks like this (and is based off of Miles‚Äô HTML):\n\n<script>\n   document.addEventListener(\"DOMContentLoaded\", function () {\n     if (!/posts/.test(location.pathname)) {\n       return;\n     }\n\n     var script = document.createElement(\"script\");\n     script.src = \"https://giscus.app/client.js\";\n     script.setAttribute(\"data-repo\", \"[ENTER REPO HERE]\");\n     script.setAttribute(\"data-repo-id\", \"[ENTER REPO ID HERE]\");\n     script.setAttribute(\"data-category\", \"[ENTER CATEGORY NAME HERE]\");\n     script.setAttribute(\"data-category-id\", \"[ENTER CATEGORY ID HERE]\");\n     script.setAttribute(\"data-mapping\", \"pathname\");\n     script.setAttribute(\"data-reactions-enabled\", \"0\");\n     script.setAttribute(\"data-emit-metadata\", \"0\");\n     script.setAttribute(\"data-theme\", \"light\");\n     script.setAttribute(\"data-lang\", \"en\");\n\n     /* wait for article to load, append script to article element */\n     var observer = new MutationObserver(function (mutations, observer) {\n       var article = document.querySelector(\"d-article\");\n       if (article) {\n         observer.disconnect();\n         /* HACK: article scroll */\n         article.setAttribute(\"style\", \"overflow-y: hidden\");\n         article.appendChild(script);\n       }\n     });\n\n     observer.observe(document.body, { childList: true });\n   });\n <\/script>\n\nIf you compare the above code with the HTML block in the giscus app (Fig. 3), you should be able to see how the script.setAttribute lines above map to the key-value pairs in the HTML block in the giscus app. All we have to do is copy the contents of the HTML block over to this giscus.html file. You can see what my giscus.html file looks like here.\nModify _site.yml so that the giscus.html file gets loaded on every Distill article page 4:\noutput: \n  distill::distill_article:\n    includes:\n      in_header: giscus.html\nThat‚Äôs it! Or it should be anyways. I recommend trying a test comment to make sure everything is working (nobody will tell you otherwise‚Ä¶)\n\nblogdown and Distill are R packages for making websites. In a nutshell, Distill is much simpler to use than blogdown, at the cost of some design flexibility. For more about making the switch, you can get caught up with posts from Thomas Mock, Frie Preu, Lisa Lendway, and Andreas Handel.‚Ü©Ô∏é\ndisqus and utterances are tools that let users comment on blog posts. Recently many R-bloggers have been moving away from disqus because it has a habit of tracking user‚Äôs data and causing page bloat. More recently, when I checked on my disqus account (in the process of migrating away!), it had a option to ‚Äúopt-out‚Äù of data tracking, but that means data-tracking is on by default.‚Ü©Ô∏é\nFor example, Vebash Naidoo‚Äôs tutorial and Michael McCarthy‚Äôs post describing how to control the location of the comments section.‚Ü©Ô∏é\nThe _site.yml file is longer than this, but I‚Äôm just showing the relevant code to add. You can see my _site.yml file here.‚Ü©Ô∏é\n",
    "preview": "posts/2021-11-24_using-giscus/img/adam-solomon-WHUDOzd5IYU-unsplash.jpg",
    "last_modified": "2022-06-07T15:39:59+00:00",
    "input_file": {}
  },
  {
    "path": "posts/2021-11-12-adding-disqus-to-distill-blogs/",
    "title": "Adding Disqus to distill blogs",
    "description": "Notes on adding comments to distill pages.",
    "author": [
      {
        "name": "Zo√´ Turner",
        "url": {}
      }
    ],
    "date": "2021-11-12",
    "categories": [
      "tutorial",
      "discus"
    ],
    "contents": "\n\nContents\nInspiration\nIssues with images\n\n\n\nNote: This post was originally written by Zo√´ Turner and copied here on December 21, 2021 - see the original post here for a potentially updated version.\n\n\n\n\nFigure 1: Photo of frost on wood\n\n\n\nInspiration\nWhen searching for ‚Äúdistill blog doesn‚Äôt show xaringan slides‚Äù I stumbled across this blog by Shamindra Shrotriya where I found that it‚Äôs possible to add comments to the distill pages.\nIssues with images\nI‚Äôve never used Disqus before but I followed Shamindra‚Äôs blog instructions and it worked. The only thing to note is that images must be in PNG format. Thankfully I‚Äôd only included a few so I could convert them by opening them in Microsoft Paint and saving them as .PNG.\nI saved as .PNG rather than .png as @tomjemmett had had to set my files to this in the NHS-R Community GitHub to get the xaringan slides there to render. I thought it best to follow this as good practice.\n\n\n\n",
    "preview": "posts/2021-11-12-adding-disqus-to-distill-blogs/distill-preview.png",
    "last_modified": "2022-06-07T15:39:59+00:00",
    "input_file": {},
    "preview_width": 1000,
    "preview_height": 750
  },
  {
    "path": "posts/2021-08-14-new-additions/",
    "title": "Leaving known waters",
    "description": "Over the last weeks and months I have collected three features for the blog itself that I want to implement. Covers: A custom parallax scrolling landing page, Utterances comments and a custom 404 error page. None are built into the {distill} package, so there's some manual work needed. I'll go through the changes here.",
    "author": [
      {
        "name": "Christian A. Gebhard",
        "url": "https://jollydata.blog/about.html"
      }
    ],
    "date": "2021-08-21",
    "categories": [
      "tutorial",
      "html",
      "css",
      "utterances",
      "github",
      "features"
    ],
    "contents": "\n\nContents\nIntroduction\nA clean landing page\nThe Idea: parallax scrolling\nImplementation\nThe result\n\nComment function via Utterances\nCustom 404 error page\nFirst attempt\nSecond attempt\n\nComments\n\n\nNote: This post was originally written by Christian A. Gebhard and copied here on September 21, 2021 - see the original post here for a potentially updated version.\n\n\nUpdates\n\nUpdated 2021-09-21: Added paragraph about the actual .htaccess file.\n\nIntroduction\nThe three changes include a new look for the landing page, a comments functionality and a custom 404 error page. Read on to see how all of this is implemented.\nA clean landing page\nI always considered the default landing-on-a-posts-listing a bit awkward. It might be practical to regular users1 but it was not really welcoming or eye-pleasing. On the other hand, I also didn‚Äôt want to have a separate landing page with a link to the posts listing. I still want to have the listing on the starting page, as this blog is mainly about the content, not to showcase my CV or other content.\nThe Idea: parallax scrolling\nThe design I chose, is a screen-filling background image, with a simple welcoming message. When scrolling down, the post listing appears. To have a modern look, I wanted to have a parallax scrolling effect, which means showing different scrolling speeds for different layers of the page. The example GIF shows the effect in action.\n\nImplementation\nThe default index.Rmd that is generated when you set up a distill blog, only contains a three line YAML header and looks like this:\n---\ntitle: \"The name you chose\"\nsite: distill::distill_website\nlisting: posts\n---\nConveniently, it seems that distill appends the posts listing to whatever content you put into this index.Rmd. To implement my new landing page I added basic HTML and CSS to the file. As I‚Äôm not experienced with either, the result is a patchwork of snippets from stackoverflow answers and w3schools examples, glued together by trial and error. The final result looks like this:\n\n\nShow code\n---\ntitle: \"Posts\"\nsite: distill::distill_website\nlisting: posts\n---\n\n<style>\n    .parallax { \n    \n        /* Set the background image */\n        background-image: url(\"sailplot.png\");\n    \n        /* Use the full viewscreen height as height */\n        height: 100vh; \n        \n        /* Set the background to create the parallax scrolling */\n        /* this does not work on iOS mobile devices */\n        background-attachment: fixed;\n        background-position: center;\n        background-repeat: no-repeat;\n        background-size: cover;\n    }\n    \n    .welcome {\n      position: absolute;\n      left: 0;\n      top: 35vh;\n      width: 100vw;\n      text-align: center;\n      color: #000;\n    }\n    \n    .welcome span.title {\n      font-family: 'Bitter', serif;\n      font-weight: bold;\n      color: #000;\n      font-size: 42px;\n      letter-spacing: 10px;\n      line-height: 1.6;\n    }\n    \n    .welcome span.surrounding {\n      font-family: 'Bitter', serif;\n      color: #000;\n      font-size: 20px;\n      letter-spacing: 5px;\n    }\n    \n    .welcome span.downarrow {\n      font-size: 42px;\n    }\n    \n    \n    .downbutton {\n      background: rgba(0,0,0,0);\n      border: none;\n      outline: none;\n      color: #1BC7DC;\n      -moz-opacity: 0.75;\n      -khtml-opacity: 0.75;\n      opacity: 0.75;\n      text-align: center;\n      font-size: 42px;\n    }\n\n<\/style>\n\n<!-- Here comes the actual HTML content: -->\n\n<div class=\"parallax l-screen\">\n\n  <div class=\"welcome\">\n  \n    <span class=\"surrounding\">Welcome to the<\/span>\n    <br><br><br>\n    <span class=\"title\">jolly data blog<\/span>\n    <br><br><br>\n    \n    <span class=\"downarrow\">\n    \n      <!-- The script provided in the onclick attribute allows to click the down button and triggers a smooth scroll down to the posts listing. -->\n      \n      <button class=\"downbutton\" onclick=\"window.scroll({ top: window.innerHeight+50,  left: 0,  behavior: 'smooth' });\">\n        <img src=\"resources/chevron.png\" width=\"100px\">\n      <\/button>\n      \n    <\/span>\n  <\/div>\n<\/div>\n\nThe ‚Äúsailplot.png‚Äù was generated using R. If you‚Äôre interested, check out the code. The ‚Äúchevron.png‚Äù was drawn using Inkscape.\nThe result\nYou can checkout the resulting page here. There is an important note: I couldn‚Äôt get the parallax scrolling effect to work on mobile iOS-devices. On an iPhone and iPad, that I could use for testing, the background image sailplot.png was not shown. Instead, the background was plain white. As far as I can tell after briefly looking around the web, it seems that mobile webkit engines explicitly do not support this effect in order to limit the resource demands.2 As a clean white background didn‚Äôt look too bad either, I chose to let it that way. A skilled web developer might get this to work on any device.\nIf you like the design, have ideas for improvement (or even a solution to the iOS problem), leave a comment below!\nWait, what? Yes, you can now leave comments below the posts. Read on to find out more!3\nComment function via Utterances\nI‚Äôm always happy to interact with the R / Python / data science community but until now I only offered e-mail, Twitter or Mastodon as means of communication. While this may be easy for some, it might be too much of a hurdle for readers to ‚Äújust leave a short note‚Äù. I hope to offer a more direct way to react to the posts by offering a comment functionality right below every blog post.\nTo achieve this, I use the utterances widget. The creators of the widget describe it as:\n\nA lightweight comments widget built on GitHub issues. Use GitHub issues for blog comments, wiki pages and more! (see https://utteranc.es)\n\nAccording to the developers it‚Äôs open source and doesn‚Äôt come with any sort of tracking or ads.\nThe comments are stored in a public repository as comments to a GitHub issue4. This means that, in order to comment, you need a GitHub account. While this might put some readers off5, I assume most of you have an account there anyways.\nFor the ‚ÄúHow to‚Äù I‚Äôd like to refer to the great instructions at Miles McBain‚Äôs blog, that I followed closely. Based on his HTML template, I created mine, which is accessible here.\nOverall, setting it up was much easier than I expected!\nCustom 404 error page\nIn theory this one is pretty straight forward: make a nice HTML file, put it somewhere in the root directory of your website and tell the webserver to use that file instead of the rather boring default ‚Äú404 not found‚Äù error.\nIn my case this was as easy as putting the following line into a file called .htaccess in the site‚Äôs root directory:\nErrorDocument 404 /404.html\nI suppose this should be valid for all Apache Webservers. Many webhosters might offer a frontend to manage this, but if you‚Äôre using github pages or Netlify I suppose you‚Äôd have to create the file manually.6\nNow let‚Äôs get to the part(s) where this got tricky. Most importantly, there are three players to consider: you (as in your HTML/CSS skills), the blogging framework you use (distill in this case) and the webserver (which is often operated by a web-hosting service).\nFirst attempt\nIf you‚Äôre not experienced in web development, I suggest using some sort of static website building tool, as did I. Within the R/Rmarkdown universe there‚Äôs the great {postcards} package, that converts simple markdown into nice static pages using beautiful templates. An example is the about page, but there are many more possibilities.\nI modified the postcards::onofre theme to my liking and was satisfied with the outcome:\n\n\nShow code\n\nknitr::include_graphics(\"images/embedded.png\")\n\n\n\n\nFigure 1: The first attempt to build a custom 404 error page.\n\n\n\nI even pushed this to my production system and only discovered the problem there: the distill framework seems to work with relative URLs mostly. While this might be beneficial in many cases, it created a problem for the custom 404 page (probably in conjunction with my hoster‚Äôs server setup.)\nThe 404.html is located in my website‚Äôs root directory. So all relative links from within this directory work fine: when loading a wrong URL in the base-directory such as ‚Äúhttps://jollydata.blog/error_test.html‚Äù the page is rendered correctly, as seen in Fig. 1.\nNow, when I tried to misspell the URL of a blog post, e.g.¬†https://jollydata.blog/posts/2021-06-12-tt-fishing, the error page was completely broken. All links from the navbar and the footer pointed to wrong relative locations such as https://jollydata.blog/posts/about.html. It seems that the webserver loads the 404.html from the root directory, but stays in the subdirectory /posts/ as base for the relative links. In addition this even broke the layout of the page.\nThis could be a problem specific to my hosting service. If you want to include a custom 404 page, I suggest trying to build a simple static page with e.g.¬†{postcards} and see if this works with your webhosting first, before following along with my second (successfull, yet tedious) attempt.\nSadly, I didn‚Äôt find a solution in the webhoster‚Äôs server settings that did the trick. This is why I went back to the start and tried again.\nSecond attempt\nI really liked the postcards-version of my custom 404 error page. But I had to avoid loading the nav-bar, the footer and any layout-related scripts/frameworks built into {distill}.\nBasically I opted for copying the layout with plain HTML/CSS and use that as a self-contained page without the bells-and whistles of the {distill} framework. This meant building it almost from scratch7. The only thing I import is my customized ‚Äúmain‚Äù-CSS file to keep the font styles consistent with the rest of the blog.\nThe resulting page looks quite similar:\n\n\nShow code\n\nknitr::include_graphics(\"images/blank.png\")\n\n\n\n\nFigure 2: The second attempt to build a custom 404 error page.\n\n\n\nIn this manually created page I only use absolute URLs so independently of what the webserver ‚Äúdoes‚Äù the reader will always end up on the right page. If you want to check it out, feel free to mess up the URL and enjoy the view. For convenience click here. If you‚Äôre interested into my 404.html, it is accessible here.\nComments\nI really enjoyed tweaking the jollydata.blog! However I sometimes reached the limits of my web development skills and maybe found sub-optimal solutions. Are you aware of easier ways to achieve the above extensions? Are you missing vital details to apply any of the above to your blog? Please leave a comment here:\n\nbut let‚Äôs be honest‚Ä¶how many might there be?‚Ü©Ô∏é\nI dug this up on page gazillion of a random forum somewhere on the internet, so don‚Äôt take this as definite / official explanation.‚Ü©Ô∏é\nI‚Äôm so sorry for this cheap transition, it just overcame me.‚Ü©Ô∏é\nFor each blog post, a new issue is created, thereby allowing for separate comment feeds for each blog post.‚Ü©Ô∏é\nYou can still send me an E-Mail if you want!‚Ü©Ô∏é\nI haven‚Äôt tried this myself on these services-‚Ü©Ô∏é\nAs mentioned above already, I‚Äôm not experienced with web development and the resulting website is a patchwork of snippets mostly from stackoverflow answers and w3schools examples, glued together by trial and error.‚Ü©Ô∏é\n",
    "preview": "posts/2021-08-14-new-additions/images/windrose_black.png",
    "last_modified": "2022-06-07T15:39:59+00:00",
    "input_file": {},
    "preview_width": 956,
    "preview_height": 928
  },
  {
    "path": "posts/2021-06-19-distill-tidytales/",
    "title": "What's he building in there?",
    "description": "Customizing a {distill} website. Covers: Page and article metadata tricks with {metathis}, adding collapsible and movable Utterances comments sections to posts, and using post templates with {distilltools}.",
    "author": [
      {
        "name": "Michael McCarthy",
        "url": "https://tidytales.ca/about.html"
      }
    ],
    "date": "2021-06-19",
    "categories": [
      "metathis",
      "utterances",
      "distilltools",
      "tutorial"
    ],
    "contents": "\n\nContents\nOverview\nPage and Article Metadata\nArticle Metadata\n\nUtterances Comments\nPost Templates\nCommunity Tips and Tricks\n\nOverview\n\nNote: This post was originally written by Michael McCarthy for Tidy Tales and copied here on June 20, 2021‚Äîsee the original post here for a potentially updated version.\n\nTidy Tales is built using Distill for R Markdown, a web publishing format optimized for scientific and technical communication. I chose Distill for Tidy Tales over other R website formats for its simplicity and style. My personal website uses blogdown, a more customizable but also more complicated format, which I did not want or need for Tidy Tales. That said, I did encounter some restrictions that I wanted to overcome while customizing Tidy Tales using the tools provided by Distill. This post covers some tips and tricks to get around these restrictions.\nPage and Article Metadata\nDistill comes equipped with a number of features to automatically enable richer sharing of article links on the web using article metadata. However, some of these features are not available for non-article pages on distill blogs (such as link preview images for the home page), and the automatic behaviour of these features limits how much they can be customized. Both of these limitations can be overcome using the metathis package by Garrick Aden-Buie.\nTom Mock has a great blog post diving into how metadata can be used to customize how links from a distill blog appear on social media. It‚Äôs a great resource and I followed it to add metadata and preview images to the home and about pages of Tidy Tales.\nHere is what the index.Rmd file for the Tidy Tales home page looks like.\n---\ntitle: \"Wrangling, Visualizing, Modelling, Communicating data\"\nsite: distill::distill_website\nlisting: posts\n---\n\n```{r, include=FALSE, results='asis'}\nlibrary(metathis)\n\nmeta() %>%\n  meta_social(\n    title = \"Tidy Tales\",\n    description = \"Wrangling, Visualizing, Modelling, Communicating data\",\n    url = \"https://tidytales.ca\",\n    image = \"https://tidytales.ca/inst/images/twittercard.png\",\n    image_alt = \"Tidy Tales logo\",\n    og_type = \"website\",\n    twitter_card_type = \"summary\",\n    twitter_site = NULL\n  )\n```\nWhen the site is built distill will automatically generate metadata for the home page, and the metathis code in index.Rmd will generate additional metadata for the home page. Here is what it looks like in HTML.\n<!-- Generated by distill -->\n<meta property=\"og:title\" content=\"Tidy Tales | Michael McCarthy: Wrangling, Visualizing, Modelling, Communicating data\">\n<meta property=\"og:type\" content=\"article\">\n<meta property=\"og:locale\" content=\"en_US\">\n<meta property=\"og:site_name\" content=\"Tidy Tales | Michael McCarthy\">\n<meta property=\"twitter:card\" content=\"summary\">\n<meta property=\"twitter:title\" content=\"Tidy Tales | Michael McCarthy: Wrangling, Visualizing, Modelling, Communicating data\">\n<meta property=\"twitter:site\" content=\"@propertidytales\">\n<meta property=\"twitter:creator\" content=\"@mccarthymg\">\n\n<!-- Generated by metathis -->\n<meta property=\"og:locale\" content=\"en_US\">\n<meta name=\"twitter:title\" content=\"Tidy Tales\">\n<meta name=\"twitter:description\" content=\"Wrangling, Visualizing, Modelling, Communicating data\">\n<meta name=\"twitter:url\" content=\"https://tidytales.ca\">\n<meta name=\"twitter:image:src\" content=\"https://tidytales.ca/inst/images/twittercard.png\">\n<meta name=\"twitter:image:alt\" content=\"Tidy Tales logo\">\n<meta name=\"twitter:card\" content=\"summary\">\n<meta property=\"og:title\" content=\"Tidy Tales\">\n<meta property=\"og:description\" content=\"Wrangling, Visualizing, Modelling, Communicating data\">\n<meta property=\"og:url\" content=\"https://tidytales.ca\">\n<meta property=\"og:image\" content=\"https://tidytales.ca/inst/images/twittercard.png\">\n<meta property=\"og:image:alt\" content=\"Tidy Tales logo\">\n<meta property=\"og:type\" content=\"website\">\nThere is some overlap between the <meta> tags generated by distill and metathis, however, the metadata tags generated by metathis seem to take precedence over those automatically generated by distill. For example, the Twitter card for the Tidy Tales home page displays ‚ÄúTidy Tales‚Äù as its title, rather than ‚ÄúTidy Tales | Michael McCarthy: Wrangling, Visualizing, Modelling, Communicating data‚Äù.\nArticle Metadata\nThe ability to override some of the metadata generated by distill using metathis is hacky, but it also affords more customization for distill blogs. One trick I‚Äôm taking full advantage of with this is to have unique preview images between posts on Tidy Tales and their social cards. Distill allows you to specify a preview image for a post using the preview chunk option.\n```{r, preview=TRUE}\nlibrary(ggplot2)\nggplot(diamonds, aes(carat, price)) +\n  geom_smooth()\n```\nThis preview image will be used alongside post listings and in social cards. However, if a different image is specified in metathis::meta_social() that image will be used in social cards but the preview image specified in the post chunk will still be used alongside post listings. I‚Äôm using this on Tidy Tales to have branded images for social cards and plain images for post listings. Here‚Äôs an example of the branded social card image from my first post.\n\n\n\n\n\nFigure 1: The branded social card image for my first post. Copy the post link into a tweet to see it in action.\n\n\n\nUtterances Comments\nDistill only supports Disqus comments officially. I did not want to use Disqus comments on Tidy Tales because it would add bloat to my posts, and because I do not want a third-party data mining and tracking Tidy Tales readers. Utterances is a lightweight alternative that uses GitHub issues for comments. Miles McBain shared an HTML script on his blog to add Utterances to a distill blog.\nHere is what the script for Tidy Tales looks like.\n<script>\n document.addEventListener(\"DOMContentLoaded\", function () {\n   if (!/posts/.test(location.pathname)) {\n     return;\n   }\n\n   var script = document.createElement(\"script\");\n   script.src = \"https://utteranc.es/client.js\";\n   script.setAttribute(\"repo\", \"mccarthy-m-g/tidytales\");\n   script.setAttribute(\"issue-term\", \"title\");\n   script.setAttribute(\"crossorigin\", \"anonymous\");\n   script.setAttribute(\"label\", \"utterances\");\n   script.setAttribute(\"theme\", \"github-light\");\n\n   /* wait for article to load, append script to article element */\n   var observer = new MutationObserver(function (mutations, observer) {\n     var article = document.querySelector(\"details.comment-section\");\n     if (article) {\n       observer.disconnect();\n       /* HACK: article scroll */\n       article.setAttribute(\"style\", \"overflow-y: hidden\");\n       article.appendChild(script);\n     }\n   });\n\n   observer.observe(document.body, { childList: true });\n });\n<\/script>\nThe script uses JavaScript to inject the Utterances <iframe> into the end of the first HTML Element within the document that matches the CSS selector specified in document.querySelector(). By default, the script shared by Miles will place the comment section at the end of a distill post‚Äôs body. Since Utterances comments sections are not collapsible this presents a problem though, as more comments are made readers will have to scroll further and further to reach a post‚Äôs appendix.\nTo overcome this on Tidy Tales I created new CSS selectors that use the <details> tag, so readers can show and hide the comments section as they please, and added a brightness and opacity filter to the selector for the Utterances <iframe> to make it fit into the Tidy Tales colour scheme better. I also wanted my comments section to be in the appendix of my posts rather than the body.\nd-appendix details.comment-section {\n  color: var(--dark-shade-alpha);\n  font-family: var(--heading-font);\n  font-size: 15px !important;\n}\n\nd-appendix details.comment-section summary:after {\n  content: \"Show\";\n}\n\nd-appendix details[open].comment-section summary:after {\n  content: \"Hide\";\n}\n\n.utterances {\n  filter: brightness(95%) opacity(85%);\n}\nThe above HTML and CSS is applied to all Tidy Tales posts using the theme and includes parameters in _site.yml, so to add Utterances to a post I only need to include the following in the R Markdown file for a post as an appendix header.\n## Comments {.appendix}\n\n<details open class=\"comment-section\">\n   <summary>\n   <\/summary>\n<\/details>\nPost Templates\nFinally, and most importantly, I am using an R Markdown template for new Tidy Tales posts so I don‚Äôt need to copy and paste all of my customizations into the YAML and body of every post I create. This is easily done using the create_post_from_template() function in the distilltools package by Ella Kaye. And it will be even easier after the Pull Request I‚Äôm working on with Ella adds an RStudio addin for creating new posts from a template to the package.\n\nElla also created the awesome Distill Club hex sticker I used for this post‚Äôs preview image.\n\n\n\nFigure 2: Preview of the new post from template RStudio addin for distilltools.\n\n\n\nCommunity Tips and Tricks\nDistill has a great community of users supporting each other to build and customize their sites. John Paul Helveston has put together the Distillery‚Äîa distill blog about building distill websites and blogs‚Äîto collect tips and tricks from the community and to showcase their distill websites and blogs. Check it out if you‚Äôre thinking of joining the Distill Club!\n\n\n\n",
    "preview": "posts/2021-06-19-distill-tidytales/images/distillclub.png",
    "last_modified": "2022-06-07T15:39:59+00:00",
    "input_file": {},
    "preview_width": 2052,
    "preview_height": 2373
  },
  {
    "path": "posts/2021-05-26-custom-syntax-highlighting-for-distill-part-2-creating-the-palette/",
    "title": "Custom Syntax Highlighting for {distill} Part 2: Creating the Palette",
    "description": "How to create an appealing and accessible colour palette for a syntax highlighting scheme",
    "author": [
      {
        "name": "Ella Kaye",
        "url": "https://twitter.com/ellamkaye"
      }
    ],
    "date": "2021-05-26",
    "categories": [
      "color",
      "accessibility",
      "tutorial"
    ],
    "contents": "\n\nContents\nPart 1 recap and Part 2 overview\nA brief primer on colour theory\nColour harmonies\nColour spaces\n\nApproach 1: ColorSlurp and HSB\nBuilding a palette based on my pink, using colour theory\nAdapting for web accessibility\nChecking for colourblindness\n\nApproach 2: An R-based HCL alternative\nBuilding a palette based on my pink, using colour theory\nAdapting for web accessibility\nChecking for colourblindness\nBut, do I like it?\n\nBack to Part 1\n\n\nNote: This post was originally written by Ella Kaye and was copied here on May 27, 2021 - see the original post here for a potentially updated version.\n\n\n\n\nPart 1 recap and Part 2 overview\nIn Part 1 of this series, custom syntax highlighting for {distill}: modifying the theme, I describe how and why I went about the process of finding and modifying the default syntax highlighting for {distill} and how I created a function that wrapped that process for {distilltools}. I discuss the default syntax highlighting theme used on {distill} sites, and how we can modify it by replacing the five colours used there with five colours of our choosing.\nI also outline the four criteria that were important to me as I went about choosing colours for my own syntax highlighting theme:\nIt be based on the pink that I use in my logo and elsewhere throughout this site\nIt uses colour theory to pick colours that look appealing together\nIt meets WCAG web accessibility guidelines, by ensuring sufficient colour contrast, i.e.¬†a ratio of 4.5:1, between each of the colours in the theme and this site‚Äôs background colour (white)\nThe colours in the palette are colourblind-friendly, i.e.¬†still distinguishable to people with various difference types of colourblindness.\nThis post spins out from Part 1 with a brief primer on colour theory and then a deep-dive into the processes, both thought and practical, of choosing colours for my palette that meet the above criteria. I show how I first went about this to derive the palette that‚Äôs implemented throughout this site. I also demonstrate a different, entirely R-based, approach to satisfying the criteria, which I decided to try out after learning more about different colour spaces as I was writing up this post. I much preferred the outcome of one approach to the other, but your mileage may vary.\nA brief primer on colour theory\nColour harmonies\n\n\n\nFigure 1: An HSL colour wheel. Screen shot from https://www.canva.com/colors/color-wheel/, annotations adapted from https://dev.to/rneha725/hsl-and-hsla-in-css-31j3.\n\n\n\nColour theory determines which colours ‚Äòlook good‚Äô together, based on their relative position on a colour wheel, such as that in Figure 1, somewhat analogously, I think, to how certain musical intervals sound more pleasing/harmonious than others, depending on the ratio of their frequencies. As shown in Figure 2, there are various different types of colour palettes that are in colour harmony, such as complementary (comprised of colours opposite each other on the wheel), analogous (three colours side by side) and triadic (three colours evenly spaced around the wheel). Note that all the colour schemes are derived from the same twelve colours, spaced evenly around a circle.\n\n\n\nFigure 2: Harmonious colour combinations. Figure from https://www.widewalls.ch/magazine/color-theory-basics-elements-color-wheel.\n\n\n\nColour spaces\nRGB, HSB and HSL\nAnother aspect of colour theory relates to colour spaces, and different ways that colours can be defined. The best known, at least in the context of designing for the web, is RGB (Red Green Blue), which defines a colour by how much of each of those three primary colours it contains, in a range of 0-255. It is the hexidecimal representations of these three numbers that combine to make up the hex code for a colour.\nMore intuitive, however, for adjusting colours, is defining them by HSB (Hue, Saturation, Brightness), also known as HSV (Hue, Saturation, Value). HSB is a simple transformation of the RGB space. Similar to HSB is HSL (Hue, Saturation, Lightness), though HSL is considered an improved over HSB in terms of its perceptual qualities.\nIn HSB, the hue represents the colour type and is a number measured between 0 and 360¬∞; it‚Äôs where you are on the colour wheel, ignoring how bright or intense the colour is. Saturation describes the intensity or richness of the hue, measured between 0 and 100%. 100% is the richest version of the colour and 0% is a shade of grey. Brightness measures, you guessed it, the brightness of the colour. Again, it ranges from 0 to 100%, with 0% being black and 100% being a very bright colour (here, black is not the opposite of white). Here‚Äôs an excellent article on the HSB system, which also explains how it differs from HSL. The differences between HSB and HSL are also illustrated in Figure 3.\n\n\n\nFigure 3: HSL and HSB sliders for the pink used throughout this site. Image is a screenshot from http://colorizer.org.\n\n\n\nIt‚Äôs great to play around with an HSL or HSB colour wheel to get a sense of how harmonious colour schemes are built, and how the colours in them relate to each other on the wheel. I really like the canva colour wheel. It‚Äôs pretty simple, with only a few schemes, but it‚Äôs nicely designed and easy to use, and the page explains the basics of colour theory too. It‚Äôs a fun way to start building a palette. I like how you can pull the dots around the wheel and see how the colours relate, and if you click on a colour in the palette, there are HSL sliders too. Plus, as you move colours around, the background of the page changes colour, which is a nice touch!\nHCL\nWhilst websites on colour theory for designers tend to focus on either the HSB or HSL spaces, and it‚Äôs HSB or HSL wheels/sliders that tend to be built into design and colour software and apps, both spaces suffer from a lack of perceptual uniformity. The RGB rainbow palette is notorious for this. In general, RBG/HSB/HSL palettes are not a good choice for statistical graphics and data visualisation, where colour conveys meaning. For these purposes, the HCL colour space (Hue, Chroma, Luminance) offers a much better alternative. It is much more suitable for capturing human colour perception.\nThere is an R package for working with the HCL colour space, the intuitively named {colorspace} (Zeileis et al. 2020). It has many excellent vignettes, including one about the HCL space and its perceptual superiority over other colour spaces. The package also provides colour palettes and scales for {ggplot2}. There is also support for HCL palettes in base R. The HCL space is also used on I want hue, a site about colours aimed at data scientists, which allows you to generate and refine palettes of optimally distinct colours.\n\n\n\nFigure 4: My pink on the Luminance-Chroma plane in the HCL space. Image is a screenshot from http://hclwizard.org.\n\n\n\nI haven‚Äôt seen the HCL space used elsewhere, at least not in the myriad of sites on colour theory for designers or colour/design apps than I use or have read when preparing my theme and this post. Perceptual uniformity is arguably more important in choosing colour palettes for data visualisation, where the colour conveys information about the data, than in picking a few colours that look good together for a syntax highlighting scheme.\nApproach 1: ColorSlurp and HSB\nBuilding a palette based on my pink, using colour theory\nAs I discuss in Part 1 of this series, I know that I need a palette of five colours to replace the five colours used in the default syntax highlighting scheme that comes with {distill}. The problem with all the colour schemes defined in Figure 2 is that they use a maximum of four colours. But not to worry! We know from colour theory that we can find 12 colours in harmony by taking evenly spaced colours around the HSL or HSB wheel, i.e.¬†colours whose hues are 30¬∞ apart, given fixed values for saturation and brightness/lightness. Since we only need five colours, it‚Äôs sufficient to find the six colours that are 60¬∞ apart, and ignore one of them. Note that for five colours to appear harmonious, we have to respect these angles, not choose five colours that are 72¬∞ apart.\nThe main pink that I use in this site has hex #D4006A. I use a great little Mac app called ColorSlurp for building and assessing colour palettes. The basic version is free, though the pro version has great features for testing accessibility - more on that below. In ColorSlurp, I started a new palette with #D4006A as a starting point, then, making sure I was in HSB mode, found its HSB values are 330¬∞, 100%, 83%. Leaving the S and B sliders where they are, the next colour I needed is 60¬∞ around the circle, i.e.¬†at 30¬∞, so I moved the H slider to that value and added the resulting orange to the palette. I then repeated that for 90¬∞, 150¬∞, 210¬∞ and 270¬∞, giving me two shades of green, a blue and a purple. With a colour selected in ColorSlurp, you can also pull up the colour harmonies tab, , which gives quick access to some of these colours. As I only need five colours, I discarded one of the greens, keeping the one at 150¬∞, which is complementary to the starting pink.\nIf you don‚Äôt use ColorSlurp or a similar app, there are many online options for building a palette in this way, for example http://colorizer.org (add a new color to the palette by clicking on the next square down to the right of the sliders). In both ColorSlurp and on colorizer.org, once you have defined a colour by its HSB values, you can read off the hex code, for ease of use in R.\nAt the end of this stage of the process, based purely on my pink and colour theory, my syntax highlighting palette now stood as in Figure 5. In the HSB space, these colours all have a saturation of 100% and a brightness of 83%.\n\n\n\nFigure 5: Colours for syntax highlighting, starting from my main pink, based only on colour theory\n\n\n\nAdapting for web accessibility\nAs noted in Part 1 of this series, one key feature of the default syntax highlighting scheme for {distill} is that it is optimised for accessibility and colour contrast. According to the Web Content Accessibility Guidelines, at the WCAG AA (minimum contrast) level, this requires that that contrast ratio between text and background colours be at least 4.5:1 for text of 14pt+ (which is the default text size for code in {distill}). The more stringent WCAG AAA (enhanced) level requires a ratio of at least 7:1.\nThe pro version of ColorSlurp includes a contrast checker, as in Figure 6, though there are many websites that also offer this. WebAIM (Web with Accessibility in Mind) has a very handy contrast checker which, like ColorSlurp, also includes sliders for adjusting the colours until the desired contrast is reached. Darkening a colour to improve contrast keeps the hue and saturation the same but reduces the brightness or lightness component (ColorSlurp uses HSB, WebAIM uses HSL).\n\n\n\nFigure 6: Contrast checking in ColorSlurp\n\n\n\nThe pink, blue and purple in the palette created above have a contrast ratio of better than 4.5:1 with the pure white background, but the orange and green do not.\nMy first thought was to keep the pink, blue and purple the same, and to just reduce the brightness of the orange and green until the contrast ratio was a bit better than required. In the HSB space, that gives the palette in Figure 7.\n\n\n\nFigure 7: Reducing brightness in just the orange and green to achieve desired contrasts.\n\n\n\nIt‚Äôs not bad, but when I applied that palette as a syntax highlighting scheme, to my eye the pink, blue and purple looked a little too bright relative to the orange.\nMy next thought was to reduce the brightness on all the colours to the level of the least bright colour that passes the accessibility check (the green, at 53%). That gives the palette in Figure 8.\n\n\n\nFigure 8: Reducing brightness in all colours to the level of the green.\n\n\n\nThat looks way too dark for my liking. I don‚Äôt think it‚Äôs vibrant enough, and, although the colours all have good contrast against the white background, they don‚Äôt have much contrast with each other.\nSo, I settled on a compromise position. I reduced the brightness of the original pink, blue and purple from 83% to match the brightness of the accessibility-passing orange (71%), leaving only the green at a brightness of 53%, which it needs to pass the contrast check. This gives the palette in Figure 9. To my eye, the green doesn‚Äôt appear considerably more dark/less bright than the other four colours. If anything, the greens in Figures 5 and 8, which both have uniform brighness, look a little too bright compared to the other colours. I guess this is a result of the lack of perceptual uniformity of the HSB space.\n\n\n\nFigure 9: The palette I settled on for my syntax highlighting scheme.\n\n\n\nI‚Äôm happy with that, and that‚Äôs the syntax highlighting scheme I‚Äôve adopted throughout this site, despite the fact that the palette now doesn‚Äôt actually include the pink that I set out to build my scheme around! However, because of the process I‚Äôve followed, the pink that is in the palette does tone well with the brighter pink and I think my site still has a consistent look. In the end, it was more important that all the colours in the palette looked consistent together and met accessibility guidelines.\nI am only just beginning to learn about web accessibility, and I know my site does not yet meet all best practices, but I‚Äôm committed to improving in this area. I first became aware of the issue of web accessibility because I follow Silvia Canel√≥n on twitter and I highly recommend you do the same! The a11y project and WebAIM are great places to learn more.\nChecking for colourblindness\nSome visual impairments require a high colour contrast between text and background colour in order to be able to read content on the web. Another class of visual impairment worth paying attention to when designing palettes is that of colour blindness.\nNick Tierney has some excellent resources about colour and colourblindness and R packages for accessing these. These comprehensive slides cover what colour is and how we perceive it, colourblindness, how to check how palettes/plots appear to those with different types of colourblindness, the HCL space, the {colorspace} package and how to create your own palettes. He also has a short blog post on quickly assessing colour palettes to ensure they‚Äôre colourblind-friendly.\nAs recommended in the above posts, I used the {prismatic} package by Emil Hvitfeldt to check how my syntax highlighting palette appears to those with different types of colourblindness:\n\n\nlibrary(prismatic)\nek_highlight_colours <- c(\"#5B00B6\", \"#005BB6\", \"#008643\", \"#B65B00\", \"#B6005B\")\ncheck_color_blindness(ek_highlight_colours)\n\n\n\n\n\n\nFigure 10: Checking my palette for how it appears to those with various types of colourblindness.\n\n\n\nThankfully, for all three main types of colourblindess, the five colours in the palette are distinguishable, so no further adjustments are necessary.\nApproach 2: An R-based HCL alternative\nThe above sections describe the processes, both thought and practical, that I went through to derive the colour palette for my syntax highlighting scheme, and I‚Äôm happy with what I came up with. As I was deriving my scheme, I was working in ColorSlurp and only had a cursory knowledge of the differences between the HSB, HSL and HCL colour spaces.\nHowever, as I was writing up this blog post, I become increasingly curious about alternative approaches I might have taken. In particular, could I have come up with a scheme that met my criteria entirely in R? Given the incredible ecosystem that R is, it should be no surprise that the answer turned out to be yes! So, below is this alternative approach, using the {colorspace}, {coloratio} and {prismatic} packages. Also, whereas the previous approach is based on the HSB colour space, this one uses HCL.\nBuilding a palette based on my pink, using colour theory\nThe {colorspace} package uses the HCL color space, so the first task was to convert a hex code into its hue, chroma and luminance components, and make them available for future use, which can be done as follows:\n\n\nlibrary(colorspace)\npink <- hex2RGB(\"#D4006A\", gamma = FALSE)\npink_hcl <- as(pink, \"polarLUV\")\n\npink_h <- pink_hcl@coords[1, \"H\"]\npink_c <- pink_hcl@coords[1, \"C\"]\npink_l <- pink_hcl@coords[1, \"L\"]\n\n\n\nThe function from {colorspace} that is going to do the hard work of building a palette with differing hues but constant chroma and luminance (or as close as it can in HCL space) is qualitative_hcl(). By default, you give it the number of colours you want, and it works out equally spaced hues, starting at 0¬∞. To override this default, you can give the h argument a start and end value, c(start, end). Again, I‚Äôm going to choose six colours, 60¬∞ apart, and discard one of them.1 The start value should be in [0, 60) and the end value should be in [300, 360). Let the hue of our starting pink be pink_h. Then all the colours in the palette are going to have a hue pink_h + 60 * k for some integer k. The following code picks the start and end values we need to pass to h:\n\n\nseq_60 <- seq(from = -300, to = 300, by = 60)\npink_60 <- seq_60 + pink_h\n\npink_h_lower <- pink_60[which((pink_60 >= 0 & pink_60 < 60))]\npink_h_upper <- pink_60[which((pink_60 >= 300 & pink_60 < 360))]\n\n\n\nThat‚Äôs most of the hard work. Now we build the palette:\n\n\nhcl_six <- qualitative_hcl(\n  6, \n  h = c(pink_h_lower, pink_h_upper), \n  c = pink_c, \n  l = pink_l\n) \n\n\n\n\n\n\n\n\n\nFigure 11: Six colours, with hues approximately 60¬∞ apart and roughly equal luminance, based around my pink.\n\n\n\nThe only personal decision I make in this section is which of these six colours to discard. Removing the first of the greens gives me the palette in Figure 12.\n\n\n\nFigure 12: As in the previous figure but minus a green and rearranged\n\n\n\n\n\n\n[UPDATE: May 27th 2021: Since publishing this post, Achim Zeileis, the author of the {colorspace} package, got in touch with me on twitter to offer a bit more insight into what‚Äôs going on with this palette. The hcl_six palette does not, as I originally stated, have constant chroma. I have corrected the text above. Not all combinations of Hue/Chroma/Luminance exist in HCL space. At the luminance of my pink (~46) not many other hues can have such high chroma (~118), as demonstrated in Figure 13.\n\n\nhclplot(hcl_six)\n\n\n\n\nFigure 13: Hues and Chromas in HCL space at the Luminance of my pink\n\n\n\nqualitative_hcl() struggles in such circumstances, though does try to keep the luminance of the palette constant.]\nAdapting for web accessibility\nWhen I was developing my scheme, I used my trusted ColorSlurp app to adjust colours to ensure they met WCAG standards of web accessibility. In writing up this post, I since learnt about web resources to do the same (e.g.¬†WebAIM contrast checker) and now, for this section, I‚Äôve discovered the {coloratio} by Matt Dray and {savonliquide} by Mohamed El Fodil Ihaddaden packages that can do this in R.\nBoth packages have much to recommend them. {savonliquide} has the advantage of being on CRAN, and provides a toolbox that allows the user to implement accessibility-related concepts, including, but not limited to, contrast checking. {coloratio} is GitHub only, and only for contrast checking, but it has some additional functionality in that area above {savonliquide}, such as quick plotting of the colours in contrast, and a function, cr_choose_bw() that chooses which of black or white has the better contrast ratio with a user supplied colour (which, incidentally, I use to automatically choose the text colour when highlighting words with different background colours, e.g.¬†#D4006A vs #00D46A).\nBelow, I use the cr_get_ratio function from coloratio to check the colour contrasts of each colour in the palette. Because it‚Äôs not vectorised, I use this in conjunction with map2_dbl from {purrr} to get all the contrasts at once.\nIf any of the contrasts are less than 4.5, I then call on the darken() function from {colorspace}, which adjusts each colour in the palette to make it, you guessed it, a bit darker, therefore improving the contrast ratio. I loop over these checking and darkening iterations until all colours in the palette have a contrast ratio of at least 4.5:1 compared to white. Here is the code that achieves this:\n\n\nlibrary(coloratio)\nlibrary(purrr)\n\npalette <- hcl_six[c(6, 1, 3:5)]\ncontrasts <- map2_dbl(palette, \"white\", ~cr_get_ratio(.x, .y, quiet = TRUE))\nmin_contrast <- 4.5\nany_too_light <- any(contrasts < min_contrast)\n\nwhile (any_too_light) {\n  palette <- darken(palette, amount = 0.05)\n  contrasts <- map2_dbl(palette, \"white\", ~cr_get_ratio(.x, .y, quiet = TRUE))\n  any_too_light <- any(contrasts < min_contrast)\n}\n\n\n\nAt the end of the process, the palette looks like this:\n\n\n\nFigure 14: An HCL palette where all colours have a contrast ratio of 4.5:1 or better against white\n\n\n\nChecking for colourblindness\nAs before, we use {prismatic} to check how the palette appears to those with various types of colourblindess. Whilst R can help us visualise this, we still need to use our judgement as to whether the output is acceptable. I believe, in Figure 15, it is.\n\n\n\nFigure 15: Checking how the darkened HCL palette appears to those with various types of colourblindness.\n\n\n\nBut, do I like it?\nGoing through the process of building a colour palette that meets my criteria purely in R, in as automated, reproducible and adaptable way as possible has been a great learning experience for me, and hopefully something that will be useful to others. I don‚Äôt much like the palette it produced, though, especially in comparison to the one I came up with previously. Although the HCL-based palette probably has slightly better theoretical perceptual qualities, I prefer the vibrancy of the colours in the palette I came up with using my first approach, and that‚Äôs the one I‚Äôve adopted on this site.\nBack to Part 1\nNow that I have chosen my colour palette, head back to Part 1 for details of how to modify the default {distill} syntax highlighting theme to incorporate them, and how to apply the custom theme to a {distill} site.\n\n\n\nZeileis, Achim, Jason C. Fisher, Kurt Hornik, Ross Ihaka, Claire D. McWhite, Paul Murrell, Reto Stauffer, and Claus O. Wilke. 2020. ‚Äúcolorspace: A Toolbox for Manipulating and Assessing Colors and Palettes.‚Äù Journal of Statistical Software 96 (1): 1‚Äì49. https://doi.org/10.18637/jss.v096.i01.\n\n\nAgain, I want to stress that this 60¬∞ apart approach and discard one is NOT something you should do when building a five-colour palette for a data visualisation. There, where the colours mean something in relation to the data, it‚Äôs important that the hues are evenly spaced. Even for qualitative data, the perceptual uniformity of five evenly-spaced colours is preferable. However, for a syntax highlighting scheme, where any of the colours can appear next to any of the others, and we want all pairs to look good together, and the colours convey no meaning, based on my current and still somewhat limited knowledge of colour theory, I think the six-at-sixty-degrees-discard-one approach is preferable (though I could probably be persuaded otherwise if anyone has a compelling case for an evenly-spaced 5 colours in this context too).‚Ü©Ô∏é\n",
    "preview": "posts/2021-05-26-custom-syntax-highlighting-for-distill-part-2-creating-the-palette/ek-syntax-highlighting-palette.png",
    "last_modified": "2022-06-07T15:39:59+00:00",
    "input_file": {},
    "preview_width": 1120,
    "preview_height": 542
  },
  {
    "path": "posts/2021-05-25-custom-syntax-highlighting-for-distill-part-1-modifying-the-default-theme/",
    "title": "Custom Syntax Highlighting for {distill} Part 1: Modifying the default theme",
    "description": "A guide to modifying the default {distill} syntax highlighting theme, including colour choice considerations, and its implementation in {distilltools}",
    "author": [
      {
        "name": "Ella Kaye",
        "url": "https://twitter.com/ellamkaye"
      }
    ],
    "date": "2021-05-25",
    "categories": [
      "distilltools",
      "color",
      "accessibility",
      "tutorial",
      "features"
    ],
    "contents": "\n\nContents\nTL;DR\nBut first, the default\nIn praise of the default\nSo, why change?\nDistill/pandoc documentation\nFinding and saving the default\nCloser inspection of the default\n\nBuilding my own palette\nModifying arrow.theme\nWrapping in a {distilltools} function\nUsing the theme\n\n\nNote: This post was originally written by Ella Kaye and was copied here on May 27, 2021 - see the original post here for a potentially updated version.\n\nTL;DR\nThe {distill} package for R can be used to build easy-to-maintain websites written only in R Markdown, such as this one.1\nI wrote a function to modify the default syntax highlighting theme. This modify_default_highlighting function is now part of the {distilltools} package.\nHere‚Äôs the function in action, to get the theme used on this site:\n\n\n# get distilltools, requires remotes >= 2.2\nremotes::install_github(\"EllaKaye/distilltools\") \n\nlibrary(distilltools)\nmodify_default_highlighting(\n  name = \"ek_syntax_highlighting\",\n  numeric = \"#B6005B\", # replaces the default red\n  strings = \"#008643\", # replaces the default green\n  functions = \"#005BB6\", # replaces the default purple\n  control = \"#5B00B6\", # replaces the default blue\n  constant = \"#B65B00\" # replaces the default brown\n)\n\n\n\nAnd here‚Äôs the theme in action:\n\n\nlibrary(dplyr)\nlibrary(palmerpenguins)\n\npenguins %>%\n  mutate(\n    long_flipper = case_when(\n      species == \"Adelie\" & flipper_length_mm > 195 ~ TRUE,\n      species == \"Chinstrap\" & flipper_length_mm > 200 ~ TRUE,\n      species == \"Gentoo\" & flipper_length_mm > 225 ~ TRUE,\n      TRUE ~ FALSE\n    )\n  ) %>%\n  mutate(\n    long_bill = case_when(\n      species == \"Adelie\" & bill_length_mm > 42 ~ TRUE,\n      species == \"Chinstrap\" & bill_length_mm > 52 ~ TRUE,\n      species == \"Gentoo\" & bill_length_mm > 50 ~ TRUE,\n      TRUE ~ FALSE\n    )\n  )\n\n\n\nThis is the first in a series of two posts on implementing a custom syntax highlighting theme for a website or blog built with {distill}. Read on here for why and how this function was built, what it does and doesn‚Äôt do, and its inclusion in the {distilltools} package. This post also outlines the criteria that were important to me when choosing colours for my theme, but take a look at Part 2, custom syntax highlighting for {distill}: creating the palette, for a deep dive into considerations about colour choices, in respect to both colour theory and accessibility, and how I ensured my criteria were met.\nBut first, the default\nIn praise of the default\nBefore I delve into how to create a custom syntax highlighting scheme, I want to take a minute to admire the default. The authors of {distill}, in particular Alison Hill, have thought and worked hard to ensure that {distill} provides a good user experience, both for the site‚Äôs author AND for those reading it. One of the key considerations for the latter is a default syntax highlighting scheme with colours that are optimised for accessibility and colour contrast. I say more about what that means below and in Part 2. Also, it appears that the colours in the scheme work well together, and overall, on the many {distill} websites where I‚Äôve seen the scheme used, I think it looks really good! For a great example of the default in action, check out this code-chunk-heavy post by Tom Mock.\nSo, why change?\n\n\n\nWhen I used the default syntax highlighting theme on my site I found, to my eye, that the red used for numeric variables clashed with the bright pink (closest colour name ‚Äúrazzmatazz‚Äù) I‚Äôve used in my logo and elsewhere throughout the site. So, I decided to tweak the default theme swapping the red for my pink and, to match it, more vibrant versions of the remaining colours.\nDistill/pandoc documentation\nMy first task was to find out whether this was possible, and if, so, how. Thankfully, the {distill} documentation contains a section on syntax highlighting, showing that there is an option to give distill_article a path to a custom .theme file. The linked pandoc documentation on syntax highlighting demonstrates how to use pandoc in the command line to save a personal version of the pygments highlighting theme. The documentation points out that that copy of the pygments .theme file can then be edited to create a custom theme.\nFinding and saving the default\nOnce I had a general strategy of copying and editing an existing .theme file, my next task was to find the .theme file for the default used in {distill}, because that‚Äôs what I‚Äôd already decided to take as my starting point.\nI cloned the distill repo from GitHub and opened it in RStudio.2 From there I began my detective work with one of my favourite RStudio features, ‚ÄòFind in Files‚Äô (‚áß + ‚åò + f on a Mac), which searches across all files in a project. I searched for ‚Äúhighlight‚Äù and followed various trails until I discovered that the default is called arrow.theme and is stored in inst/rmarkdown/templates/distill_article/resources/. Thankfully, because it‚Äôs in the inst folder, the file is accessible to users who have the {distill} package installed. In the RStudio project for my website, I created a new script, syntax_highlighting.R, in the R folder I have in my root directory, then I ran the following to save a copy of arrow.theme into my website‚Äôs root directory:\n\n\narrow_theme_path <- system.file(\n  \"rmarkdown/templates/distill_article/resources/arrow.theme\", \n  package = \"distill\"\n)\n\nfile.copy(arrow_theme_path, \"arrow.theme\")\n\n\n\nWhen I had run that once, I commented out the above lines. I don‚Äôt want any future changes in arrow.theme in {distill} to break what I do next.\nCloser inspection of the default\nFrom there I could open up my copy of the arrow.theme file and manually inspect it. I use a great Mac app for building colour palettes, ColorSlurp.3 The basic version is free, though the pro version has useful features for testing accessibility - more on that in Part 2. I set up a new palette in ColorSlurp and, for each hex colour code I encountered, I saved it there.\nThere are 29 types of text-styles in the theme, of which:\n8 are assigned a grey, #5E5E5E, things like Comment and Documentation\n1 is off-black, #111111, Variable\n3 are blue, #007BA5, Other, ControlFlow and Keyword\n4 are green, #20794D, corresponding to various types of string\n1 is purple, #4758AB, Function\n7 are red, #AD0000, a mix of numeric (e.g.¬†BaseN, Float) and things like Alert and Error\n1 is a brown, #8F5902, for Constant\n4 types are not assigned a colour - they are left as null\nI was happy to stick with the groupings, grey, off-black and null in the default, so now I knew I had to pick five colours for my theme.\nBuilding my own palette\nI had four criteria for building a colour palette to use for my syntax highlighting theme:\nIt be based on the pink that I use in my logo and elsewhere throughout this site\nIt uses colour theory to pick colours that look appealing together\nIt meets WCAG web accessibility guidelines, by ensuring sufficient colour contrast, i.e.¬†a ratio of 4.5:1, between each of the colours in the theme and this site‚Äôs background colour (white)\nThe colours in the palette are colourblind-friendly, i.e.¬†still distinguishable to people with various difference types of colourblindness.\nI was originally going to write up how I went about building such a palette, both in terms of the thought process and tools used, as part of this post, but it was getting a little long4, so I‚Äôve spun it out into a separate post,custom syntax highlighting for {distill} part 2: creating the palette.\nAt the end of the process, the palette for my syntax highlighting scheme is as in Figure 1.\n\n\n\nFigure 1: The color palette used for syntax highlighting throughout this site.\n\n\n\nModifying arrow.theme\nWith all the pieces in place, it‚Äôs now just a case of swapping out the default colour codes for our own choices. Although it‚Äôs possible to manually edit the arrow.theme file we now have in our directory, to aid reproducibility, and with a view to writing this up as a function, I edited it using R code instead. I read in the file, substituted the hex codes, then saved the resulting theme into a new ek_syntax_highlighting.theme file (leaving arrow.theme unchanged). Below are two approaches, one using base R, the other in the tidyverse, that I put in my syntax_highlighting.R script.\n\n\n# read in the default theme\ntheme <- readLines(\"arrow.theme\")\n\n# base R approach\ntheme <- gsub(\"#AD0000\", \"#B6005B\", theme) # red -> pink\ntheme <- gsub(\"#8f5902\", \"#B65B00\", theme) # brown -> brown \ntheme <- gsub(\"#007BA5\", \"#5B00B6\", theme) # blue -> purple\ntheme <- gsub(\"#20794D\", \"#B65B00\", theme) # green -> green\ntheme <- gsub(\"#4758AB\", \"#005BB6\", theme) # purple -> blue\n\n# alternatively, tidyverse approach\nlibrary(stringr)\nlibrary(magrittr)\n\ntheme <- readLines(\"arrow.theme\") %>%\n   str_replace_all(\"#AD0000\", \"#B6005B\") %>% # red -> pink\n   str_replace_all(\"#8f5902\", \"#B65B00\") %>% # brown -> brown \n   str_replace_all(\"#007BA5\", \"#5B00B6\") %>% # blue -> purple\n   str_replace_all(\"#20794D\", \"#008643\") %>% # green -> green\n   str_replace_all(\"#4758AB\", \"#005BB6\")     # purple -> blue\n\n# save new theme\nwriteLines(theme, \"ek_syntax_highlighting.theme\")\n\n\n\nI now have the file ek_syntax_highlighting.theme in my root directory, with my colour choices.\nIt is, of course, possible to modify it further, either manually or by making further substutions in the code above. There is a quirk, though: if I swap one of the default hex codes for my own colour choice, that implements just fine, but if I swap any of the nulls for a colour, that doesn‚Äôt show up when I apply the theme.\nWrapping in a {distilltools} function\nWhen I figure out code to do something that I think I might want to do again, or think others might find useful, I generally like to write it up as a function, and that‚Äôs what I‚Äôve done with the above, wrapping it in a function called modify_default_highlighting and putting it in the {distilltools} package. {distilltools} is in the very early stages of development, an (expanding) collection of tools to support the creation and styling of content on websites created using {distill}.\nWhen I first announced the package, I included in the ‚Äòfuture functionality‚Äô section of the package README the intention to add a create_highlight_theme function. I don‚Äôt think what I‚Äôve done is quite versatile or fully-featured enough to warrant that name. Instead, I called it modify_default_highlighting because that‚Äôs all it does, allowing you to swap out the five colours in the default scheme for five colours of your choosing. It does, however, create a .theme file in your working directory, that can be further edited manually, or with your own R code, if further modifications are desired.\nThe first argument to modify_default_highlighting is name, the name you want to give your theme (which will create the file name.theme). It then takes five colour arguments, which can be specified either in the hex form ‚Äú#RRGGBB‚Äù or as a named colour, from the colour names in grDevices::colors(). For a list of the colour names available in R, see page 3 of the R color cheatsheet for a one page summary, or Colors in R for a slightly less visually overwhelming list. The final argument, overwrite (defaults to TRUE) specifies whether to overwrite name.theme if it already exists in the working directory. Here‚Äôs the function in action again, this time using colour names (note that I have not tested the visual properties of this as a palette, just dropped in some colour names into the function):\n\n\nlibrary(distilltools)\nmodify_default_highlighting(\n  name = \"ek_syntax_highlighting\",\n  numeric = \"deeppink\", # replaces the default red\n  strings = \"forestgreen\", # replaces the default green\n  functions = \"darkorchid3\", # replaces the default purple\n  control = \"royalbkue3\", # replaces the default blue\n  constant = \"darkorange1\" # replaces the default brown\n)\n\n\n\nUsing the theme\nOnce you have you custom .theme file, you‚Äôll want to apply it to your site. According to the {distill} documentation, you can apply a syntax highlighting theme with the following YAML:\n---\noutput:\n  distill::distill_article:\n    highlight: my_highlighting.theme\n---  \nHere, the available options for highlight include default, rstudio (the default RStudio editor theme), and the haddock, kate, monochrome, pygments and tango pandoc highlighting themes. Also, most importantly for us, it can also take the path to a .theme file.\nPresumably, we should be able to add this to our _site.yml file to have the theme apply site-wide (though note you‚Äôll have to rebuild the site and re-knit any posts where you want to it apply). However, that‚Äôs not working for me. I have raised an issue about it. If you face the same problem, it would be helpful if you could comment there too.\nThere is a workaround, though, which is that the above YAML can also be included in individual .Rmd articles, in which case the theme applies just fine, though note that if your .theme file is in you root directory, you‚Äôll need to give the full path to it.5 And if it sounds like a bit of a pain to have to add that every time you write a new post, consider creating a template for your posts, including those lines, and then starting new posts with the {distilltools} function create_post_from_template().6\n\nFor more on resources and inspirations for setting up a {distill} website, see my previous post, Welcome to my {distill} website.‚Ü©Ô∏é\nFrom RStudio, go to ‚ÄòFile‚Äô in the menu bar, then ‚ÄòNew Project‚Ä¶‚Äô Chose ‚ÄòVersion Control‚Äô, then ‚ÄòGit‚Äô, then enter https://github.com/rstudio/distill.git as the ‚ÄòRepository URL:‚Äô and click ‚ÄòCreate Project‚Äô‚Ü©Ô∏é\nI don‚Äôt have experience of colour apps on other operating systems, but a quick search for ColorSlurp alternatives suggest there are a bunch to pick from.‚Ü©Ô∏é\nAs part of the process of writing the post, I learnt much more about colour theory, and alternatives to the approach that I had originally taken, and I wanted to share it all!‚Ü©Ô∏é\nIf you happen to inspect the source code for this post, you might notice that I have copied ek_syntax_highlighting.theme into the directory. This is not necessary for my site (using the full path to the .theme folder in my root directory is sufficient). However, I needed to do this to get the theme to show in the version of this post in the distillery.‚Ü©Ô∏é\nNote that the create_post_from_template() function is likely to get wrapped into {distill} itself, or its functionality included in distill::create_post(), and will be depreciated from {distilltools} if so. (I have had some discussion with the {distill} team about this and will be submitting a PR in the near future.)‚Ü©Ô∏é\n",
    "preview": "posts/2021-05-25-custom-syntax-highlighting-for-distill-part-1-modifying-the-default-theme/more-theme-in-action.png",
    "last_modified": "2022-06-07T15:39:59+00:00",
    "input_file": {},
    "preview_width": 1850,
    "preview_height": 1470
  },
  {
    "path": "posts/2021-04-11-how-to-create-a-gallery-in-distill/",
    "title": "How to create a gallery in Distill",
    "description": "Use lightgallery.js to create a gallery for your plots or images.",
    "author": [
      {
        "name": "Etienne Bacher",
        "url": {}
      }
    ],
    "date": "2021-05-20",
    "categories": [
      "features",
      "tutorial"
    ],
    "contents": "\n\nContents\nCreate a gallery with lightgallery.js\nMake the gallery with R\nCreate thumbnails\nBuild the HTML structure\n\nUpdate GitHub Actions\nBonus: make a gallery for #tidytuesday\nConclusion\n\n\nNote: This post was originally written by Etienne Bacher and was copied here on May 21, 2021 - see the original post here for a potentially updated version.\n\nThis post shows how to create a gallery on a Distill website. Keep in mind that Distill is (purposely) less flexible than other tools, such as {blogdown}, so the gallery might look quite different from what you expect.\nCreate a gallery with lightgallery.js\nLightgallery.js is a Javascript library that allows you to build a gallery very simply. You will need images in full size and thumbnails, i.e a smaller version of the images (we will see how to automatically make them later in this post).\nFirst of all, let‚Äôs construct the gallery with HTML, CSS, and Javascript. We will see how to adapt this in R then. We need to load the Javascript and CSS files for lightgallery.js in the head:\n\n<head>\n\n<link type=\"text/css\" rel=\"stylesheet\" href=\"https://cdnjs.cloudflare.com/ajax/libs/lightgallery/1.6.0/css/lightgallery.min.css\" />\n<script src=\"https://cdnjs.cloudflare.com/ajax/libs/lightgallery-js/1.4.1-beta.0/js/lightgallery.min.js\"><\/script>\n\n<!-- lightgallery plugins -->\n<script src=\"https://cdnjs.cloudflare.com/ajax/libs/lg-fullscreen/1.2.1/lg-fullscreen.min.js\"><\/script>\n<script src=\"https://cdnjs.cloudflare.com/ajax/libs/lg-thumbnail/1.2.1/lg-thumbnail.min.js\"><\/script>\n\n<\/head>\n\nThen, we construct the layout of the gallery. Here, I make the minimum layout, just to make sure this works:\n\n<div id=\"lightgallery\">\n  <a href=\"img1.png\">\n    <img src=\"thumb-img1.png\" />\n  <\/a>\n  <a href=\"img2.png\">\n    <img src=\"thumb-img2.png\" />\n  <\/a>\n<\/div>\n\nAs you can see, the whole gallery is in a <div> element. To add an image to the gallery, we just have to add an <a> element as the two already there.\nThen, we add the Javascript code to run lightgallery.js:\n\n<script type=\"text/javascript\">\n  lightGallery(document.getElementById('lightgallery'));\n<\/script>\n\nThis should work, but I just add a CSS animation to zoom a bit when hovering a thumbnail:\n\n<style>\n  #lightgallery > a > img:hover {\n    transform: scale(1.2, 1.2);\n    transition: 0.2s ease-in-out;\n    cursor: pointer;\n  }\n<\/style>\n\nThat‚Äôs it for the proof of concept. Now let‚Äôs adapt it in R.\n\nClick to see the full HTML.\n\n<!doctype html>\n<html>\n  <head>\n    <link type=\"text/css\" rel=\"stylesheet\" href=\"https://cdnjs.cloudflare.com/ajax/libs/lightgallery-js/1.4.1-beta.0/css/lightgallery.css\" />\n    <script src=\"https://cdnjs.cloudflare.com/ajax/libs/lightgallery-js/1.4.1-beta.0/js/lightgallery.min.js\"><\/script>\n\n   <!-- lightgallery plugins -->\n   <script src=\"https://cdnjs.cloudflare.com/ajax/libs/lg-fullscreen/1.2.1/lg-fullscreen.min.js\"><\/script>\n   <script src=\"https://cdnjs.cloudflare.com/ajax/libs/lg-thumbnail/1.2.1/lg-thumbnail.min.js\"><\/script>\n  <\/head>\n  <body>\n    <div id=\"lightgallery\">\n      <a href=\"img1.png\" data-sub-html=\"<h4>Sunset Serenity<\/h4><p>A gorgeous Sunset tonight captured at Coniston Water....<\/p>\">\n          <img src=\"thumb-img1.png\" />\n      <\/a>\n      <a href=\"img2.png\">\n          <img src=\"thumb-img2.png\" />\n      <\/a>\n    <\/div>\n\n    <script type=\"text/javascript\">\n      lightGallery(document.getElementById('lightgallery'));\n    <\/script>\n\n    <style>\n      #lightgallery > a > img:hover {\n        transform: scale(1.2, 1.2);\n        transition: 0.2s ease-in-out;\n        cursor: pointer;\n      }\n    <\/style>\n\n  <\/body>\n<\/html>\n\nMake the gallery with R\nCreate thumbnails\nFirst, store your (full-size) images in a folder, let‚Äôs say _gallery/img. As we saw above, lightgallery.js also requires thumbnails in addition to full-size images. To automatically create these thumbnails, we can use the function image_resize() in the package magick. First, I create a function to resize a single image, and I will apply it to all the images I have:\n\n\nlibrary(magick)\nlibrary(here)\n\nresize_image <- function(image) {\n\n  imFile <- image_read(here::here(paste0(\"_gallery/img/\", image)))\n  imFile_resized <- magick::image_resize(imFile, \"6%\")\n  magick::image_write(imFile_resized, here::here(paste0(\"_gallery/img/thumb-\", image)))\n\n}\n\nlist_png <- list.files(\"_gallery/img\")\nlapply(list_png, resize_image)\n\n\n\nBuild the HTML structure\nWe can now start building the HTML structure with the package htmltools. First, we can see that the HTML code for each image is very similar:\n\n<a href=\"img.png\">\n    <img src=\"thumb-img.png\" />\n<\/a>\n\nThis can be reproduced in R with:\n\n\nlibrary(htmltools)\n\ntags$a(\n  href = \"img.png\",\n  tags$img(src = \"thumb-img.png\")\n)\n\n\n\nWe can now create a function to apply this structure to all the images we have:\n\n\nmake_gallery_layout <- function() {\n\n  # Get the names of all images\n  images <- list.files(\"_gallery/img\")\n\n  # Get the names of all full-size images\n  images_full_size <- grep(\"thumb\", images, value = TRUE, invert = TRUE)\n\n  # Get the names of all thumbnails\n  images_thumb <- grep(\"thumb\", images, value = TRUE)\n\n  # Create a dataframe where each row is one image (useful for\n  # the apply() function)\n  images <- data.frame(images_thumb = images_thumb,\n                       images_full_size = images_full_size)\n\n  # Create the HTML structure for each image\n  tagList(apply(images, 1, function(x) {\n      tags$a(\n        href = paste0(\"_gallery/img/\", x[[\"images_full_size\"]]),\n        tags$img(src = paste0(\"_gallery/img/\", x[[\"images_thumb\"]]))\n      )\n  }))\n\n}\n\n\n\nLastly, we need to embed this HTML code in <div id=\"lightgallery\">, as shown in the first section. We can do that with the following code:\n\n\nwithTags(\n  div(\n    class = \"row\",\n    id = \"lightgallery\",\n    tagList(\n      make_gallery_layout()\n    )\n  )\n)\n\n\n\nWe now have all the HTML code we need. We now have to add the CSS and the JavaScript code. We can just copy-paste it in an R Markdown file.\n\nClick to see the full R Markdown file.\n---\ntitle: \"Gallery\"\noutput:\n  distill::distill_article\n---\n\n```{r echo = FALSE}\nknitr::opts_chunk$set(\n  echo = FALSE\n)\n```\n\n<head>\n\n<link type=\"text/css\" rel=\"stylesheet\" href=\"https://cdnjs.cloudflare.com/ajax/libs/lightgallery/1.6.0/css/lightgallery.min.css\" />\n<script src=\"https://cdnjs.cloudflare.com/ajax/libs/lightgallery-js/1.4.1-beta.0/js/lightgallery.min.js\"><\/script>\n\n<!-- lightgallery plugins -->\n<script src=\"https://cdnjs.cloudflare.com/ajax/libs/lg-fullscreen/1.2.1/lg-fullscreen.min.js\"><\/script>\n<script src=\"https://cdnjs.cloudflare.com/ajax/libs/lg-thumbnail/1.2.1/lg-thumbnail.min.js\"><\/script>\n\n<\/head>\n\n```{css}\n#lightgallery > a > img:hover {\n   transform: scale(1.15, 1.15);\n   transition: 0.4s ease-in-out;\n   cursor: pointer;\n}\n```\n\n```{r include = FALSE}\n# Load the functions we have created\nsource(here::here(\"R/functions.R\"))\n```\n\n```{r}\n# Create layout\nwithTags(\n  div(\n    class = \"row\",\n    id = \"lightgallery\",\n    tagList(\n      make_gallery_layout()\n    )\n  )\n)\n\n```\n\n<script type=\"text/javascript\">\n    lightGallery(document.getElementById('lightgallery'));\n<\/script>\n\nUpdate GitHub Actions\nWe need to add fs::dir_copy(\"_gallery/img\", \"_site/_gallery/img\") in GitHub Actions so that the images are found when the gallery is built. We also have to add magick and httr in the list of packages to install.\nIf you haven‚Äôt set up GitHub Actions yet, you can check my previous post, or check my current GitHub Actions for this site.\nBonus: make a gallery for #tidytuesday\nI have started participating to #tidytuesday this year, and the main reason I wanted to create a gallery was to display my favorite plots. Therefore, I created a function to make it as easy as possible for me to update the plots I want to display in the gallery.\nThe purpose of the function below is to download a plot for a specific week in a specific year in the repo containing my plots.\n\n\nlibrary(httr)\n\nget_tt_image <- function(year, week) {\n\n  if (is.numeric(year)) year <- as.character(year)\n  if (is.numeric(week)) week <- as.character(week)\n  if (nchar(week) == 1) week <- paste0(\"0\", week)\n\n  ### Get the link to download the image I want\n  req <- GET(\"https://api.github.com/repos/etiennebacher/tidytuesday/git/trees/master?recursive=1\")\n  stop_for_status(req)\n  file_list <- unlist(lapply(content(req)$tree, \"[\", \"path\"), use.names = F)\n  png_list <- grep(\".png\", file_list, value = TRUE, fixed = TRUE)\n  png_wanted <- grep(year, png_list, value = TRUE)\n  png_wanted <- grep(paste0(\"W\", week), png_wanted, value = TRUE)\n  # If a png file is called accidental_art, don't take it\n  if (any(grepl(\"accidental_art\", png_wanted))) {\n    png_wanted <- png_wanted[-which(grepl(\"accidental_art\", png_wanted))]\n  }\n\n  ### Link of the image I want to download\n  origin <- paste0(\n    \"https://raw.githubusercontent.com/etiennebacher/tidytuesday/master/\",\n    png_wanted\n  )\n\n  ### Destination of this image\n  destination <- paste0(\"_gallery/img/\", year, \"-\", week, \"-\", trimws(basename(origin)))\n\n  ### Download only if not already there\n  if (!file.exists(destination)) {\n    if (!file.exists(\"_gallery/img\")) {\n      dir.create(\"_gallery/img\")\n    }\n    download.file(origin, destination)\n  }\n\n  ### Create the thumbnail if not already there\n  thumb_destination <- paste0(\"_gallery/img/thumb-\", year, \"-\", week, \"-\",\n                        trimws(basename(origin)))\n  if (!file.exists(thumb_destination)) {\n    resize_image(paste0(year, \"-\", week, \"-\", trimws(basename(origin))))\n  }\n\n}\n\n\n\nAs you can see, this function downloads the plot I want, puts it in _gallery/img and creates the thumbnail. All I have to do now is to choose the plots I want to display and to apply the function to these year-week pairs in the R Markdown file.\nNote that for some reason, this function sometimes fails on GitHub Actions because of HTTP error 403. I think this is related to the number of requests to GitHub API but what is strange is that this function isn‚Äôt supposed to make a lot of requests, so it is still a mystery.\n\nClick to see the full R Markdown file.\n---\ntitle: \"Gallery\"\noutput:\n  distill::distill_article\n---\n\n```{r echo = FALSE}\nknitr::opts_chunk$set(\n  echo = FALSE\n)\n```\n\n<head>\n\n<link type=\"text/css\" rel=\"stylesheet\" href=\"https://cdnjs.cloudflare.com/ajax/libs/lightgallery/1.6.0/css/lightgallery.min.css\" />\n<script src=\"https://cdnjs.cloudflare.com/ajax/libs/lightgallery-js/1.4.1-beta.0/js/lightgallery.min.js\"><\/script>\n\n<!-- lightgallery plugins -->\n<script src=\"https://cdnjs.cloudflare.com/ajax/libs/lg-fullscreen/1.2.1/lg-fullscreen.min.js\"><\/script>\n<script src=\"https://cdnjs.cloudflare.com/ajax/libs/lg-thumbnail/1.2.1/lg-thumbnail.min.js\"><\/script>\n\n<\/head>\n\n```{css}\n#lightgallery > a > img:hover {\n   transform: scale(1.15, 1.15);\n   transition: 0.4s ease-in-out;\n   cursor: pointer;\n}\n```\n\n```{r include = FALSE}\n# Load the functions we have created\nsource(here::here(\"R/functions.R\"))\n\n# Make list of tidytuesday plots I want to show in the gallery\ntt_plots <- rbind(\n  c(2021, 8),\n  c(2021, 12),\n  c(2021, 13),\n  c(2021, 15),\n  c(2021, 16)\n)\n\n# Download the plots and create the thumbnails\napply(tt_plots, 1, function(x) get_tt_image(x[1], x[2]))\n```\n\n```{r}\n# Create layout\nwithTags(\n  div(\n    class = \"row\",\n    id = \"lightgallery\",\n    tagList(\n      make_gallery_layout()\n    )\n  )\n)\n\n```\n\n<script type=\"text/javascript\">\n    lightGallery(document.getElementById('lightgallery'));\n<\/script>\n\nConclusion\nIn this post, I tried to explain how to build a gallery with a simple example. However, you can also check the repo of my website to have a clearer view of how to do so. I also added some CSS styling that is not described here, to limit the code to what is really necessary.\nCheck the gallery to see the result.\n\n\n\n",
    "preview": "posts/2021-04-11-how-to-create-a-gallery-in-distill/gallery_image.jpg",
    "last_modified": "2022-06-07T15:39:59+00:00",
    "input_file": {}
  },
  {
    "path": "posts/2021-04-02-personalizing-the-distill-template/",
    "title": "Personalizing the Distill Template",
    "description": "How to modify the distill template to fit your preferences.",
    "author": [
      {
        "name": "Eric Ekholm",
        "url": "https://www.ericekholm.com/"
      }
    ],
    "date": "2021-04-05",
    "categories": [
      "features",
      "tutorial"
    ],
    "contents": "\n\nNote: This post was originally written by Eric Ekholm and was copied here on April 06, 2021 - see the original post here for a potentially updated version.\n\nI think pretty much everyone will agree that {distill} is great. I use it for my personal website. I use it to write reports for work. There are probably other things I could/should be using it for, too. It makes publishing cleanly-formatted articles super easy, and as someone with minimal background in html/css, it‚Äôs been invaluable to me.\nOne thing that‚Äôs been on my to-do list re: {distill}, though, has been to look into how to modify the Rmd template. What I mean by this is not changing the styling (although I‚Äôve played around with that a little bit, too), but rather how to modify to the template to automatically include the packages I use in pretty much every blog post as well as to set knit options. Obviously, it‚Äôs not a huge deal to add this stuff in every time I make a new post ‚Äì it‚Äôs only a few lines of code ‚Äì but it is a little bit tedious.\nMaking an Rmd template is fairly straightforward, and the {rmarkdown} bookdown site has some great resources. But the process for creating an Rmd template while simultaneously taking advantage of the features of distill::create_post() felt less obvious to me. I had a little bit of time a couple of days ago to noodle about it, so I wanted to share what I came up with here.\nDisclaimer: This solution feels a bit hacky, so I‚Äôd love feedback from anyone reading on how to improve this. Regardless, let‚Äôs get into it.\nThe Default Distill Template\nRunning distill::create_post() while you have your website project open will create a new subdirectory in your _posts directory (assuming you‚Äôve stuck with the defaults). The name of this subdirectory will contain the date and a slug related to the title of your post (again, assuming you‚Äôve stuck with the defaults). It will also create an Rmd file in the newly-created subdirectory that looks something like this:\n\nAgain, this is great, but what if we want the template to come with, say, library(tidyverse) already included? Or what if we wanted to specify some knit options? That is, what if we want our template to look more like this:\n\nA Personalized Distill Template\nThe function below can do just that. I‚Äôll post it in its entirety, then walk through what it does and how you can modify this if you want.\nHere‚Äôs the function, which I‚Äôm calling create_ee_post(), but you might want to use your own initials:\n\n\ncreate_ee_post <- function(..., open = TRUE) {\n\n  tmp <- distill::create_post(..., edit = FALSE)\n\n  yaml <- readLines(tmp, n = 12)\n\n  con <- file(tmp, open = \"w\")\n\n  on.exit(close(con), add = TRUE)\n\n  body <-\n  '\n\n#```{r setup, echo = TRUE, results = \"hide\", warning = FALSE, message = FALSE}\nknitr::opts_chunk$set(echo = TRUE, warning = FALSE, message = FALSE)\n\nlibrary(tidyverse)\nlibrary(eemisc)\nlibrary(harrypotter)\n\nherm <- harrypotter::hp(n = 1, option = \"HermioneGranger\")\n\nopts <- options(\n  ggplot2.discrete.fill = list(\n    harrypotter::hp(n = 3, option = \"HermioneGranger\"),\n    harrypotter::hp(n = 7, option = \"Always\")\n  )\n)\n\ntheme_set(theme_ee())\n\n#```\n\nA message\n'\n\nxfun::write_utf8(yaml, con)\nxfun::write_utf8(body, con)\n\nif (open == TRUE) usethis::edit_file(tmp)\n\n}\n\n\n\nI‚Äôve included the function in my personal R package if you want to take a peek at it there. One note re: the above is that you‚Äôll want to remove the un-comment the ``` within the body. I‚Äôve commented those out here because I‚Äôm embedding them in a code chunk.\nRight, so, big picture, the above function just wraps distill::create_post() so we still get all of the goodies of that function, then modifies the Rmd file produced by distill::create_post() after it‚Äôs already created. Let‚Äôs take a look at pieces more closely.\nStep by Step\n\n\ntmp <- distill::create_post(..., edit = FALSE)\n\n\n\nThis runs distill::create_post() and allows you to pass whatever arguments you typically would (e.g.¬†setting the title) to that function. I‚Äôm setting edit = FALSE here because we don‚Äôt want to open the file that this function creates since we‚Äôre going to modify it after the fact (n.b.¬†that we‚Äôll add in a line later that will open the modified file, if we want). This will also store the path of the file that‚Äôs created to a variable called tmp, which is useful later.\n\n\nyaml <- readLines(tmp, n = 12)\n\n\n\nThis will read the first 12 lines of the Rmd file we just created and store them in the yaml variable. If you use the defaults of distill::create_post(), then your YAML header should be 12 lines, although I suppose your mileage could vary. It‚Äôs probably possible, too, to use some regex to read in lines between the dashes setting off the YAML header, but I didn‚Äôt play around with that.\n\n\ncon <- file(tmp, open = \"w\")\n\non.exit(close(con), add = TRUE)\n\n\n\nThese lines will open a connection to the tmp file we specified earlier and then, once the function exits, close this connection. I basically just copied this from the source code of distill::create_post().\n\n\nbody <-\n'\n\n#```{r setup, echo = TRUE, results = \"hide\", warning = FALSE, message = FALSE}\nknitr::opts_chunk$set(echo = TRUE, warning = FALSE, message = FALSE)\n\nlibrary(tidyverse)\nlibrary(eemisc)\nlibrary(harrypotter)\n\nherm <- harrypotter::hp(n = 1, option = \"HermioneGranger\")\n\nopts <- options(\n  ggplot2.discrete.fill = list(\n    harrypotter::hp(n = 3, option = \"HermioneGranger\"),\n    harrypotter::hp(n = 7, option = \"Always\")\n  )\n)\n\ntheme_set(theme_ee())\n#```\n\nA message\n'\n\n\n\nHere‚Äôs the heart of this function. In this chunk, we‚Äôre specifying what we want the body (as opposed to the YAML header) of the Rmd file to look like, and everything gets passed in as a string. So, here, I‚Äôm doing a few things:\nSetting the options for the ‚Äúsetup‚Äù chunk,\nSetting the global chunk options for this file,\nLoading some libraries I commonly use (n.b.¬†that {harrypotter} provides HP-themed color palettes and is my go-to option for colors),\nSetting ggplot fill/color options (including just grabbing the hex code for the dark red that‚Äôs the first color in the ‚ÄúHermione Granger‚Äù palette)\nAnd finally setting the {ggplot2} theme to be the custom theme I‚Äôve created in my {eemisc} package.\nI‚Äôve also added a message (‚ÄúA message‚Äù) to the file just for funsies.\nIf you‚Äôre interested in adapting this function, this is the code you‚Äôll want to change to specify whatever options you prefer in your Rmd files/blog posts. You‚Äôll also need to un-comment the ```s.\n\n\nxfun::write_utf8(yaml, con)\nxfun::write_utf8(body, con)\n\n\n\nThese lines will write the contents of the yaml variable (which we just pulled from the distill::create_post() default ‚Äì we didn‚Äôt change anything here) and the body variable (which we just specified above) to con, which is the file we want to edit.\n\n\nif (open == TRUE) usethis::edit_file(tmp)\n\n\n\nFinally, this will open the file we just created in RStudio.\nSo that‚Äôs that. Again, this may not be the best way to do this, but it does seem to work. I‚Äôd love to hear if others have other (and better) ways of accomplishing this.\n\n\n\n",
    "preview": "posts/2021-04-02-personalizing-the-distill-template/img/personalized_distill.PNG",
    "last_modified": "2022-06-07T15:39:59+00:00",
    "input_file": {},
    "preview_width": 1009,
    "preview_height": 502
  },
  {
    "path": "posts/2021-04-01-deploy-previews-with-netlifly/",
    "title": "Deploy previews with Netlifly",
    "description": "Collaborative {distill} website workflows",
    "author": [
      {
        "name": "Shannon Pileggi",
        "url": {}
      }
    ],
    "date": "2021-04-01",
    "categories": [
      "deploy",
      "tutorial",
      "netlify",
      "github"
    ],
    "contents": "\n\nContents\nTL; DR\nBackground\nNetlifly settings\nBack in website development\nAcknowledgements\n\n\nNote: This post was originally written by Shannon Pileggi and was copied here on April 04, 2021 - see the original post here for a potentially updated version.\n\nTL; DR\nIf you are deploying your {distill} website through Netlifly, you can enable deploy previews to create temporary urls to preview a branch.\nBackground\nMy usual website workflow so far has been to draft posts in my master branch with draft: true in the yaml, and then when I am ready to publish switch to draft: false and commit to my main/master branch. Recently, I‚Äôve been inspired to try alternative workflows:\n\n\nI‚Äôm also a huge convert to the church of making PRs to yourself. Start with an R Markdown project like a simple slide deck or a bookdown book, then get into the habit of every change is a branch + PR. Low cost, but teaches you a lot! pic.twitter.com/Ee3tuoS4Ef\n\n‚Äî Alison Presmanes Hill (@apreshill) February 20, 2021\n\nI also collaborated with someone on a blog post for the first time, and I learned that you can send links to preview branches! üéâ For both solo and collaborative posts, this is my new workflow.\nI did a quick search for existing guides, and I found that Garrick Aden‚ÄëBuie has a comprehensive 2019 blog post titled A Blogdown New Post Workflow with Github and Netlify. Some of the steps are specific to {blogdown}, so here is my {distill} take on it.\nNetlifly settings\nFirst, make sure you have deploy previews enabled on Netlifly. Login to Netlifly, go to your site, and then:\n‚û°Ô∏è Site settings\n‚û°Ô∏è Build & deploy\n‚û°Ô∏è Deploy contexts\n‚û°Ô∏è Deploy previews\n‚û°Ô∏è Select Any pull request against your production branch / branch deploy branches Netlify will generate a deploy preview with a unique URL for each built pull request.\n\n\n\nFigure 1: Screenshot of Netlifly settings with Deploy previews set to ‚ÄúAny pull request‚Ä¶‚Äù.\n\n\n\nBack in website development\nCreate a branch for your website repository. I am naming my branch netlifly-deploy-branch, and in the R console submit:\n\n\nusethis::pr_init(\"netlifly-deploy-branch\")\n\n\n\nCreate a post. In R console submit:\n\n\ndistill::create_post(\"Deploy previews with Netlifly\")\n\n\n\nDraft post; set draft: false in the yaml.\nKnit post. Depending on what you are doing in your branch, you may also need to üî® Build Website.\nCommit everything. In terminal submit:\n\ngit add .\ngit commit -m \"draft netlifly post\"\n\nPush to GitHub. In R console submit:\n\n\nusethis::pr_push()\n\n\n\nIn GitHub, click ‚ÄúCreate pull request‚Äù.\nSome automatic checks will run. Click on ‚ÄúDetails‚Äù where it says ‚ÄúDeploy preview ready!‚Äù\n\n\n\nFigure 2: Screenshot of checks run on GitHub pull request. Click on ‚ÄúDetails‚Äù where it says ‚ÄúDeploy preview ready!‚Äù to open the preview url.\n\n\n\nThis opens up a window in my browser with the url https://deploy-preview-3--flamboyant-mccarthy-854a9b.netlify.app/. Send this link to a friend for review!\nEdit draft, repeat steps 4-8.\nWhen ready to publish, back in GitHub click on ‚ÄúMerge pull request‚Äù.\nAdded April 3, 2020:\nMa√´lle Salmon recommends ‚ÄúSquash and merge‚Äù from the drop down menu to create a cleaner commit history.\nShe also recommends deleting branches after merging and provided this link to Refined GitHub, a ‚Äúbrowser extension that simplifies the GitHub interface and adds useful features.‚Äù üòÑ\nI‚Äôm new to this workflow and this post was written quickly - edits and suggestions are welcome!\nAcknowledgements\nThanks, Alison Hill!ü§ó\nAlso, thanks for the additional recommendations, Ma√´lle Salmon!\n\n\n\n",
    "preview": "posts/2021-04-01-deploy-previews-with-netlifly/img/netlifly-checks.png",
    "last_modified": "2022-06-07T15:39:59+00:00",
    "input_file": {},
    "preview_width": 1358,
    "preview_height": 704
  },
  {
    "path": "posts/2021-03-24-automagic-tabs-in-distillrmarkdown-files-and-time-series-analysis/",
    "title": "Automagic Tabs in Distill/Rmarkdown files and time series analysis",
    "description": "This article shows the use of tabs in Rmarkdown documents, through an example of time series analysis of the monthly estimator of Argentine economic activity.",
    "author": [
      {
        "name": "Karina Bartolom√©",
        "url": "https://karbartolome-blog.netlify.app/"
      },
      {
        "name": "Rafael Zambrano",
        "url": "https://rafael-zambrano-blog-ds.netlify.app/"
      }
    ],
    "date": "2021-03-25",
    "categories": [
      "features",
      "tutorial"
    ],
    "contents": "\n\nContents\nTidy tabs approach üßô\nLibraries üìö\nWhat are tabs? ü§î\nHow to generate tabs? üóÇÔ∏è\nData üìä\nNested dataframes üìÇ\nTime series plots üå†\nPerfect, but ‚Ä¶ if we wanted to graph all the time series, how could we do it? ü§î\n\n\nDecomposition and autocorrelation üí°\n\n\nContacts ‚úâ\n\n\n\nNote: This post was originally written by Karina Bartolom√© and Rafael Zambrano and copied here on March 26, 2021 - see the original post here for a potentially updated version.\n\nTidy tabs approach üßô\nWhen conducting exploratory data analysis üìà, reporting on models ü§ñ, or simply presenting results obtained, we usually have dozens of plots to show. For this reason, it is necessary to organize the report in a way to focus the reader‚Äôs attention on certain aspects and not overwhelm them with all the information at once.\nüëâ We use a Tidy approach to generate tabs in automated format from a nested tibble that contains the objects to include in each tab.\nThis article is based on a previous article we‚Äôve written on time series analysis: Multiple models on multiple time series: A Tidy approach.\nLibraries üìö\nThe necessary libraries are imported. sknifedatar is a package that serves primarily as an extension to the modeltime üì¶ ecosystem, in addition to some functionalities of spatial data and visualization. In this case, we are going to use the automagic_tabs function from this package.\nFor data manipulation we used the tidyverse ecosystem.\n\n\n#devtools::install_github(\"rafzamb/sknifedatar\")\nlibrary(sknifedatar)\n#devtools::install_github(\"gadenbuie/xaringanExtra\")\nlibrary(xaringanExtra)\nlibrary(lubridate)\nlibrary(timetk)\nlibrary(dplyr)\nlibrary(tidyr)\nlibrary(purrr)\nlibrary(reactable)\nlibrary(htmltools)\n\n\n\nWhat are tabs? ü§î\n‚úèÔ∏è A tab is a design pattern where content is separated into different panes, and each pane is viewable one at a time.\n\n\n\n\n\nüëã Hey!\nThis is tab number 1 . üåü Check the following tabs for some unsolicited advice üåü üëÜ\nUnsolicited advice 1\nThis is tab number 2\n\n\n\nUnsolicited advice 2\nThis is tab number 3\n\n\n\nUnsolicited advice 3\nThis is tab number 4\n\n\n\nüîö Ending tab\nThis is tab number 5. Thank you for reading this far.\n\n\n\n\n\nHow to generate tabs? üóÇÔ∏è\nüîπ In order to generate the tabs above, the following chunks were necessary:\n\n\n\n\n\nShow code\n\n# ::: {.l-page}\n# ::: {.panelset}\n# ::: {.panel}\n# ## üëã Hey! {.panel-name}\n#\n# This is tab number 1 . üåü [**Check the following tabs for some unsolicited advice**]{.ul} üåü üëÜ\n# :::\n#\n# ::: {.panel}\n# ## Unsolicited advice 1 {.panel-name}\n#\n# This is tab number 2\n#\n# ```{r, out.width=\"50%\",echo=FALSE ,fig.align = 'center'}\n# knitr::include_graphics('https://media.tenor.com/images/be8a87467b75e9deaa6cfe8ad0b739a0/tenor.gif')\n# ```\n# :::\n#\n# ::: {.panel}\n# ## Unsolicited advice 2 {.panel-name}\n#\n# This is tab number 3\n#\n# ```{r, out.width=\"50%\",echo=FALSE ,fig.align = 'center'}\n# knitr::include_graphics('https://media.tenor.com/images/6a2cca305dfacae61c5668dd1687ad55/tenor.gif')\n# ```\n# :::\n#\n# ::: {.panel}\n# ## Unsolicited advice 3 {.panel-name}\n#\n# This is tab number 4\n#\n# ```{r, out.width=\"50%\",echo=FALSE ,fig.align = 'center'}\n# knitr::include_graphics('https://media.tenor.com/images/bfde5ad652b71fc9ded82c6ed760355b/tenor.gif')\n# ```\n# :::\n#\n# ::: {.panel}\n# ## üîö Ending tab {.panel-name}\n#\n# This is tab number 5. Thank you for reading this far.\n#\n# ```{r, out.width=\"50%\",echo=FALSE ,fig.align = 'center'}\n# knitr::include_graphics('https://media.tenor.com/images/3f9ea6897492ac63d0c46eb53ae79b11/tenor.gif')\n# ```\n# :::\n# :::\n# :::\n\n\n\nüîé As it can be seen, this is not so difficult. However, what if we wanted to generate 16 tabs instead of 4?\n\n\n\nUsing a tidy approach, an automatic tab generation üßô can be performed by nesting the objects to include in each tab. Let‚Äôs see an example.\nData üìä\nFor this example, time series data from the Argentine monthly economic activity estimator (EMAE) is used. This data is available in the sknifedatar package üì¶.\n\n\nemae <- sknifedatar::emae_series\n\n\n\nNested dataframes üìÇ\nüîπ The first step is to generate a nested data frame. It includes a row per economic sector.\n\n\nnest_data <- emae %>%\n  nest(nested_column = -sector)\nnest_data\n\n\n# A tibble: 16 √ó 2\n   sector                           nested_column     \n   <chr>                            <list>            \n 1 Comercio                         <tibble [202 √ó 2]>\n 2 Ensenanza                        <tibble [202 √ó 2]>\n 3 Administracion publica           <tibble [202 √ó 2]>\n 4 Transporte y comunicaciones      <tibble [202 √ó 2]>\n 5 Servicios sociales/Salud         <tibble [202 √ó 2]>\n 6 Impuestos netos                  <tibble [202 √ó 2]>\n 7 Sector financiero                <tibble [202 √ó 2]>\n 8 Mineria                          <tibble [202 √ó 2]>\n 9 Agro/Ganaderia/Caza/Silvicultura <tibble [202 √ó 2]>\n10 Electricidad/Gas/Agua            <tibble [202 √ó 2]>\n11 Hoteles/Restaurantes             <tibble [202 √ó 2]>\n12 Inmobiliarias                    <tibble [202 √ó 2]>\n13 Otras actividades                <tibble [202 √ó 2]>\n14 Pesca                            <tibble [202 √ó 2]>\n15 Industria manufacturera          <tibble [202 √ó 2]>\n16 Construccion                     <tibble [202 √ó 2]>\n\nüëÄ To better understand the format of nest_data, the \"nested_column\" variable is disaggregated below. By clicking on each sector, it can be seen that üëâüëâ each nested column includes data for the series of the selected sector. In the first row, data corresponds to the monthly activity estimator from 2004-01-01 to 2020-10-01 for the ‚ÄòCommerce‚Äô sector.\n\n\nShow code\n\nreactable(nest_data, details = function(index) {\n  data <- emae[emae$sector == nest_data$sector[index], c('date','value')] %>%\n    mutate(value = round(value, 2))\n  div(style = \"padding: 16px\",\n                 reactable(data, outlined = TRUE)\n  )\n}, defaultPageSize=5)\n\n\n\n\nThe above interactive table was made using reactable and htmltools.\nTime series plots üå†\nüëâ The evolution of each series can be observed by using a tab for each sector. This allows the visualization to be much clearer üôå, allowing the reader to focus on each series, without having to view multiple plots of the same type.\n\n\nnest_data <-\n  nest_data %>%\n  mutate(ts_plots = map(nested_column,\n                        ~ plot_time_series(.data = .x,\n                                           .date_var = date,\n                                           .value = value,\n                                           .color_var = year(date),\n                                           .interactive = FALSE,\n                                           .line_size = 1,\n                                           .smooth_color = 'lightgrey',\n                                           .smooth_size = 0.1,\n                                           .legend_show = FALSE\n                                          )))\nnest_data\n\n\n# A tibble: 16 √ó 3\n   sector                           nested_column      ts_plots\n   <chr>                            <list>             <list>  \n 1 Comercio                         <tibble [202 √ó 2]> <gg>    \n 2 Ensenanza                        <tibble [202 √ó 2]> <gg>    \n 3 Administracion publica           <tibble [202 √ó 2]> <gg>    \n 4 Transporte y comunicaciones      <tibble [202 √ó 2]> <gg>    \n 5 Servicios sociales/Salud         <tibble [202 √ó 2]> <gg>    \n 6 Impuestos netos                  <tibble [202 √ó 2]> <gg>    \n 7 Sector financiero                <tibble [202 √ó 2]> <gg>    \n 8 Mineria                          <tibble [202 √ó 2]> <gg>    \n 9 Agro/Ganaderia/Caza/Silvicultura <tibble [202 √ó 2]> <gg>    \n10 Electricidad/Gas/Agua            <tibble [202 √ó 2]> <gg>    \n11 Hoteles/Restaurantes             <tibble [202 √ó 2]> <gg>    \n12 Inmobiliarias                    <tibble [202 √ó 2]> <gg>    \n13 Otras actividades                <tibble [202 √ó 2]> <gg>    \n14 Pesca                            <tibble [202 √ó 2]> <gg>    \n15 Industria manufacturera          <tibble [202 √ó 2]> <gg>    \n16 Construccion                     <tibble [202 √ó 2]> <gg>    \n\nüìΩ First, a column called ‚Äúts_plots‚Äù is added, where we store the visualizations of the time series. For this we apply the function ‚Äúplot_time_series‚Äù on each series stored in the column ‚Äúnested_column‚Äù through the function \"map\". The function plot_time_series is included on the timetk package üì¶. One of the series is displayed below.Notice that we are using lubridate package to add different colors for each year. This allows us to infer if seasonality is present in each time series, although we will analyse this later on this article.\n\n\nnest_data %>% pluck(\"ts_plots\",1)\n\n\n\n\nPerfect, but ‚Ä¶ if we wanted to graph all the time series, how could we do it? ü§î\nThe ‚Äúautomagic_tabs‚Äù function of the sknifedatar package was created for this. It receives 3 main arguments:\ninput_data: The nested dataframe that we have created üíæ, in our case, the ‚Äúnest_data‚Äù object.\npanel_name: The name of the column of the nested dataframe where the series names are, these names will be the titles of each tabs üìù. In our case, ‚Äúsector‚Äù.\n.output: The name of the column of the nested dataframe that stores the graphs to be displayed üìà. In our case, ‚Äúts_plots‚Äù.\nüõ† Additional arguments: you can specify the width of the set of panels in ‚Äú.layout‚Äù, üëâüëâüëâ in addition to being able to specify all the parameters available on rmarkdown chunks üôå (fig.align, fig.width, ‚Ä¶)\nüîπ Let‚Äôs see the application below, first we invoke the ‚Äúuse_panelset\" function from the xaringanExtra package üì¶ and then the‚Äùautomagic_tabs\" function.\n\n\nxaringanExtra::use_panelset()\n\n\n\n\n\n`r automagic_tabs(input_data = nest_data, panel_name = \"sector\", .output = \"ts_plots\",\n                  .layout = \"l-page\", fig.heigth=1, fig.width=10)`\n\n\n\n\n\nComercio\n\n\n nest_data$ts_plots[[1]] \n\n\n\n\nEnsenanza\n\n\n nest_data$ts_plots[[2]] \n\n\n\n\nAdministracion publica\n\n\n nest_data$ts_plots[[3]] \n\n\n\n\nTransporte y comunicaciones\n\n\n nest_data$ts_plots[[4]] \n\n\n\n\nServicios sociales/Salud\n\n\n nest_data$ts_plots[[5]] \n\n\n\n\nImpuestos netos\n\n\n nest_data$ts_plots[[6]] \n\n\n\n\nSector financiero\n\n\n nest_data$ts_plots[[7]] \n\n\n\n\nMineria\n\n\n nest_data$ts_plots[[8]] \n\n\n\n\nAgro/Ganaderia/Caza/Silvicultura\n\n\n nest_data$ts_plots[[9]] \n\n\n\n\nElectricidad/Gas/Agua\n\n\n nest_data$ts_plots[[10]] \n\n\n\n\nHoteles/Restaurantes\n\n\n nest_data$ts_plots[[11]] \n\n\n\n\nInmobiliarias\n\n\n nest_data$ts_plots[[12]] \n\n\n\n\nOtras actividades\n\n\n nest_data$ts_plots[[13]] \n\n\n\n\nPesca\n\n\n nest_data$ts_plots[[14]] \n\n\n\n\nIndustria manufacturera\n\n\n nest_data$ts_plots[[15]] \n\n\n\n\nConstruccion\n\n\n nest_data$ts_plots[[16]] \n\n\n\n\n\n\n‚ö† Note something important, üëâüëâüëâ the function does not run in a chunk, it is invoked ‚Äúinline‚Äù (or an r function between apostrophes) within the Rmarkdown document. Below is the complete code:\n\n\n#---\n#title: \"automagic_tabs\"\n#author: \"sknifedatar\"\n#output: html_document\n#---\n#\n#```{r}\n#library(sknifedatar)\n#library(timetk)\n#```\n#\n#```{r}\n#emae <- sknifedatar::emae_series\n#\n#nest_data <- emae %>%\n#  nest(nested_column = -sector) %>%\n#  mutate(ts_plots = map(nested_column,\n#                        ~ plot_time_series(.data = .x,\n#                                           .date_var = date,\n#                                           .value = value,\n#                                           .interactive = FALSE,\n#                                           .line_size = 0.15)\n#                         ))\n#```\n#\n#```{r}\n#xaringanExtra::use_panelset()\n#```\n#\n#`r automagic_tabs(input_data = nest_data, panel_name = \"sector\", .output = \"ts_plots\")`\n\n\n\nüîπ Copy the code above, paste it into a new Rmarkdown file, and hit knit the document to get the tabs.\n\n\n\nDecomposition and autocorrelation üí°\nBelow is a brief exploratory analysis üí´ of 4 of the series, including decomposition and autocorrelation analysis. The results are presented in tabs, one for each sector for each type of analysis.\n\nüîπ First we filter 4 series and add emojis to their names üòÇ.\n\n\ndata_filter <-\n  nest_data %>%\n  filter(sector %in% c(\n    'Miner√≠a',\n    'Industria manufacturera',\n    'Pesca',\n    'Construcci√≥n'\n  )) %>%\n  mutate(\n    sector = case_when(\n      sector == 'Industria manufacturera' ~ 'Industria manufacturera ‚öôÔ∏è',\n      sector == 'Pesca' ~ 'Pesca üê†',\n      sector == 'Construcci√≥n' ~ 'Construcci√≥n üè†',\n      sector == 'Miner√≠a' ~ 'Miner√≠a üèî'\n    )) %>%\n  arrange(sector)\n\ndata_filter\n\n\n# A tibble: 2 √ó 3\n  sector                    nested_column      ts_plots\n  <chr>                     <list>             <list>  \n1 Industria manufacturera ‚öôÔ∏è <tibble [202 √ó 2]> <gg>    \n2 Pesca üê†                  <tibble [202 √ó 2]> <gg>    \n\nüîπ Now the decomposition plots are added in the STL column. This is later plotted with the function automagic_tabs.\n\n\ndata_filter <- data_filter %>%\n  mutate(STL = map(nested_column,\n                   ~ plot_stl_diagnostics(.x,\n                                          date,\n                                          value,\n                                          .frequency = \"auto\",\n                                          .trend = \"auto\",\n                                          .feature_set = c(\"observed\", \"season\", \"trend\", \"remainder\"),\n                                          .interactive = FALSE\n                                          )\n))\n\ndata_filter\n\n\n# A tibble: 2 √ó 4\n  sector                    nested_column      ts_plots STL   \n  <chr>                     <list>             <list>   <list>\n1 Industria manufacturera ‚öôÔ∏è <tibble [202 √ó 2]> <gg>     <gg>  \n2 Pesca üê†                  <tibble [202 √ó 2]> <gg>     <gg>  \n\nüìå STL plots contain 4 nested graphs, therefore we will increase the height of the figure to 8 and change the layout.\n\n\n`r automagic_tabs(input_data=data_filter ,panel_name=\"sector\",.output=\"STL\" ,\n                  fig.height=5 ,.layout=\"l-body-outset\")`\n\n\n\n\n\nIndustria manufacturera ‚öôÔ∏è\n\n\n data_filter$STL[[1]] \n\n\n\n\nPesca üê†\n\n\n data_filter$STL[[2]] \n\n\n\n\n\n\nüîπ Finally the autocorrelation plots are added in the ACF column. This is also plotted on tabs with the automagic_tabs function.\n\n\ndata_filter <- data_filter %>%\n  mutate(ACF = map(\n    nested_column,\n    ~ plot_acf_diagnostics(.data = .x, date, value,\n                           .show_white_noise_bars = TRUE,\n                           .white_noise_line_color = 'red',\n                           .white_noise_line_type = 2,\n                           .line_size = 0.4,\n                           .point_size = 0.7,\n                           .interactive = FALSE\n                        )\n  ))\n\ndata_filter\n\n\n# A tibble: 2 √ó 5\n  sector                    nested_column      ts_plots STL    ACF   \n  <chr>                     <list>             <list>   <list> <list>\n1 Industria manufacturera ‚öôÔ∏è <tibble [202 √ó 2]> <gg>     <gg>   <gg>  \n2 Pesca üê†                  <tibble [202 √ó 2]> <gg>     <gg>   <gg>  \n\n\n\n`r automagic_tabs(input_data = data_filter , panel_name = \"sector\", .output = \"ACF\",\n                  .layout=\"l-body-outset\")`\n\n\n\n\n\nIndustria manufacturera ‚öôÔ∏è\n\n\n data_filter$ACF[[1]] \n\n\n\n\nPesca üê†\n\n\n data_filter$ACF[[2]] \n\n\n\n\n\n\nThe emojis are displayed in the tab titles ü§©ü§©ü§©.\nThank you very much for reading us üëèüëèüëè.\nContacts ‚úâ\nKarina Bartolome, Linkedin, Twitter, Github, Blogpost.\nRafael Zambrano, Linkedin, Twitter, Github, Blogpost.\n\n\n\n",
    "preview": "https://karbartolome-blog.netlify.app/posts/AutomagicTabs/icono.png",
    "last_modified": "2022-06-07T15:39:59+00:00",
    "input_file": {}
  },
  {
    "path": "posts/2021-03-24-customizing-distill-with-htmltools-and-css/",
    "title": "Customizing distill with {htmltools} and CSS",
    "description": "How I added lots of little features to my distill site with the {htmltools} package, CSS, and a handful of little R functions.",
    "author": [
      {
        "name": "John Paul Helveston",
        "url": {}
      }
    ],
    "date": "2021-03-25",
    "categories": [
      "features",
      "tutorial",
      "html",
      "css"
    ],
    "contents": "\n\nContents\nFinding the html\n{htmltools} to the rescue!\nGetting organized\nHaiku research summaries\nLink ‚Äúbuttons‚Äù with icons + text\nSide note on academic icons\n\nFloat an image left / right with wrapped text\nFloat a single image\nFloat multiple images\n\n‚ÄúLast updated on‚Ä¶‚Äù statement in footer\nFinal thoughts\n\n\nNote: This post was originally written by John Paul Helveston and was copied here on March 30, 2021 - see the original post here for a potentially updated version.\n\n\n\nOne of the things I love about {distill} as a site builder is that it is super light weight. It comes out of the box with very few bells and whistles, enabling you to create a site from scratch in minutes. I tried using {blogdown} with the Hugo Academic theme, but in the end I found the overall configuration a bit overwhelming, even with the guidance of Alison Hill‚Äôs incredible post on how to do it (btw, if you want to make a blogdown site, you totally should read her posts on blogdown). Distill was just simpler, so I dove in.\nThat said, once I did get my distill site running, I found myself longing for some of the really cool features I‚Äôve seen on peoples‚Äô blogdown sites, like Alison Hill‚Äôs site (if you can‚Äôt tell, Alison‚Äôs work has been a major source of inspiration for me). But then I realized, ‚Äúwait a minute‚Ä¶I‚Äôm working in R, and whenever I want some functionality that doesn‚Äôt yet exist, I can just write my own functions!‚Äù\nSo that‚Äôs what I set out to do - write a bunch of functions and hack away at CSS to construct the features I wanted. This post walks through my general strategy and then shows how I implemented some of the features on my site.\n\nFull disclosure: I am sure there are probably other (likely better) ways to do some of these things, but this is what I came up with and it worked for me!\n\nFinding the html\nFor every feature I wanted to add, my starting point was trying to find an example somewhere of the raw html for that feature. My knowledge of html is very limited and hacky, but I do know that if I see something I want, I can use the ‚Äúinspect‚Äù tool in Chrome to grab the html by right-clicking on it and selecting ‚ÄúCopy element‚Äù, like this:\n\n\nWith some html in hand, I had a template to work with. My starting point was always to just drop the html directly into a page and edit it until it looked the way I wanted. But most of the time I needed to replicate and reuse that html in multiple places, so I had to find a way to write R code to generate html.\n{htmltools} to the rescue!\nLuckily, some clever folks wrote a package that generates html code! Since html controls formatting by wrapping content inside tags, the {htmltools} package uses a bunch of handy functions to generate those tags for you. For example, if I wanted to make a level 1 header tag, I could use the h1() function:\n\n\nlibrary(htmltools)\n\ncontent <- h1(\"Hello World\")\nprint(content)\n\n\n#> <h1>Hello World<\/h1>\n\nFor most situations, this works great, but there are also times where I need a tag that isn‚Äôt yet supported. In those case, you can insert the tags yourself as a string and use the tag() function to create custom tags. For example, the <aside> tag is used in distill to put content in the sidebar, but {htmltools} does not have an aside() function. Instead, I can create those tages like this:\n\n\ncontent <- tag(\"aside\", \"Hello World\")\nprint(content)\n\n\n#> <aside>Hello World<\/aside>\n\nWith this in mind, we now have just about everything we need to start writing functions to construct some html! I‚Äôll start with a simple example of writing a function to insert some text in the sidebar.\nGetting organized\nBefore I started writing functions, I needed to find a convenient place to put them so I could use them later in my distill articles and posts. Following the typical folder structure for R packages, I decided to make a folder called ‚ÄúR‚Äù in the root directory of my distill site and put a file called functions.R in it. Now I can access any functions I write inside this file by calling the following at the top of any .Rmd file:\n\n\nsource(file.path(\"R\", \"functions.R\"))\n\n\n\nIt‚Äôs kind of like calling library(package) at the top of a file, except your functions don‚Äôt live in a package. Eventually, I may choose to move some of my functions to an external package so others can use them, but for now they‚Äôll live happily in my functions.R file üòÑ.\nHaiku research summaries\nInspired by Andrew Heiss‚Äôs research page, I wanted to insert a haiku summary next to each citation of each paper on my publications page. All you need to do is wrap some text in <aside> tags and it will show up in the side bar. But rather than write the html for each haiku (e.g.¬†<aside>haiku text<\/aside>), I decided to write a simple function to generate the html tags for me.\nI started with three functions to generate the tags for some center-aligned text in the sidebar:\n\n\n# Generates <aside>text<\/aside>\naside <- function(text) {\n  return(htmltools::tag(\"aside\", list(text)))\n}\n\n# Generates <center>text<\/center>\ncenter <- function(text) {\n  return(htmltools::tag(\"center\", list(text)))\n}\n\n# Generates <aside><center>text<\/center><\/aside>\naside_center <- function(text) {\n  return(aside(center(list(text))))\n}\n\n\n\nNow I can insert some center-aligned text in the sidebar with the function aside_center(text). But since haikus have a particular 5-7-5 syllabic structure, I thought it would be better to put each line on a separate row. I also wanted the haikus to be in italic font. So I wrote a haiku() function that takes three text inputs and generates the html to put them in the side bar on separate lines:\n\n\nhaiku <- function(one, two, three) {\n  return(aside_center(list(\n    htmltools::em(\n      one, htmltools::br(),\n      two, htmltools::br(),\n      three)\n  )))\n}\n\n\n\nWith this little function, I can insert haikus throughout my publications page without having to write any html! For example, the html for the haiku for our recent paper in Environmental Research Letters is generated like this:\n\n\nhtml <- haiku(\n  \"A five minute ride\",\n  \"In an EV can increase\",\n  \"The chance you'll buy one\"\n)\n\nprint(html)\n\n\n#> <aside>\n#>   <center>\n#>     <em>\n#>       A five minute ride\n#>       <br/>\n#>       In an EV can increase\n#>       <br/>\n#>       The chance you'll buy one\n#>     <\/em>\n#>   <\/center>\n#> <\/aside>\n\n\nImportant caveat: For this to work, I had to insert each haiku using in-line R code, like this: `r haiku(\"one\", \"two\", \"three\")`. If I used a code chunk, the output will get wrapped in a <div>, nullifying the <aside> tags.\n\nHopefully this example gives you the gist of the general strategy of writing a function to produce the desired html. For the most part, the strategy is the same for all the other features on this post, with the exception that some require a little CSS sprinkled on top.\nLink ‚Äúbuttons‚Äù with icons + text\nEveryone knows that cool points are directly proportional to usage of fontawesome icons on your website. So when it came time to add links to content on my publications page, I had to find a way to make it easier to insert icons with the links. Since {htmltools} does not have a default tag for <i><\/i>, I made a function to build the tags using htmltools::tag():\n\n\n# Generates <i class=\"icon\"><\/i>\nmake_icon <- function(icon) {\n  return(htmltools::tag(\"i\", list(class = icon)))\n}\n\n\n\nI can now get an icon for any fontawesome by using it‚Äôs class. For example, I can get the GitHub icon like this:\n\n\nmake_icon(\"fab fa-github\")\n\n\n\nBecause this function just generates generic <i><\/i> tags, it works with other icon libraries too. For example, I can insert the Google Scholar icon from academic icons using make_icon(\"ai ai-google-scholar\"). Cool!\nOf course I want links that have icons + text, so I made another function to paste on the text:\n\n\nmake_icon_text <- function(icon, text) {\n  return(htmltools::HTML(paste0(make_icon(icon), \" \", text)))\n}\n\n\n\nAnd finally, to make a link, I need to make one more function using the htmltools::a() function. I also added a class I called \"icon-link\" so I could add some CSS styling later to these links:\n\n\nicon_link <- function(icon = NULL, text = NULL, url = NULL) {\n  if (!is.null(icon)) {\n    text <- make_icon_text(icon, text)\n  }\n  return(htmltools::a(href = url, text, class = \"icon-link\"))\n}\n\n\n\nBy itself, this function will produce a link with an icon and text. To make it looks more like a button (which is what I wanted), I added the following CSS in my jhelvy.css theme, which is the theme I set to all pages in my _site.yml file:\n\n.icon-link {\n    background-color: var(--color-primary);\n    color: var(--color-white);\n    padding: 3px 5px 3px 5px;\n    margin: 0 2px 0 2px;\n    border-radius: 5px; /* Rounded edges */\n}\n\n.icon-link:hover {\n    background-color: var(--color-secondary);\n    color: var(--color-white);\n}\n\n\nNote: I use parameters throughout my css file so I can use common values, like colors, so that‚Äôs what var(--color-primary); and var(--color-secondary); are about. You can see what color values these refer to at the top of my jhelvy.css file.\n\nYou can see how these ‚Äúbuttons‚Äù look on my publications page. For example, the three buttons at the top are generated with this chunk in my publications.Rmd file:\n\n\nicon_link(\n    icon = \"ai ai-google-scholar\",\n    text = \"Google Scholar\",\n    url  = \"https://scholar.google.com/citations?user=DY2D56IAAAAJ\"\n)\nicon_link(\n    icon = \"ai ai-orcid\",\n    text = \"ORCID\",\n    url  = \"https://orcid.org/0000-0002-2657-9191\"\n)\nicon_link(\n    icon = \"ai ai-researchgate\",\n    text = \"Research Gate\",\n    url  = \"https://www.researchgate.net/profile/John_Helveston\"\n)\n\n\n\n\n\n Google Scholar ORCID Research Gate\n\n\nSide note on academic icons\nThe distill package supports fontawesome icons out of the box, but if you want to include academic icons you‚Äôll need to include a link to the style sheet in the page header. You can quickly add it to all pages by making a header.html file in your root directory that contains this line:\n\n<link rel=\"stylesheet\" href=\"https://cdn.jsdelivr.net/gh/jpswalsh/academicons@1/css/academicons.min.css\">\n\nThen in your _site.yml you can add it to every page by changing the output parameter:\noutput:\n  distill::distill_article:\n    includes:\n      in_header:\n      - header.html\nFloat an image left / right with wrapped text\nA very common layout I see on lots of sites is an image floated to the left or right with text wrapping around it. Here‚Äôs an example from my lab page:\n\n\nThere are probably lots of ways to do this, but a simple enough solution is to use the ::: notation to create custom divs. This isn‚Äôt needed if your output is a html_document, but for distill articles you need to create a new div that includes the image and text wrapping around it (see this issue for details as to why you have to do this).\nFloat a single image\nIf you have just a single image that you want to wrap text around, you can do it like this:\n:::float-image\n\n```{r out.width='150px', out.extra='style=\"float:left; padding:10px\"', echo=FALSE}\nknitr::include_graphics(\"path/to/image\")\n```\n\nHere is some text you want to wrap around the image.\n:::\nYou can name the div whatever you want - I just used float-image to be descriptive. I included all the CSS needed to float the image in the code chunk settings: out.width='150px', out.extra='style=\"float:left; padding:10px\"'. You may want to adjust the padding to fit your site‚Äôs look and feel, but this should be all you need to get the job done.\nFloat multiple images\nSince I use this layout frequently, I decided to define two classes, float-left and float-right, in my jhelvy.css theme that style any images in a div with those classes to float left or right, with a little padding:\n\n.float-left img {\n    float:left;\n    padding: 5px 10px 5px 0px;\n}\n\n.float-right img {\n    float:right;\n    padding: 5px 0px 5px 10px;\n}\n\nNow to float an image and wrap text around it, all I need to do is use one of those classes for the div name, and any images between the ::: marks will be floated left or right:\n:::float-left\n\n```{r, out.width='150px'}\nknitr::include_graphics(\"path/to/image\")\n```\n\nHere is some text you want to wrap around the image.\n:::\nYou can use whatever method you want to insert images, like knitr::include_graphics() or just insert direct html (which is what I actually end up doing most often).\n\nCaveat: Anything in the div created by ::: will be masked to the table of contents, so I don‚Äôt recomment wrapping a whole article inside ::: to float multiple images (though you could) and instead recommend wrapping just the elements you want to float.\n\n‚ÄúLast updated on‚Ä¶‚Äù statement in footer\nI wanted to put a date somewhere on my site so people can see when it was last updated, and I figured the footer was a good location since it‚Äôs out of the way but still on every page (even blog posts). The thing is, {distill} generates the footer from a single, static _footer.html file in the root directory. So if I want the date to update in the footer, I have to update the _footer.html file on every build.\nNot a problem - just make a create_footer() function and call it before you build the site! My create_footer() function lives in my functions.R file, and it‚Äôs a bit long as it also inserts some icons and other text. But the main part doing the date updating is the function last_updated():\n\n\nlast_updated <- function() {\n  return(htmltools::span(\n    paste0(\n      'Last updated on ',\n      format(Sys.Date(), format=\"%B %d, %Y\")\n    ),\n    style = \"font-size:0.8rem;\")\n  )\n}\n\n\n\nThis just generates a span of the text ‚ÄúLast updated on {date}‚Äù with a smaller font size. I call this function inside my create_footer() function to grab the latest date, then the function write the _footer.html file to the root directory.\nTo simplify the site build, I put a build_site.R file in root directory with code to load all the functions in functions.R, create the footer, then build the site:\n\n\nsource(file.path(\"R\", \"functions.R\"))\n\n# Fist build the footer to capture today's date\ncreate_footer()\n\n# Then render the site\nrmarkdown::render_site(encoding = 'UTF-8')\n\n\n\nNow I just source build_site.R and my site builds with an updated footer to today‚Äôs date! What‚Äôs even more fun is I use a GitHub Action to automatically run build_site.R every time I commit something to the repo where my site lives and commit all the site files to my gh-pages branch. So I never have to worry about creating the footer - it‚Äôs all done automatically!\nFinal thoughts\nComing up with little solutions to each of these features was a highly iterative process, and for the most part I really wasn‚Äôt sure how to do any of this when I first got started. Each feature I added usually started by being inspired from someone else‚Äôs work, like the haiku research summaries and buttons with icons and text on Andrew Heiss‚Äôs research page. I found the process of coming up with a solution to implement each feature to be a fun way to learn new R tricks, especially in working with CSS. If you‚Äôre an R / distill / blogdown user looking to customize your site, hopefully these little examples will inspire you too!\n\n\n\n",
    "preview": "posts/2021-03-24-customizing-distill-with-htmltools-and-css/images/css_html.png",
    "last_modified": "2022-06-07T15:39:59+00:00",
    "input_file": {},
    "preview_width": 4780,
    "preview_height": 1575
  },
  {
    "path": "posts/2021-03-21-create-a-github-website-with-distill-in-less-than-30-minutes/",
    "title": "Create a GitHub website with distill in less than 30 minutes",
    "description": "The following are step-by-step instructions for creating a website using [R Markdown](https://rmarkdown.rstudio.com/) and the [distill R package](https://rstudio.github.io/distill/) (through [R Studio](https://rstudio.com/products/rstudio/)) and [GitHub](https://github.com/).",
    "author": [
      {
        "name": "Andreas Handel",
        "url": {
          "https://www.andreashandel.com": {}
        }
      }
    ],
    "date": "2021-03-21",
    "categories": [
      "github",
      "starting",
      "tutorial"
    ],
    "contents": "\n\nContents\nMotivation\nRequired skills\nWhat this document covers\nWho this is (not) for\nRelated content\nQuick tool overview\nPre-requisites\nInstall R and RStudio\nGet GitHub up and running\nInstall Gitkraken (optional but assumed)\n\nStarting your website\nTest the website\nA brief explanation of your new website\nThe file index.Rmd\nThe file about.Rmd\nThe file _site.yml\nThe docs folder\nAdditional content\n\nCreating and editing content\nEditing the look\nMaking your site public on GitHub.\nGitkraken\nGithub website\n\nNext steps\nUpdating your site\nMore Information\nSome tips, tricks and comments\n\n\nNote: This post was originally written by Andreas Handel and copied here on March 26, 2021 - see the original post here for a potentially updated version.\n\n\n\nPhoto by Clovis Cheminot\nThe following blog post provides step-by-step instructions for creating a website using R Markdown, the distill R package and GitHub.\nMotivation\nThe distill R package is a fairly new R package from the RStudio folks, it is under heavy development. One of its purposes is to create simple but still somewhat flexible websites. If you are trying your first website, or just need a fairly simple one that is quick to set up, this is a good place to start. To see a few examples of websites created with distill, check out the cleverly named the distillery website.\nRequired skills\nI assume that you have general computer literacy, but no experience with any of the tools that will be used. Also, no coding, web-development or related experience is expected.\nWhat this document covers\nThis document is meant to provide you with the minimum required instructions to get your own website up and running quickly. As such, instructions and background information are kept at a minimum. I used a recipe-like approach by giving hopefully detailed and specific enough instructions to get things to work. I‚Äôm not covering any why here or provide much further explanations. If you decide you like to use this setup for your website, you will likely want to go beyond this document and learn a bit more about the various tools involved in the process. To that end, links to further resources are provided.\nWho this is (not) for\nThis way of making and hosting a website might be for you if:\nYou are (or would like to be) an R, R Markdown and GitHub user. This is a method of creating a website using those tools which very efficiently fits into such a work flow.\nYou want a way to host a website where all the content is fully controlled by you, and the website can be hosted without much resources (and for free).\nYou want something that‚Äôs fairly simple and easy to set up and maintain, but still gives you some ability to configure things.\nThis way of making and hosting a website might not be for you if:\nYour main work flow is MS Word, Powerpoint, etc. and you are not interested in R Markdown or GitHub.\nYou want everything accessible through a graphical interface.\nYou need a complex setup with lots of control over layout and many advanced features.\nRelated content\nI previously posted tutorials describing two other ways of making a website using a similar set of tools.\nOne rather simple way to set up a website is using R Markdown and Github without the distill package, I described this approach in this blog post. That approach is rather similar to the one described here. The advantage of using distill is that it‚Äôs likely going to see more development and will allow more configuration down the road.\nIf you need the ability to do more customization, you can use the blogdown R package and Hugo. I wrote a 2-series blog post with instructions for creating your own website using blogdown, Hugo and Netlify. (Here are Part 1 and part 2). While I‚Äôm using Hugo/blogdown for my personal website I have been using a basic RMarkdown/Github setup for my online courses, such as this one.\nQuick tool overview\nThe tools used here are fairly simple. GitHub is used for hosting the website and R and RStudio, together with some packages (most importantly the distill package) are used to create the site.\nPre-requisites\nFirst, you need to install R and Rstudio and set up a GitHub account. (That does not count toward the 30 minutes of getting the website up and running üòÅ.)\nInstall R and RStudio\nIf you don‚Äôt already have it on your computer, install R first. You can pick any mirror you like. If you already have R installed, make sure it is a fairly recent version. If yours is old, I suggest you install a new R version.\nOnce you have R installed, install the free version of RStudio Desktop. Again, make sure it‚Äôs a recent version. If you have an older version, you should update.\nInstalling R and RStudio should be fairly straightforward. If you want some more details or need instructions, see this page (which is part of an online course I teach).\nGet GitHub up and running\nIf you are new to GitHub, you need to create an account. At some point, it would also be useful to learn more about what Git/GitHub is and how to use it, but for this purpose you actually don‚Äôt need to know much. If you want to read a bit about Git/GitHub, see e.g.¬†this document, which I wrote for one of my courses..\nInstall Gitkraken (optional but assumed)\nThere are many ways you can interact with Git/GitHub. I mostly use the fairly user-friendly and full-featured Gitkraken. You can get a basic version for free. If you are a student, you can get the Pro version through the Github developer pack, teachers can get it through the Github teacher toolbox. If you qualify for either, I highly recommend signing up. But you don‚Äôt need it for our purpose.\nOnce you have your GitHub account set up and Gitkraken installed, make sure you connect Gitkraken to your Github account.\nI assume for the rest of the post that you are using Gitkraken. If you have your own preferred Git/GitHub client (e.g.¬†the one that comes with RStudio), you can of course use that one too.\nStarting your website\nOk, the 30 minute timer starts now üòÅ. With the above registration and installation bits out of the way, you can get started with your website. To do so, follow these steps:\nOpen RStudio.\nInstall the distill package by typing install.packages('distill') into the R console.\nChoose File -> New Project -> New Directory and find the Distill Website entry. If it‚Äôs not there, close and re-open RStudio and make sure the distill package installed ok (e.g., by calling library(distill) in the R console and making sure there is no error message).\nIn the menu that opens, provide the name for your website project (this will also be the name of the URL on GitHub, so choose something informative). Decide where to locate it on your local drive. Don‚Äôt place it somewhere were it gets synced with e.g., Dropbox, OneDrive, Google Drive. This can mess with the GitHub work flow. Give it a title and check the configure GitHub Pages box, as shown in the figure.\n\n\n\nTest the website\nOnce you created the project following the steps outlined above, RStudio should restart itself and you should see 3 files open in the RStudio file pane (top left) namely index.Rmd, about.Rmd and _site.yml. In the top right pane, you should see a tab called Build. Click on it, then click on the Build Website hammer icon. Alternatively, you can type `rmarkdown::render_site() into the R console.\nIf you don‚Äôt find the Build Website button or the rmarkdown::render_site() command produced an error message, something went wrong with the setup. You can try to close RStudio, navigate to the folder for your website you just created and click on the .Rproj file, which should open RStudio and place you in the project. Maybe the Build tab and Build Website buttons are now there? If not, revisit the steps above and make sure you did them all, especially make sure the 3 starter files are in the same folder.\nIf things work, a preview window should open with the beginning of your new website. You‚Äôll see a menu at the top, you can click on the links. Not much will happen just now, we‚Äôll get to this.\nA brief explanation of your new website\nYour website is fairly simple and consists of these documents.\nThe file index.Rmd\nThis is the main landing page of your website. It always needs to be there and you fill it with the content you want on your main page. It should have opened in RStudio, if not, click on it (in the lower right File section of RStudio) to open it. You will see some stuff at the top between the --- symbols, that‚Äôs called the YAML header and is used for formatting. In this case, we are using the distill format for output. This is a type of R Markdown. If you are new to R Markdown, you can learn more about it on the R Markdown website. I also have a discussion of R Markdown and reproducibility on one of my course pages. You‚Äôll find additional links to potentially useful R Markdown (and Github) resources there. Details about the distill version of R Markdown are here.\nThe file about.Rmd\nThis is another R Markdown file with so far little content.\nThe file _site.yml\nThis short file (called a YAML file) contains the main settings for your site that control the overall look. It also defines the structure, i.e.¬†the menu bar at the top of your site. We‚Äôll edit this file shortly.\nThe docs folder\nThis folder is created and updated when you build the website. It contains the html files that are created from your Rmd files. Those files will be used by Github to display your website (we‚Äôll do that below). Note that you can change the folder name in _site.yml, but I recommend leaving it as is, since docs is also the default location for Github to look for these files.\nAdditional content\nThere is an .Rproj file that is used by RStudio to store information about your project. Later, we‚Äôll add a few more additional files.\nCreating and editing content\nMaking new content for your website is very easy, all you need to do is edit existing or create new R Markdown (.Rmd) files. Note that if you don‚Äôt use R code in your file, you could just use plain Markdown/Md files, but I find it easier for consistency to always use Rmd files, even if they don‚Äôt contain R code.\nLet‚Äôs create some content. Open the index.Rmd file and write some introductory text at the bottom of the file, below the YAML header. Something like This is my new website, it‚Äôs going to be awesome! or whatever you like to write.\nThen open the about.Rmd file and also write some text, e.g.¬†provide an introduction that describes you. if you want, add a picture, as e.g.¬†described here.\nFinally, let‚Äôs create yet another file. Go to File, New File, R Markdown choose as output format HTML document and give it a title and name. Let‚Äôs call it Projects. A template will open. Replace the output: html_document line in the YAML with output: distill::distill_article\nAlso delete the existing content (or keep it at the bottom if you want to see how it looks when compiled). Then write some placeholder text, e.g.¬†This is where I will list my cool projects. Save this new page as projects.Rmd into the main folder of your website.\nAnother option for creating new files, which I usually use, is to go into the website folder, make a copy of an existing file and rename. E.g. copy projects.Rmd to newpage.Rmd, then open and edit. Either approach works.\nNow we need to include the new page you created into the overall site by adding it to the navbar section of _site.yml. Open that file, and in the navbar section below the current About entry, add\n- text: \"Projects\"\nhref: projects.html\n\nWarning! YAML files or YAML headers are very picky about the exact formatting, and the number of leading empty spaces. Often, if you change something in those files and the site doesn‚Äôt compile, it means you forgot to add the required empty spaces or added more than you should. Always check that the spacing is correct.\nHere, make sure your new navbar entries is exactly positioned like the entries above it.\nOnce edited the _site.yml file, save all your files, then rebuild the website. If things work, the preview window should show up, and you should now see the text you wrote and be able to click on your new Projects entry. (You‚Äôll find the newly created html files in the docs folder.)\nEditing the look\nAs mentioned above _site.yml controls the look. You already edited it by adding something to the navigation bar.\nTo do major style changes, distill uses CSS, which is the standard of styling for any website. At some point, you‚Äôll likely need to mess with CSS a bit (it‚Äôs easy) to get exactly the look you want. For now, we‚Äôll take a shortcut and get and apply a theme someone else wrote.\nThe website of Emi Tanaka (who I do not know personally) is one of the sites featured on the distillery. Her website is here. As of the time of this writing, she has a theme with different fonts and colors. The theme is controlled by a CSS file for her site. You can get it by right-clicking here and doing a ‚Äòsave link as‚Äô. Save the file (which should be called theme.css into the main directory of your new website.\nAfter you have done that, go to the _site.yml file and add theme: theme.css as a new line under the title line. Save, rebuild your website, and you should see it looking differently.\nSince the promise was that we‚Äôll get a website going in 30 minutes, we won‚Äôt do any more styling now üòÅ. As you start customizing your look more, you might want to start read the section Creating a Website section on the distill website.\nMaking your site public on GitHub.\nThe final step involves getting your site onto GitHub so it can be turned into a public website. For the following, I assume you have GitKraken up and running. If you are familiar with Git/GitHub and use your own workflow, adjust accordingly.\nGitkraken\nOpen GitKraken, go to File -> Init Repo -> Local Only. Give it the name of your main website directory, e.g.¬†mywebsite. The Initialize In folder should be the folder above where you created the website, such that the Full path entry is the actual location of your website on your computer. For .gitignore Template you can choose R. The rest you can leave as is.\n\n\n\nOnce done, click Create repository. You should see a bunch of files ready for staging on the left. Click Stage all changes enter a commit message, commit. Then Click the Push button.\nAt this point, if you didn‚Äôt properly connect GitKraken and GitHub previously, you‚Äôll likely get an error message. Follow the error message and the connect Gitkraken to your Github account information to get it to work.\nYou‚Äôll see a message about no remote existing and if you want to add one. Say yes. A menu on the left should show up. Make sure the repository name is the same as your website folder name. Then click the green button. If things worked, your local website folder has been sent to GitHub and is ready to be turned into a website.\nGithub website\nFor the last step, go to your account on Github.com and find the repository for the website you just created. On the bar at the top, in the right corner there should be the Settings button. Click on it. Scroll down until you find the GitHub Pages section. Under Source, select Main and then choose /docs as the folder. Don‚Äôt choose a theme since we are using our own. Save those changes. If everything works (it could take a minute or so), your website is now live and public! Look right underneath the GitHub Pages section, there should be something like Your site is ready to be published at https://andreashandel.github.io/mywebsite/. Click on the link and your new site should show up.\nThat‚Äôs it. Now the hard part starts, creating good content. üòÑ\nNext steps\nYou‚Äôll likely want to create content and change the look. See the sources listed below.\nYou might also want to update the Readme.md file which is the file people see when they land in your GitHub repository for this file. I suggest adding a link to the website.\nUpdating your site\nThis process is fairly simple, you just need to remember to go through all the steps.\nMake any changes to files you want to make. Create new Rmd files in the main folder, edit them. If you include new files or rename them, don‚Äôt forget to change your _navbar.yml file.\nRebuild the website by either clicking the Build Website button inside the Build tab in the top right R Studio pane, or by typing rmarkdown::render_site() into the console.\nPush your changes to GitHub.\nWait a minute or so, then reload your website on Github and check that things look right.\nMore Information\nSince this setup is based on R Markdown, the R Markdown book is very useful and contains lots of relevant information, especially this section. There is also the newer R Markdown cookbook which is more of a how-to guide, while the R Markdown book is more of a full reference book. Both are very useful sources of information.\nThe distill website is the obvious place for additional information on the distill package.\nLook at the examples shown on the distillery website. If you see something you like, look at their GitHub repository and their code to see how they do it.\nIn my teaching, I use the Github/R Markdown workflow. Therefore, I have some information and links on that topic. You can browse through the website of this course and look for relevant content. The exercises teach parts of Github and making web pages (in fact, going through this tutorial is part of an exercise üòÉ.\nSome tips, tricks and comments\nHere are some thoughts and suggestions that I‚Äôve learned by using this general setup for several online courses (previously I didn‚Äôt use the distill setup, but these comments still apply).\nEvery time you build your website, everything gets recompiled. If you have simple content, and no/little R code, that‚Äôs ok. If you are having materials that take long to run (e.g.¬†complex R code inside your website), I suggest to move the R code from the Rmd file to a separate R script and save results from the code into files (figures/tables/Rdata files). Then load those results into your Rmd file. This way you only need to run the time-consuming R code if those parts have changed, but on a standard website re-build the code won‚Äôt need to run. There is also a way to set up your distill website as a blog that doesn‚Äôt lead to everything being recompiled. See here for more.\nSometimes when I use this workflow to build websites on a Windows computer, things slow down markedly. It turns out that Windows Defender is at times not working right. If you encounter a very slow re-build process on a Windows machine, this could be the issue and you might want to check out this discussion and especially the provided link which explains how to potentially fix it (the fix worked for me).\nYou can have files other than Rmd/Md in your main folder, and you can have files in sub-folders. Those are ignored by rmarkdown when the site is built. Having those can be useful for storing additional materials. I generally have a media folder in which I place figures and other materials, and link to it from my Rmd files.\nIf you use this setup for teaching and want to slowly release content to students (while still making edits to later parts of the course), I recommend using a staging setup. A simple way to do that is to make 2 repositories, the main one for the course, and one where you do the development. Note that even if you set this to a private repository, if you turn on Github Pages, students could find it. That‚Äôs usually not a big deal, nobody is looking. But you might want to be aware of it. With 2 repositories, you can do the testing/development of the course in the staging repository. Once things work and whenever you want to release new content to the students, you copy it over to the main repository, build it there and push it to the main course repo. Alternatively, you can do development in the main repository, as long as you don‚Äôt make the files visible in the navbar section, students won‚Äôt easily see them. Of course the files can be found through a direct link or through browsing the Github repository, so don‚Äôt place anything in there (e.g.¬†if you use this four a course, keep the solutions to your homework problems offline until after the deadline üòÑ).\nIt‚Äôs easy to have broken links when creating any website and it‚Äôs good to check that things are ok. There are simple free tools out there that let you check to make sure links are not broken. I like using Dr Link Check or the W3C Link Checker. I‚Äôm sure many others exist.\n\n\n\n",
    "preview": "posts/2021-03-21-create-a-github-website-with-distill-in-less-than-30-minutes/featured.png",
    "last_modified": "2022-06-07T15:39:59+00:00",
    "input_file": {},
    "preview_width": 1280,
    "preview_height": 834
  },
  {
    "path": "posts/2021-03-18-use-github-actions-with-r-markdown-and-distill/",
    "title": "Use GitHub actions with R Markdown and Distill",
    "description": "How can you automatically render README, Distill website...",
    "author": [
      {
        "name": "Etienne Bacher",
        "url": {}
      }
    ],
    "date": "2021-03-19",
    "categories": [
      "github",
      "tutorial",
      "deploy"
    ],
    "contents": "\n\nContents\nRender a README\nRender a Distill website\n\n\nNote: This post was originally written by Etienne Bacher and copied here on March 19, 2021 - see the original post here for a potentially updated version.\n\n The preview image comes from: https://github.com/marketplace/actions/cancel-workflow-action \nSometimes, it is useful to automatically render an R Markdown document or a website, made with distill for example. In this post, I will present you two cases in which I use GitHub Actions to automatically do that.\nRender a README\nOne of my GitHub repos is a list of JavaScript libraries that have been adapted in R. You can find the repo here. I wanted this list to be easy to update, so that it can be done on GitHub directly. The idea is that when I (or someone else) find a JavaScript library that has been adapted into an R package, I add it to a CSV file on GitHub. The problem is that this CSV file is then used into an R Markdown file, that creates a clean README with all the information.\nWithout GitHub Actions, in addition to modify the CSV file, I would have to clone the repo, open it in RStudio, render the README, and push it back on GitHub.\nBut this task is repetitive: apart from the details I add to the CSV file, it can be automated. This is where GitHub Actions comes into play. The idea is that you create a .yml file that contains the R code you want to run to render the README. This is what mine looks like:\n\non:\n  push:\n    branches: master\n\nname: Render README\n\njobs:\n  render:\n    name: Render README\n    runs-on: macOS-latest\n    steps:\n      - uses: actions/checkout@v2\n      - uses: r-lib/actions/setup-r@v1\n      - uses: r-lib/actions/setup-pandoc@v1\n      - name: Install rmarkdown\n        run: Rscript -e 'install.packages(\"rmarkdown\")'\n      - name: Render README\n        run: Rscript -e 'rmarkdown::render(\"README.Rmd\", output_format = \"md_document\")'\n      - name: Commit results\n        run: |\n          git commit README.md -m 'Re-build README.Rmd' || echo \"No changes to commit\"\n          git push origin || echo \"No changes to commit\"\n\nThe first two parts are quite self-explanatory:\nthe jobs run every time there‚Äôs a push on the master branch;\nthe name of this process is ‚ÄúRender README‚Äù.\nThe third part needs a bit more details. There are some parts that I just copied and pasted from the R actions repository, but basically you can see that first it initiates R and pandoc (setup-r@v1, setup-pandoc@v1). Then, I run an R script to install the rmarkdown package and I use it to render the Rmd file to create README.md.\nLast but not least, GitHub Actions rendered the README, but the changes are not on the repo yet. Hence, the last step is to commit the changes with a message and to push them on the master branch. Now, every time I change the CSV file on the master branch, the README will be automatically rendered (after a few minutes, since all the actions have to run first).\nI said this was the .yaml file I use on my repo, but I lied a bit. Actually, for my list of JavaScript libraries to be up-to-date, I also need to scrape the htmlwidgets gallery once in a while. Hence, I use cron to run GitHub Actions every Sunday night at 23:59. See the documentation to know how to format your schedule. Finally, here‚Äôs the .yaml file I use:\n\non:\n  push:\n    branches: master\n  schedule:\n    - cron: '59 23 * * 0'\n\nname: Render README\n\njobs:\n  render:\n    name: Render README\n    runs-on: macOS-latest\n    steps:\n      - uses: actions/checkout@v2\n      - uses: r-lib/actions/setup-r@v1\n      - uses: r-lib/actions/setup-pandoc@v1\n      - name: Install rmarkdown\n        run: Rscript -e 'install.packages(\"rmarkdown\")'\n      - name: Render README\n        run: Rscript -e 'rmarkdown::render(\"README.Rmd\", output_format = \"md_document\")'\n      - name: Commit results\n        run: |\n          git commit README.md -m 'Re-build README.Rmd' || echo \"No changes to commit\"\n          git push origin || echo \"No changes to commit\"\n\nRender a Distill website\nTo automatically render your distill website on every push on master branch, the logic is very similar. In my .yml file, there are two main differences.\nThe first one is that I need to install more packages to render my distill website. Some will be essential for everyone (e.g distill) but other packages won‚Äôt be (e.g postcards).\nThe second one is more tricky, but could be useful for several people. Before using distill, I used blogdown. For some reasons (and mostly because distill is much easier in my opinion), I switched to distill. However, this switch changed a few URLs addresses, for my posts for instance. Therefore, I needed a _redirects file to, well, redirect the old URLs to the new ones and prevent 404 errors. The _redirects file needs to be in the _site folder, because it is the folder that is used by Netlify to build the site. The problem here is that this folder is deleted and re-generated every time rmarkdown::render_site() is called, i.e every time the website is locally built. Therefore, the _redirects file couldn‚Äôt just stay there. I had to add it manually after every build.\nThe solution to that is to automate this in GitHub Actions. After having rendered the website, I just copy _redirects from its location on the repo to the _site folder. Now, every time I change something on the master branch, the distill website is rebuilt, and then the _redirects file is added.\nOne drawback though: since these files are changed on GitHub only, the first thing you have to do when opening your site project in RStudio is to pull the changes (or, like me, you will struggle with merge conflicts).\nTo finish this post, here‚Äôs the .yml file for my distill website:\n\non:\n  push:\n    branches: master\n\nname: Render & Deploy Site\n\njobs:\n  build:\n    runs-on: macOS-latest\n    steps:\n      - uses: actions/checkout@v2\n\n      - uses: r-lib/actions/setup-r@master\n\n      - uses: r-lib/actions/setup-pandoc@master\n\n      - name: Install dependencies\n        run: |\n          install.packages(\"rmarkdown\")\n          install.packages(\"distill\")\n          install.packages(\"postcards\")\n          install.packages(\"devtools\")\n          install.packages(\"fs\")\n          devtools::install_github(\"etiennebacher/ebmisc\")\n        shell: Rscript {0}\n\n      - name: Render Site\n        run: Rscript -e 'rmarkdown::render_site(encoding = \"UTF-8\")'\n      - name: Copy redirects\n        run: Rscript -e 'fs::file_copy(\"_redirects\", \"_site/_redirects\")'\n      - name: Commit results\n        run: |\n          git add -A\n          git commit -m 'Rebuild site' || echo \"No changes to commit\"\n          git push origin || echo \"No changes to commit\"\n\n\n\n\n",
    "preview": "posts/2021-03-18-use-github-actions-with-r-markdown-and-distill/gha_image.jpg",
    "last_modified": "2022-06-07T15:39:59+00:00",
    "input_file": {}
  },
  {
    "path": "posts/2021-03-16-postcards-distill/",
    "title": "M-F-E-O: postcards + distill",
    "description": "The new postcards package and distill are M-F-E-O (made for each other). Here is a brief walk-through to add a postcards personal profile page to your distill website or blog, using only R Markdown.",
    "author": [
      {
        "name": "Alison Hill",
        "url": {}
      }
    ],
    "date": "2021-03-16",
    "categories": [
      "tutorial",
      "features"
    ],
    "contents": "\n\nNote: This post was originally written by Alison Hill and copied here on March 16, 2021 - see the original post here for a potentially updated version.\n\n\n\nPhoto by Joyce McCown on Unsplash\nThis is a very brief ‚Äúpostcard to myself‚Äù about how to use the new postcards package by Sean Kross. What problem does postcards solve?\n\n‚ÄúCreate simple, beautiful personal websites and landing pages using only R Markdown.‚Äù\n‚Äî postcards README.md\n\nPostcards includes four templates:\nJolla,\nJolla Blue,\nTrestles, and\nOnofre.\nYou can see postcards::trestles in action here: http://jtleek.com/\nAnd here (this is where we are headed!):\n\nDistill is a package that also helps you make simple, beautiful websites and blogs using only R Markdown. They are M-F-E-O (‚Äòmade for each other‚Äô: this is a ‚ÄúSleepless in Seattle‚Äù reference with sadly, a complete lack of video to support). But if you‚Äôve seen the movie this scene may sound familiar:\n\nBecky: So I mailed your letter.\nAnnie: ‚ÄúDear Annie, thanks for your letter. It was great. You sound neat. We‚Äôre very excited about meeting you in New York on Valentine‚Äôs Day and seeing if we are M-F-E-O. See you soon. Sleepless in Seattle.‚Äù\nBecky: M-F-E-O?\nAnnie: ‚ÄúMade for each other.‚Äù\nBecky: It‚Äôs cute. It‚Äôs like a little clue. So he can‚Äôt write. Big deal. Verbal ability is a highly over-rated thing in a guy and our pathetic need for it is what gets us into so much trouble.\n‚Äî Sleepless in Seattle, script from https://plantyourstory.com/mfeo-its-like-a-little-clue/\n\nConsider this post like a little clue (I‚Äôm using it as a sandbox before updating our distill documentation for this new feature). Here is our existing signpost in the distill docs. With the CRAN versions of all three packages now, you can embed a postcards page within your distill site. This means the page will come with all your distill goodies like site navigation, theme, and google-analytics support.\n{{% alert note %}} You can see the demo site I made alongside this post here: https://apreshill.github.io/mfeo/ (source: https://github.com/apreshill/mfeo). {{% /alert %}}\nPre-requisites\nYou‚Äôll need the CRAN versions of three packages:\ndistill (v >= 1.2) (see: https://pkgs.rstudio.com/distill/news/index.html#distill-v1-2-cran-)\nrmarkdown (v >= 2.7)\npostcards (v >= 0.2.0)\ninstall.packages(c(\"distill\", \"rmarkdown\", \"postcards\"))\nYou can check these package versions as follows:\npackageVersion(\"distill\")\npackageVersion(\"rmarkdown\")\npackageVersion(\"postcards\")\nMake a website\nIn RStudio, create a new project using File > New Project > New Directory > New Project. Then, inside your new empty project, use your R console to do the following:\n\n\nlibrary(distill)\ncreate_website(dir = \".\", title = \"mfeo\", gh_pages = TRUE)\n\n\n\nAt this point, I recommend closing RStudio completely and opening up your project again. This way you should see the ‚ÄúBuild‚Äù tab.\n\nNow build your site! You should see the ‚Äúboilerplate‚Äù website template at this point.\nAdd a postcard\nIn your R console, use the postcards package to create a new postcard:\n\n\ncreate_postcard(file = \"tobi.Rmd\") # future name of .Rmd file\n\n\n\nAlternatively, you could use distill::create_article() to make a new page. To make a postcard, specify the template (one of: jolla, jolla-blue, onofre, trestles) and package = 'postcards':\n\n\ncreate_article(file = \"tobi\",         # future name of .Rmd file\n               template = \"jolla\",    # name of template\n               package = \"postcards\") # package that includes the template\n\n\n\nLet‚Äôs add a link to our new file in the top navbar. Open up your _site.yml file and add:\nname: \".\"\ntitle: \"mfeo\"\ndescription: |\n  mfeo\noutput_dir: \"docs\"\nnavbar:\n  right:\n    - text: \"Home\"\n      href: index.html\n    - text: \"About\"\n      href: about.html\n    - text: \"Tobi\"              # add\n      href: tobi.html           # add\noutput: distill::distill_article\nSince my file is named tobi.Rmd, that means the rendered file will be tobi.html, so that is my href key in the _site.yml. If you save that file, you should see your website refresh, and look something like this!\nJolla postcard page in distill websiteAdd a theme\nFor fun, let‚Äôs go ahead and add a custom distill theme while we‚Äôre at it.\n\n\ncreate_theme(\"postcards\")\n\n\n\n{{% alert note %}} You can see copy my theme file from here: https://github.com/apreshill/mfeo/blob/master/postcards.css. {{% /alert %}}\nThis should print to your R console:\nv Created CSS file at postcards.css\no TODO: Customize it to suit your needs\no TODO: Add 'theme: postcards.css' to your site or article YAML\n\nSee docs at <https://rstudio.github.io/distill/website.html#theming>\nI want a full-site theme, so I added theme: postcards.css to my _site.yml file. I followed the distill docs on theming here. Re-build my website, and now I see:\nJolla postcard page in themed distill websiteSwitch the homepage\nNow you may be wishing that your postcards page was your homepage- the place where visitors first land when they visit your website. The homepage in a distill website is named index.Rmd, so we need to remove the current index.Rmd file and replace it with tobi.Rmd. But we cannot just rename the files‚Ä¶\nIf you open up index.Rmd, you should see this yaml:\n---\ntitle: \"mfeo\"\ndescription: |\n  Welcome to the website. I hope you enjoy it!\nsite: distill::distill_website\n---\nThat site key is very important to keep in the index.Rmd file. Steps:\nLet‚Äôs start by adding site: distill::distill_website to the yaml of your postcards page, mine is named tobi.Rmd.\nAfter doing that, you can delete index.Rmd.\nNext, rename tobi.Rmd -> index.Rmd.\nFinally, clean up your _site.yml - you can remove the link we added above to tobi.html.\nRe-build your site and Tobi‚Äôs shining face should greet you from the homepage!\nFill-in your postcard\nOf course, you can add your own image file to the project root at this point, and then personalize your index.Rmd using the postcards template:\n---\ntitle: \"Alison Hill\"\nimage: \"alison.jpg\"\nlinks:\n  - label: LinkedIn\n    url: \"https://www.linkedin.com/in/alisonpresmaneshill/\"\n  - label: Twitter\n    url: \"https://twitter.com/apreshill\"\n  - label: GitHub\n    url: \"https://github.com/apreshill\"\n  - label: ORCID iD\n    url: \"https://orcid.org/0000-0002-8082-1890\"\nsite: distill::distill_website\noutput:\n  postcards::jolla\n---\nHere is my ‚Äúafter‚Äù:\nJolla as themed homepageAdd a blog\nBack in your console, we can add a blog, using distill:\n\n\ncreate_post(\"welcome\")\n\n\n\nIf you do this with a blog already, it just adds a single post. But if you do this without posts set up, it does some nice things for you:\nCreates a directory called _posts/ to hold all your future blog posts.\nCreates a new post with a ‚Äúslug‚Äù including the date and the name of the post (here, mine was \"welcome\").\nYour new post should open up - go ahead and knit this post. Posts in distill need to be knit intentionally, so they will never be automatically built when you rebuild your website.\nWe also probably want to add a listing page to list all our blog posts. Do this by adding a blank .Rmd file to your project root, I‚Äôll call mine blog.Rmd but there is no magic to this file name:\n\n\nfile.edit(\"blog.Rmd\")\n\n\n\nThen open up your new blog.Rmd and add a YAML (no content below the YAML):\n---\ntitle: \"Blog\"  # any name you want here\nlisting: posts # do this exactly\n---\nFinally, add a link to your blog in your upper navbar so people can actually find it! Do this by editing _site.yml one last time (remember, since my listing .Rmd is named blog.Rmd, then the href I want to link to is blog.html):\nnavbar:\n  right:\n    - text: \"Home\"\n      href: index.html\n    - text: \"About\"\n      href: about.html\n    - text: \"Blog\"      # add\n      href: blog.html   # add\nNow, admire your final polished product!\nSwitch your postcard\nLet‚Äôs say you decide you want to switch it up and use the trestles theme, instead of jolla. Easy. Open up your index.Rmd and find these lines in the YAML:\n---\noutput:\n  postcards::jolla\n---\nAnd change to:\n---\noutput:\n  postcards::trestles\n---\nRe-build your site!\n\nPublishing\nI won‚Äôt be able to cover all the publishing options here, but you can read up on the options for publishing distill websites here. If you want to take a site like mine that you built, I recommend GitHub Pages. You can use the usethis package to run:\n\n\nusethis::use_git()\nusethis::use_github()\n\n\n\n{{% alert note %}} I also just learned about the new usethis::use_github_pages() to turn on and/or (re)configure GitHub Pages! {{% /alert %}}\nThen in the GitHub project, navigate over to ‚ÄúSettings‚Äù and scroooooooll down to choose:\nGitHub Pages settings for distill websitesFor this to work, make sure your site is building to docs/ locally, and that you are committing and pushing the docs/ directory to GitHub.\n\n\n\n",
    "preview": "posts/2021-03-16-postcards-distill/featured.jpg",
    "last_modified": "2022-06-07T15:39:59+00:00",
    "input_file": {}
  },
  {
    "path": "posts/2021-03-12-making-a-darkmode-for-your-distill-site/",
    "title": "Making a Darkmode for your distill site",
    "description": "We build a darkmode for our distill site using css and a bit of java script.",
    "author": [
      {
        "name": "Jannik Buhr",
        "url": {}
      }
    ],
    "date": "2021-03-12",
    "categories": [
      "tutorial",
      "features"
    ],
    "contents": "\n\nContents\nJoin the Dark Side!\nAdding the button, css and java script\n\n\nNote: This post was originally written by Jannik Buhr and copied here on March 16, 2021 - see the original post here for a potentially updated version.\n\nJoin the Dark Side!\n‚Ä¶ we have cookies.\nFrom: knowyourmemeThere are many motivations to adding a dark mode to your site. I just like it, when things look consistent. So I also want my site to reflect that. But because at the same time I am also not very good at making things look consistent, which is why I mostly outsource design choices as much as I can. Here, for example, this means that I took the color values for the dark theme from the amazing nord color palette.\nBut let‚Äôs get into the practical side! How do we add a dark theme to complement our light theme to our distill site?\nAdding the button, css and java script\nFirst, we want a button that a user can click on to change the theme. I opted for the adjust button from Font Awesome. There is not much to do here, because those are already available in distill. Open up your _site.yml file and add an icon to the navbar:\nnavbar:\n  right:\n    - icon: fas fa-adjust\nWhile we are in this file, let‚Äôs also add the includes for the html file which will make the button work:\noutput:\n  distill::distill_article:\n    includes:\n      after_body: \"_after_body.html\"\n\nNote: I am omitting all the other things in our .yml file here and only show, what is being added. But I include the indentation-levels above the thing being added to show where to put it.\n\nThis is what _after_body.html looks like:\n<script>\nconst darkmodeToggle = document.getElementsByClassName(\"fas fa-adjust\")[0];\nlet theme = localStorage.getItem(\"theme\");\n\nif (!theme) {\n  if (window.matchMedia(\"(prefers-color-scheme: dark)\").matches ) {\n    theme = \"dark\";\n  } else {\n    theme = \"light\";\n  }\n}\nsetTheme();\n\nfunction switchTheme() {\n  if (theme === \"light\") {\n    theme = \"dark\";\n  } else {\n    theme = \"light\";\n  }\n  localStorage.setItem(\"theme\", theme);\n  setTheme();\n  console.log(theme);\n}\n\nfunction setTheme() {\n  if (theme === \"dark\") {\n    document.body.classList.add('darkmode');\n  } else {\n    document.body.classList.remove('darkmode');\n  }\n}\n\ndarkmodeToggle.addEventListener('click', switchTheme)\n<\/script>\nUnfortunately, the only way I found to refer to the darkmode toggle icon in the navbar was by class name. I could not find a way to give it an id from _site.yml. However, this should be fine because the navbar is usually the first thing on the page and the script refers to the first element of class fas fa-adjust that it can find. It is also important to have this script be included after the body, so that the rest of the site can load first before the script tries to find the button. Typically you would do this using a script file and sourcing it with the option defer, but sourcing a script file doesn‚Äôt work here due to the way distill changes file-path‚Äôs between top-level sites and posts. This is why the complete script is in the html here. The script adds a class .darkmode to the html body (and removes it when toggled off). This choice is first based on browser preferences and then saved to local storage.\nThe last thing to modify is our theme.css to make use of this .darkmode class. For each thing we want to change about our theme when it get‚Äôs dark, we take the corresponding class and the darkmode class and add our styling e.g.\n.darkmode d-article,\n.darkmode d-appendix,\n.darkmode body {\n  background-color: black;\n  color: white;\n}\nYou can have a look at my theme.css file for inspiration on what thing you need to change (though the css could be way cleaner): https://github.com/jmbuhr/jmbuhr.github.io/blob/master/theme.css\n\n\n\n",
    "preview": "posts/2021-03-12-making-a-darkmode-for-your-distill-site/images/cookies.png",
    "last_modified": "2022-06-07T15:39:59+00:00",
    "input_file": {},
    "preview_width": 350,
    "preview_height": 263
  },
  {
    "path": "posts/2021-02-24-thank-you-blogdown-hello-distill/",
    "title": "Thank you {blogdown}, hello {distill}.",
    "description": "A few notes on moving from blogdown to distill.",
    "author": [
      {
        "name": "Roland Schmidt",
        "url": "https://werk.statt.codes"
      }
    ],
    "date": "2021-02-26",
    "categories": [
      "blogdown",
      "starting"
    ],
    "contents": "\n\nContents\nSearch function\nSpeed\nLocation of data sources\nTheming via css\n\n\nNote: This post was originally written by Roland Schmidt and copied here on March 26, 2021 - see the original post here for a potentially updated version.\n\nI recently moved my collection of posts from blogdown to distill. What pulled me to the latter was the perspective of a simpler, yet effective means to put posts on the web. Blogdown undoubtedly can be a very powerful tool, the web is full of visually very appealing blogs and the speed of its underlying Hugo language seems unrivaled.\n\n\n\nYet, after using it for about a year or so, I found the lack of/the required work to get some features too cumbersome or at least to intimidating. Hence, the move to distill.\nAmong the helpful resources which made the transition rather smooth, I‚Äôd like to particularly highlight the documents on RStudio‚Äôs distill site, Thomas Mock‚Äôs and Lisa Lendway‚Äôs related posts. I also found it helpful to have a look at the code underlying the blogs of Miles McBain or others who have made their repositories publicly available on github. And last but certainly not least, the authors and maintainers of the package were overwhelmingly quick to respond to issues I had posted on github. So essentially, I don‚Äôt have much too add, except a few details which I haven‚Äôt seen raised somewhere else and might be useful for other considering the switch. Note that all the below comments refer to distill‚Äôs version 1.2.\nSearch function\nDistill comes with a search function which can be activated by setting the pertaining option to true in the site‚Äôs yml file. Two points here: 1) The search field will become visible only after having the site deployed. I was wondering for a while what was wrong with my setup since the search field didn‚Äôt show up. An alternative is to test-run the site with the servr package (ty to jjallaire).\nAnother issue I encountered pertains to the speed of the search function. As far as I can tell, the search function ‚Äòscans‚Äô the post.json file which comprises the contents of all posts (it‚Äôs located in the _site/post/ folder). Most of my posts contain tables, sometimes comprising a few thousand rows. Also, almost all of my posts contain a graph or two produced with the ggiraph package. Both, but particularly the latter, can create very very long entries in the post.json file. The consequence is that the search function becomes very slow, or as in my case, even freezes due to a bloated post.json.\nTo overcome this obstacle, I first build the blog, producing the large post.json file, and afterwards run a script removing everything that is between the <svg> and <\/svg> tags. Plots created by ggiraph are svg files.\n\n\nlibrary(tidyverse)\nlibrary(jsonlite)\n\npost <- readr::read_file(file=here::here(\"_site\", \"post\", \"post.json\"))\npost <- str_remove_all(post, regex(\"<svg.*?\\\\\\\\/svg>\", dotall=T))\nreadr::write_file(post, file=here::here(\"_site\", \"post\", \"post.json\"))\n\n\n\nAnd only afterwards I push the blog to netlify via github. The drawback that this content is missing from the search results is in my opinion negligible, since the code which produces the svg is still there (and can be searched for in the unlikely case users are searching code snippets). Maybe there‚Äôs a better approach, and probably at one point the distill package can take care of these issues, but so far this worked for me.\nSpeed\nAn issue which might be not bother everyone is the blog‚Äôs performance, i.e.¬†how quickly it is loaded in the browser. Moving from blogdown I was curious to see whether there is actually a difference and used Google‚Äôs Pagespeed service to get a clearer idea. Unfortunately, the result is imho somewhat sobering.\nWhile the blog featured a value of 96 on blogdown, it now has ‚Äòonly‚Äô 85 on distill. For mobile devices the value is even only 61. I am by no means an expert on site performances etc, but with longer and data heavy posts I can definitely see the difference. I fear the speed of blogdown is something I‚Äôll miss.\nLocation of data sources\nWhen starting with the distill blog, I wasn‚Äôt sure where to actually put my heavy data sources. Putting them in to the _post folder would mean that they are automatically copied into the _site folder every time when building the blog. And more than once, when pushing the site to github I ran subsequently into serious trouble because of exceeding the 100 MB file size limit. The solution, I came up with is to put all data sources into a folder called _blog_data. The critical thing here is that folders or files starting with an underscore will not be copied when building the blog. So far this approached worked well for me (since I haven‚Äôt figured out the git command to permanently ignore files larger than 50 MBs.)\nTheming via css\nBlogdown offers a myriad of options to theme and style your blog. Maybe too many, for my liking. Distill, on the other hand, comes with a uniform style, but nevertheless offers a few options via the underlying css. Since I turned quite a few of those css-screws (mostly in a trial and error manner), here the link to actual file where I added some comments. Maybe it‚Äôs helpful for some.\n\n\n\n",
    "preview": "posts/2021-02-24-thank-you-blogdown-hello-distill/distill_logo_small.png",
    "last_modified": "2022-06-07T15:39:59+00:00",
    "input_file": {},
    "preview_width": 2190,
    "preview_height": 1156
  },
  {
    "path": "posts/2021-02-19-enable-utterances-with-distill/",
    "title": "Enable utterances with distill",
    "description": "Interested in giving your readers the ability to comment on your {distill} blog? Look no further than utteranc.es.",
    "author": [
      {
        "name": "Vebash Naidoo",
        "url": "https://twitter.com/Sciencificity"
      }
    ],
    "date": "2021-02-20",
    "categories": [
      "github",
      "features",
      "tutorial",
      "utterances"
    ],
    "contents": "\n\nContents\nAllow readers to comment on your blog posts\nAcknowledgements\nutterances\nHTML File in RStudio Project\nSomeone commented üéâ\n\n\n\nNote: This post was originally written by Vebash Naidoo and copied here on March 16, 2021 - see the original post here for a potentially updated version.\n\n\n\n\n\nAllow readers to comment on your blog posts\nYou may be interested, like I was, in allowing reader comments for your {distill} blog posts.\nUpon researching the best way, I found that there was some negativity towards some comment platforms, and heard that utterances was a good alternative for now. Thanks go to Ma√´lle Salmon - during her session on blogging, for R-Ladies Johannesburg, she used utterances on her teaching site, and also taught us about it.\nAcknowledgements\nI‚Äôd like to make my acknowledgements up front, because this post is just a synthesis of two excellent posts from Ma√´lle Salmon and Miles McBain.\nGoodbye Disqus! Hello, Utterances\nHow I got utteranc.es working on my rmarkdown distill blog\nThis distill issue, was also a big help. Thanks to Taras Kaduk.\nReading their posts will give you the tools you need to have comments on your blog posts using utterances. The below is a summary from these resources.\nutterances\n‚Äúutterances is a comments widget built on GitHub issues‚Äù.\nTo set it up you need to first install the utterances GitHub app, if you have not already done so.\nYou then need to allow the app access to your blog repository (repo) in GitHub. My blog repo is named Blog_Vebash (inspired, eh üôä).\n\nIn GitHub, navigate to the Issues tab in your Blog‚Äôs repo, and open the Labels section as highlighted below.\n\nChoose New label to add a label for the issue that will serve as your blog‚Äôs comments. I added mine as:\n\n   comments üí¨\n \n\nHTML File in RStudio Project\nWe need to add an .html file that contains the information for the utterances app. Like Miles did, I named mine utterances.html.\nCreate an utterances.html file as shown below, with your blog repo details in the place of the one noted there. Here is mine, copied nearly directly from Mile‚Äôs.\n ```\n <script>\n   document.addEventListener(\"DOMContentLoaded\", function () {\n     if (!/posts/.test(location.pathname)) {\n       return;\n     }\n\n     var script = document.createElement(\"script\");\n     script.src = \"https://utteranc.es/client.js\";\n     script.setAttribute(\"repo\", \"sciencificity/Blog_Vebash\");\n     script.setAttribute(\"issue-term\", \"title\");\n     script.setAttribute(\"crossorigin\", \"anonymous\");\n     script.setAttribute(\"label\", \"comments üí¨\");\n     script.setAttribute(\"theme\", \"github-light\");\n\n     /* wait for article to load, append script to article element */\n     var observer = new MutationObserver(function (mutations, observer) {\n       var article = document.querySelector(\"d-article\");\n       if (article) {\n         observer.disconnect();\n         /* HACK: article scroll */\n         article.setAttribute(\"style\", \"overflow-y: hidden\");\n         article.appendChild(script);\n       }\n     });\n\n     observer.observe(document.body, { childList: true });\n   });\n <\/script>\n ```\n\nYou may also follow Taras Kaduk‚Äôs advice and amend the d-article, in the querySelector, to d-appendix, if you want your comments to appear after the appendix, instead of between the article and the appendix.\nPlace utterances.html in your main blog folder.\n\nIn your _site.yml file add the includes part under your output format YAML. Now comments using utterances is available for all your blog posts.\noutput:\n  distill::distill_article:\n    includes:\n      in_header: utterances.html\nSomeone commented üéâ\nTo comment a reader has to log into their GitHub account, and give the utterances app permission.\nWhen a reader comments it opens a comment issue in your Blog‚Äôs GitHub repo via the utterances-bot.\nYou may respond on your blog post directly, or in the GitHub repo‚Äôs Issues page.\nIf you do it on the Issues page, you may also close the issue there.\nAs Ma√´lle remarks the downside is perhaps that your reader needs a GitHub account. I am hopeful this will not be too big of a deterrent for readers. If it is, don‚Äôt hesitate to reach out on Twitter - I am interested to hear your opinion.\nHappy {distill} Blogging\nüï∫\n\n\n\n",
    "preview": "posts/2021-02-19-enable-utterances-with-distill/preview2_small_.jpg",
    "last_modified": "2022-06-07T15:39:59+00:00",
    "input_file": {}
  },
  {
    "path": "posts/2021-02-08-distill-it-down/",
    "title": "Distill it down",
    "description": "My experiences with building webpages and websites using some of the simpler R Studio tools.",
    "author": [
      {
        "name": "Lisa Lendway",
        "url": {}
      }
    ],
    "date": "2021-02-08",
    "categories": [
      "starting",
      "tutorial"
    ],
    "contents": "\n\nNote: This post was originally written by Lisa Lendway and copied here on March 16, 2021 - see the original post here for a potentially updated version.\n\n\n\nPhoto by Raw Pixel\nIntroduction\nThis post describes my journey to creating a personal website using the distill package. Along the way, I took some detours using R Markdown to create webpages and a website for a course I teach. This is not a how-to tutorial (although I will provide links to resources I used to help me along the way) but rather a reflection on why I made the choices I made. I hope this might help some of you decide which tools you might use in creating your own website.\nMy blogdown fail\nMy journey with using the distill package to make a website began back in March of 2019 with the fancier, more customizable blogdown package. I had just gone through the R Studio instructor training and was about to be on spring break from my job teaching at Macalester College. The instructor training had me motivated to finally build a website and that break seemed like a perfect time to do it. At the time, the only tool I had heard of for doing such a thing was blogdown\nThen, like many in the US and other parts of the world experienced, the news came that I would be teaching online for the rest of the semester, my husband would be working from home, and we‚Äôd have our elementary school kids home learning, too. So, creating my website took a backseat. I gave myself about 2 hours one afternoon to try to get a blogdown site up and running, but I kept getting bogged down in the details and quickly gave up.\n\nMy blogdown attempt\nI just looked back at my attempt and it‚Äôs not as terrible as I initially thought. But, for me, the blogdown site was more than I needed. Ideally, I wanted something simpler, but what else was there?\nHello R Markdown and Netlify!\nAround that same time, I saw an advertisement for an R Studio webinar by Alison Hill and Desir√©e De Leon titled Sharing on Short Notice: How to Get Your Materials Online With R Markdown. Wow! The description sounded like just what I needed both for getting my personal website up and running and to help put R-related materials on the web in an easy way for my students. At the time, I was feeling overwhelmed with life (who wasn‚Äôt?), so I didn‚Äôt watch the webinar right away. Instead, I kept it open on a tab and tweeted out a reminder to myself:\n\n\n\nI want to use this now but just can't find the time. But thanks for sharing. I've added it to the summer to-do list. https://t.co/aDfLkivOkr\n\n‚Äî Dr.¬†Lisa Lendway (@lisalendway) April 1, 2020\n\n\nFast forward to mid-May 2020. My summer break had started, and one of the first things I did was finally watch the Sharing on Short Notice webinar. I loved their analogy of ‚ÄúClimbing R Markdown Mountain‚Äù and was surprised to learn that the two tools I had heard of, bookdown and blogdown, were two of the more complex tools. This webinar was also where I heard of Netlify (a platform for easily deploying a website) for the first time.\n\nIllustration from Sharing on Short Notice, A. Hill & D. De Leon\nIt wasn‚Äôt until August when I finally put the tools to action. I was in the thick of prepping course materials for my Introductory Data Science course. I knew I wanted to put them online both to make them easier for my students to access and to make them accessible to people other than my students. In the past, I had just uploaded either R Markdown files or knitted html files (with the Download Rmd option) to the course moodle site (moodle is a course management system).\nAfter watching the Sharing on Short Notice webinar a few more times, I decided to start at the base of the mountain, not even entering the website realm, by creating a single webpage from an R Markdown document. I did this for each topic in the course, ending up with five separate webpages for the course.You can see an example of my first site here. This is NOT fancy, but it worked well for me for a couple reasons:\nIt was EASY! The only new skill I had to learn was how to deploy to Netlify. The process goes like this: Create an R Project (I also put it on GitHub) ‚Äì> make the R Markdown document ‚Äì> knit to html ‚Äì> drop the project folder on Netlify (or, link to GitHub repo). It was very similar to what I had already been doing - uploading the files to moodle. To be honest, it was even easier! I only had to put a link to the Netlify webpage on the moodle page. And, because the Netlify page was deployed through my GitHub repository, changes to the document were automatically updated on the webpage when I pushed them out.\nI didn‚Äôt need to think a lot about website design because each topic was just a single webpage. I did make sure to use the same theme throughout, but that was about as much as I thought about web design. This keeps the YAML simple, which I like for my intro students since many of them download the R Markdown code for the files.\nI could easily compartmentalize the different course topics because they were their own projects (separate folders) and their own webpages. After the first few weeks of the quarter, I was prepping course material in a just-in-time fashion, usually finishing the same day the students needed to use it. Having separate projects made it easy to forget about an old topic and move onto a new one.\nThis list of pros for using R Markdown webpages has many similarities to the corresponding list of cons:\nBeing able to easily compartmentalize topics meant making 5 (actually 6, if I include an R Basics page I use for multiple courses) different webpages! Yikes, that‚Äôs a lot of webpages to manage and still required me to use the course management system to unite all the material together. Although I have folders organized fairly well, there are six smaller projects rather than one large project.\nThe webpages feel a little ‚Äúplain‚Äù. This was purposeful because I wanted a simple YAML but perhaps a bit sad :(\nAn R Markdown site\nBy the end of my first quarter of teaching, I was happy with the material I had produced and glad it was online where I could share it with a larger group, but I wanted to better unite the material. To do this, I started climbing ‚ÄúR Markdown Mountain‚Äù. I chose the easiest hike and created an R Markdown website: my course website.\nAlthough I was again tempted by some of the other options, I decided against them for the following reasons:\nBoth blogdown and distill were going to require more thought than I had time for, including potentially making changes to the R Markdown file. I also wanted to keep the same theme (albeit a bit plain) for anyone who was already using the webpages, especially my students, which might require changing some CSS - I wasn‚Äôt ready to delve into that yet, either.\nUsing the bookdown package seemed like a good option, but it would also require some changes to the R Markdown files and I could not figure out how to nicely add the code download button at the top of each chapter so students (and others) could download the R Markdown file for each topic.\nTruthfully, I also did quite a bit of ‚Äúcheating‚Äù in my R Markdown website. One of the bad parts of an R Markdown website is that you can‚Äôt have subfolders. Since my individual topic webpage projects each already had many files in them, this would have led to a very messy folder full of files. So, I just used the R Markdown site to unite all my individual webpages. Each topic still has its own webpage that is linked in the R Markdown website. I was able to create this site in well under an hour (yay!) and it serves its purpose for now.\n\n\n\nI‚Äôve finally put all my Intro Data Science materials in one place! It may not be the cutest website but it was quick to make. I hope the material might be useful to new #RStats users or people using R to teach data science. https://t.co/JkJMti8AEi\n\n‚Äî Dr.¬†Lisa Lendway (@lisalendway) November 23, 2020\n\n\nWhen time allows, I will reinvestigate the organization of this website to try to make it more cohesive.\nDistill it down\nRemember, this journey began with me wanting to create a personal website. I felt a little overwhelmed with a blogdown site when I first tried it but also felt like that was the route I needed to go since many of the R blogs I visited were built using blogdown. A couple of things changed my mind:\nWatching the distill portion of Sharing on Short Notice a couple more times illustrated how simple it was to create a site.\nReading some of the distill documentation confirmed that it was fairly easy to do.\nOther distill sites I perused looked really nice! Two of my favorites are by Ijeamaka Anyene and Shannon Pileggi, aka Piping Hot Data. Shannon even tweeted about using distill!\n\n\n\nI love the distill package! üôå üéäDistill empowered me to start sharing #rstats content üí™without the learning curve of blogdown/hugo üóª. You can check out my distill backed blog at https://t.co/dLa6zI1iSb. https://t.co/Q0CzNl6oEm\n\n‚Äî Shannon Pileggi (@PipingHotData) December 8, 2020\n\n\nThere was enough I could change about the website to make it look unique, but the defaults were a good start. My procrastination also seemed to pay off because new updates to the distill package made theming (customization, ie. font/title/background/navbar/etc. colors, sizes, styles, etc.) even easier with the create_theme() function. This function creates a CSS file with commonly used CSS selectors that you can easily change. You can change other CSS selectors, too, but you may need to know a little more about CSS to do that. If you‚Äôre like me and are very unfamiliar with CSS, I would recommend only changing the defined ones first - there is plenty there!\nAfter making the decision to go with distill to build my website, it was time to visit more resources. These are the ones I used most:\nAlison Hill and Desir√©e De Leon‚Äôs Sharing on Short Notice. I‚Äôve probably talked about this enough, but it is an amazing resource.\nThe distill documentation, which also happens to be a ‚Ä¶ distill website!\nThomas Mock‚Äôs distill how-to, which I wish I would have seen before starting to build my site rather than in the middle of it.\nAlison Hill‚Äôs recent updates on theming, if you want to change the default theme. And read it thoroughly (I may not have done that the first time)!\nOther people‚Äôs GitHub repos for their distill sites. The two I visited a lot were the corresponding repos for the sites I pointed out earlier: Ijeamaka Anyene and Shannon Pileggi, aka Piping Hot Data. This was a good way for me to dig into the code in more detail, and I could often copy, paste, and modify slightly to fit my needs.\nWith these resources at hand and open in my web browser, I was able to get started on buildng the site. The first time I tried, I got stuck on the CSS theming (hence the recommendation to only modify the easy-to-modify selectors at first). Then, I re-read the Create theme documentation (remember when I said to read that carefully the first time?), got a little help from @spcanelon on Twitter, and made a step-by-step guide for myself. The next day, I tried again, and had the website up and running within an hour! I documented this in detail on my first blog post on my distill website. The post also has embedded screencasts of me creating the site.\nI took some time after the video to further play around with customization, especially colors, most of which are inspired by William Morris‚Äôs Strawberry Thief textile. I‚Äôm happy with the website‚Äôs unique look combined with the simplicity. Each blog post has its own folder of files, so it is easy to stay organized. I like that blog posts are not re-rendered when the website is built. So, you need to knit each blog post and build the site in order for that blog to be updated, but you don‚Äôt have to worry about code in an old blog post breaking the website. I am starting to think that distill may be the tool I use for future course websites for all these reasons.\nIn conclusion, I hope I have given you some reason to check out distill for creating a website. Or maybe I‚Äôve even helped you decide to use some of the simpler tools available. Either way, I wish you luck on your journey.\n\n\n\n",
    "preview": "posts/2021-02-08-distill-it-down/images/strawberry-thumbnail.png",
    "last_modified": "2022-06-07T15:39:59+00:00",
    "input_file": {},
    "preview_width": 400,
    "preview_height": 400
  },
  {
    "path": "posts/2020-12-12-tricks-blogdown-to-distill/",
    "title": "Misc tricks when migrating from blogdown to distill",
    "description": "Some small things I learned as I migrated my blog from blogdown to distill.",
    "author": [
      {
        "name": "Frie Preu",
        "url": {}
      }
    ],
    "date": "2020-12-12",
    "categories": [
      "starting",
      "blogdown",
      "tutorial"
    ],
    "contents": "\n\nNote: This post was originally written by Frie Preu and copied here on March 17, 2021 - see the original post here for a potentially updated version.\n\n\nSo I jumped on the distill train. Mainly because I was a bit annoyed by the complexities of Hugo‚Äôs file system which always tripped me up when I tried to include images and datasets. Plus, I‚Äôm not super active on my blog anyway so I don‚Äôt want to come back to it every couple of months only to find out that something has broken.\nAnyway, at the risk of becoming one of those blogs that only blogs about blogging frameworks1, here are some tips and tricks I learned over the last 1.5 weeks2.\nEdit 2020-12-14: thanks to the magic of Twitter / with the help of Ma√´lle Salmon, I found the ‚Äúmeme‚Äù (more like comic, d‚Äôuh) I was talking about in footnote 1 - shoutout to you if you know what I‚Äôm talking about because you read the footnote! Enjoy!\nImage from https://rakhim.org/images/honestly-undefined/blogging.jpgInternal links\nIn Hugo I always specified internal links within my site like so:\n[r projects](/rprojects/)\nassuming i wanted to link to https://frie.codes/rprojects.\nIn distill, you link to the .html file, like so:\n[r projects](/rprojects.html)\nyou can also add custom anchors (certainly also possible in blogdown but I never did it somehow):\n[r projects](/rprojects.html#newsanchor)\nRedirecting your old URLs\nI was not able to configure my distill site so that it would replicate the exact URLs of my old Hugo/blogdown page. Some of those were not so nice anyway, e.g.¬†my about page was under frie.codes/page/about/ and not at frie.codes/about. I didn‚Äôt want to have breaking links, so I wanted to find a way to redirect users to the new URLs.\nTurns out if you use Netlify, you can set up either a _redirects file or include your redirects in netlify.toml. While the latter is a bit more verbose, it has the advantage that you don‚Äôt have to take care of it ending up in _site. Here‚Äôs a snippet from my netlify.toml:\n# Redirects from what the browser requests to what we serve\n[[redirects]]\n  from = \"/post/\"\n  to = \"/\"\n[[redirects]]\n  from = \"/git-commit-wordcloud-rstats/\"\n  to = \"/posts/git-commit-wordcloud-rstats\"\n[[redirects]]\n  from = \"/using-r-to-remove-audiobooks-from-spotify/\"\n  to = \"/posts/using-r-to-remove-audiobooks-from-spotify\"\n[[redirects]]\n  from = \"/automate-the-boring-stuff/\"\n  to = \"/posts/automate-the-boring-stuff/\"\n[[redirects]]\n  from = \"/oldrscripts-intro-to-r/\"\n  to = \"/posts/oldrscripts-intro-to-r/\"\nYou can check out the relevant documentation here and my netlify.toml here. I suspect similar things are possible with other hosting providers, so I‚Äôd google something like ‚Äúhosting provider redirects‚Äù.\nFolder structure\nIn blogdown/Hugo, I could set ‚Äúnice‚Äù slugs (the part in the URL after the main domain, e.g.¬†curl-vs-rcurl in https://frie.codes/curl-vs-rcurl) via the slug yaml frontend matter option‚Ä¶\n---\ntitle: \"curl vs RCurl or: how to choose a package\"\noutput: html_document\ndraft: false\ndate: 2019-05-21\nslug: curl-vs-rcurl\ntags: [ds-texts]\n---\n‚Ä¶while at the same time keeping my folders nicely organized by date:\ncontent/post\n‚îú‚îÄ‚îÄ 2019-01-05-dot-dot-dot-underscore-camel\n‚îú‚îÄ‚îÄ 2019-01-05-to-for-loop-or-not-to-for-loop\n‚îú‚îÄ‚îÄ 2019-05-19_introducing-this-blog\n‚îú‚îÄ‚îÄ 2019-05-20-curl-vs-rcurl\n‚îú‚îÄ‚îÄ 2019-06-19_oldrscripts-intro-to-r\n‚îú‚îÄ‚îÄ 2019-07-23_switching-to-gitlab\n‚îú‚îÄ‚îÄ 2019-10-19-automate-the-boring-stuff\n‚îú‚îÄ‚îÄ 2020-08-30-using-r-to-remove-audiobooks-from-spotify\n‚îî‚îÄ‚îÄ 2020-11-25-create-a-wordcloud-of-your-github-commits\nBecause distill‚Äôs building logic is much simpler3, this is not possible in distill as far as I understand: You either have to commit to slugs like 2020-11-26-git-commit-wordcloud-rstats or accept a folder structure like this:\n_posts\n‚îú‚îÄ‚îÄ automate-the-boring-stuff\n‚îú‚îÄ‚îÄ curl-vs-rcurl\n‚îú‚îÄ‚îÄ git-commit-wordcloud-rstats\n‚îú‚îÄ‚îÄ introducing-this-blog\n‚îú‚îÄ‚îÄ misc-distill-things\n‚îú‚îÄ‚îÄ oldrscripts-intro-to-r\n‚îú‚îÄ‚îÄ switching-to-gitlab\n‚îî‚îÄ‚îÄ using-r-to-remove-audiobooks-from-spotify\nThis is not ideal and makes me a bit unhappy but alas.. you can‚Äôt have simplicity and complex features at the same time. If I missed something obvious and this is possible after all, please shoot me a message on Twitter or via Email (see footer). I‚Äôd love to be wrong on this one!\nTheming and Customization\nThe docs on theming are quite good and I think there will be more and more websites implemented in distill so more examples will be available. I only changed the fonts and the colors and added some small css for the profile picture on my about page. You can check out the theme.css here.\nI also added a _footer.html which adds a footer with my social links. distill picks it up automatically so you don‚Äôt have to do anything besides dropping in some html into a file. üéâ\nEmojis\nMy blogdown theme supported automatic parsing of markdown emojis, so that :tada: would be rendered as üéâ automatically. Sadly, this is not supported by distill, so I now have to use the emo package and/or copy directly from emojipedia if I want to have more control over which emoji is picked (some ‚Äúnames‚Äù resolve to multiple emojis in emo).\nEnd\nI‚Äôm quite happy with my new setup. Of course, there are still some things that could be improved: i‚Äôm still not sure about my font choices and there are still some old markdown-style emojis that I need to update. But all in all, I think distill is a great package that fills the void between GitHub pages and blogdown. I hope this collection of miscellaneous things helped some of you with your transition to distill. üòä. I see you next time with some real content, not just meta content. üòâ\nUntil then: keep coding.‚ù§Ô∏è\n\nrecently saw a very funny meme about this but can‚Äôt find it anymore :(‚Ü©Ô∏é\nI won‚Äôt go into detail how distill works, for that I recommend the official documentation.‚Ü©Ô∏é\na good thing imo!‚Ü©Ô∏é\n",
    "preview": "posts/2020-12-12-tricks-blogdown-to-distill/blogdown_distill.png",
    "last_modified": "2022-06-07T15:39:59+00:00",
    "input_file": {},
    "preview_width": 517,
    "preview_height": 238
  },
  {
    "path": "posts/2020-07-31-building-a-blog-with-distill/",
    "title": "Building a blog with distill",
    "description": "I love simplicity.",
    "author": [
      {
        "name": "Thomas Mock",
        "url": "https://twitter.com/thomas_mock"
      }
    ],
    "date": "2020-08-01",
    "categories": [
      "starting",
      "tutorial"
    ],
    "contents": "\n\nContents\ndistill\nWhy consider distill?\nPros\nCons\n\n\nSteps to create\nStep 1: Install distill\nStep 2: New project from distill blog\nStep 3: Preview\nStep 4: _site.yml\nStep 5: Example blog post\nStep 6: New post\nStep 7: Add to Git\nStep 8: Netlify\nOnce you‚Äôre logged in:\n\nStep 9: Blog post workflows\n\nNext Steps\nCustomize Appearance\nExample changes\n\n\n\n\nNote: This post was originally written by Thomas Mock and copied here on March 16, 2021 - see the original post here for a potentially updated version.\n\nModern buildingdistill\ndistill is ‚ÄúScientific and technical writing, native to the web‚Äù. I‚Äôve gotten lots of requests for creating a distill blog from scratch, so I‚Äôve finally gotten around to building that!\nPlease note that the docs for distill are already excellent, check them out at: Distill: Creating a Blog. This guide is aimed more at the end-to-end process of creating your first blog.\nThe first blog is typically the hardest and I‚Äôve lived through the uncertainty of not really understanding how all the pieces work together. I appreciate the simplicity of distill for this very reason - there‚Äôs less stuff to change. At its core distill is just writing articles for a website/blog!\nI also have owed this post to many people, namely Ma√´lle Salmon and JD Long as seen on my Twitter.\nWhy consider distill?\nPros\nNo Hugo dependency, no theme dependency, it‚Äôs a very stable format with the ability to customize just enough with a bit of effort. Think a self-hosted Medium.com in appearance. Very minimal, lightly themed, focused on writing and code! Again, I think that for someone getting started with creating websites or blogs it‚Äôs a very good starting point.\nWith distill you render/knit your articles locally, so you can quickly check your work without having to deploy to a git branch or to production. I do think that eventually it is a good idea to have git branches for previews or collaboration, but that‚Äôs a lot to ask for an initial first stab at a blog/site.\ndistill also natively supports citations, footnotes and asides, a rich auto-generated table of contents, support for HTMLwidgets and/or custom javascript, and a reader friendly typography that is mobile friendly/auto-adapts to mobile.\nAnother nicety is the ability to import a post with import_post(). This means you can take an existing blogpost from another website and import it into your new blog. This ‚Äúdoes not require the original R Markdown document used to author the post‚Äîyou only need access to the published HTML of a post to import it.‚Äù\nLastly, I am always amazed at the power of both blogdown and the more recent hugodown, but you are still relying on a changing version of Hugo and your theme over time. For a personal blog I personally prefer distill because I can get busy, neglect my blog for a year, come back to write a new post, and it still just works.\nCons\nHowever, blogdown and hugodown allow dramatically more customization. distill is truly an opinionated framework, and most of the easy customization you can do is fonts, colors, and the navbar. If you expect to create gorgeous custom-layout sites like education.rstudio.com or something like Desir√©e de Leon‚Äôs blog you‚Äôre likely going to be disappointed!\nAgain, for my blog I really just wanted a simple but in my opinion elegant minimalist theme, so I was fine with the tradeoff, as I would have built something similar with blogdown anyway!\nblogdown also supports other static site generators like Jekyll in place of Hugo, and a rich set of pre-built themes across the various generators. The structure of the site is extensible as well, so you can generate a site that truly looks like your own creation.\nLastly, note that you DO lose some niceties like hugo shortcodes for embedding, and again there is ONLY ONE THEME. Most appearance customization is done at the level of custom CSS.\nIf you‚Äôre still with me, here‚Äôs how to make it!\nSteps to create\nStep 1: Install distill\ninstall.packages(\"distill‚Äù)\nStep 2: New project from distill blog\nWhat this is really doing is running the following command, and generates the output below.\n\n> distill::create_blog(dir = \"demo-distill\", title = \"Demo Distill\")\nCreating website directory demo-distill\nCreating demo-distill/_site.yml\nCreating demo-distill/index.Rmd\nCreating demo-distill/about.Rmd\nCreating demo-distill/_posts/welcome/welcome.Rmd\n\nThis will create a home-directory titled whatever you passed for the dir argument above, so in our case ‚Äúdemo-distill‚Äù. This will contain the _site.yml, the about.rmd file, the index.rmd file, and two folders: _posts and _site. You should definitely change the dir and title arguments to whatever you want your site to be named, although you can edit this later with a bit of work.\nWhile you‚Äôre welcome to explore _site I consider it something you SHOULD NOT edit by hand and it will commonly get overridden by rebuilding posts or the whole site. _site is essentially where the built site lives as final HTML and other supporting files. The _posts folder on the other hand contains all the raw RMDs you will use to create posts.\nStep 3: Preview\nAt this point the website is technically built! You can ‚Äúpreview‚Äù the site by going to: _site -> index.html\nThe index.html is essentially the home page for your blog. You can navigate from there in either the RStudio viewer or send it to a web browser just like a normal webpage.\nNote: you can also use the Build Website button in RStudio to pull up the whole website. This will re-knit and build the entire site from scratch.\nPreview of the siteStep 4: _site.yml\nThe _site.yml is where you control the overall details about your blog such as the name, title, description, and the navbar. You can add new ‚Äútabs‚Äù by changing the _site.yml file, where the default has a navbar with the site name on the left and a ‚ÄúHome‚Äù and ‚ÄúAbout‚Äù Tab on the right.\n\nname: \"demo-distill\"\ntitle: \"Demo Distill\"\ndescription: |\n  Demo Distill\noutput_dir: \"_site\"\nnavbar:\n  right:\n    - text: \"Home\"\n      href: index.html\n    - text: \"About\"\n      href: about.html\noutput: distill::distill_article\n\nStep 5: Example blog post\nNavigate to _posts -> welcome -> welcome.rmd. This is the default ‚Äúhello world‚Äù example that comes with you distill. Note you can delete that folder completely to drop it from the site, but let‚Äôs use it as a practice ground first.\nThis is still just a RMarkdown file, but it has a specific YAML header, that contains a title, a description, author, date, and outputs to distill::distill_article().\nTry adding some more text, code, or other content to this blog post and then knit it! It will generate and show the final output in the RStudio viewer.\n\n---\ntitle: \"Welcome to Demo Distill\"\ndescription: |\n  Welcome to our new blog, Demo Distill. We hope you enjoy\n  reading what we have to say!\nauthor:\n  - name: Nora Jones\n    url: https://example.com/norajones\n    affiliation: Spacely Sprockets\n    affiliation_url: https://example.com/spacelysprokets\ndate: 07-27-2020\noutput:\n  distill::distill_article:\n    self_contained: false\n---\n\nStep 6: New post\nTo create a new post, you can run the following command: distill::create_post(\"title of post\")\nFull arguments seen below! I‚Äôll call out two specific things.\ndraft argument: this prevents the post from being included in the site build until you turn it to FALSE. This is useful if you‚Äôre working on a blogpost over time, or want to come back to finish it later.\ndate_prefix: this adds a date like 2020-08-01-blog-post to the front of whatever your blog-post name is. This is useful as it also creates a folder structure that sorts properly, and prevents name clashes.\nWhenever you run the create_post() command it will generate a new folder and the basic RMarkdown doc to get started with the arguments you passed.\ncreate_post(\n  title, # mandatory\n  author = \"auto\",\n  slug = \"auto\", # generates a website slug (URL)\n  date_prefix = TRUE, # adds date for sorting\n  draft = FALSE,\n  edit = interactive()\n)\n\nNote that a nice overview of the Blog Post Workflow is covered at the distill site. This includes collaborating via Git Branches (or using them as previews). I push to my main branch all the time since I‚Äôm working solo.\nStep 7: Add to Git\nWe‚Äôre following instructions at: Chapter 17 Existing project, GitHub last | Happy Git and GitHub for the useR. If you‚Äôre a Git expert, feel free to use whatever method you like. From my experience setting up a few blogs this is the least painful if you‚Äôre NOT a Git expert.\n\nYou could also do the create GitHub and then connect it to RStudio route Chapter 17 Existing project, GitHub last | Happy Git and GitHub for the useR.\nNOTE: if you don‚Äôt have a GitHub PAT, get one now by following these instructions B GitHub Personal Access Tokens | Happy Git and GitHub for the useR.\nThis will first use Git locally, and then create a new GitHub repo based off your existing local files.\nRun the usethis::use_git() command, which will kick off some questions:\nDon‚Äôt commit just yet (Select 3: Not Now)\nRestart RStudio (Select 2: Yes)\nYou will know it all worked when you have the git logo at the top of RStudio\nGit logoClick on the Git logo and commit everything, notice we can‚Äôt push since we haven‚Äôt configured GitHub yet\nInitial commitusethis::use_github() ‚Äî this works if you have already configured a GitHub Personal Access Token\nNext select https if you don‚Äôt have SSH keys\nSay 1: yup to the title and description\n\nExample of what your console commands are and their output seen below!\n\n> usethis::use_github()\n‚úì Setting active project to '/Users/thomasmock/demo-distill-blog'\n‚úì Checking that current branch is 'master'\nWhich git protocol to use? (enter 0 to exit)\n\n1: ssh   <-- presumes that you have set up ssh keys\n2: https <-- choose this if you don't have ssh keys (or don't know if you do)\n\nSelection: 2\n‚óè Tip: To suppress this menu in future, put\n  `options(usethis.protocol = \"https\")`\n  in your script or in a user- or project-level startup file, '.Rprofile'.\n  Call `usethis::edit_r_profile()` to open it for editing.\n‚óè Check title and description\n  Name:        demo-distill-blog\n  Description:\nAre title and description ok?\n\n1: Yup\n2: No way\n3: Negative\n\nSelection: 1\n‚úì Creating GitHub repository\n‚úì Setting remote 'origin' to 'https://github.com/jthomasmock/demo-distill-blog.git'\n‚úì Pushing 'master' branch to GitHub and setting remote tracking branch\n‚úì Opening URL 'https://github.com/jthomasmock/demo-distill-blog'\n\nOnce this is all run, it should open up a new webpage with your fancy new GitHub repo! Mine opened at: GitHub - jthomasmock/demo-distill-blog.\nStep 8: Netlify\nNow that we have our files on Github, we‚Äôre ready to deploy via Netlify!\nYou‚Äôll need to Create an account at netlify if you don‚Äôt have one already.\nOnce you‚Äôre logged in:\nFirst click on import from Git\nNew site from GitClick on Configure netlify on GitHub, and follow their instructions to allow access, and then add the selected repository you want to send over (demo-distill-blog for me)\nClick Save!\n\nAdd specific repoClick on demo-distill-blog or whatever your blog‚Äôs name is!\nIMPORTANT\nMake sure to set the Publish Directory to _site (so Netlify can find the knitted HTML content)\nAnd then click deploy!\nMake sure to set publish directory to _siteYou‚Äôll get a fun temporary name (mine was https://confident-meitner-e6e7dc.netlify.app/). You can change this with the Domain Settings to some-name.netlify.app or even purchase a custom domain like I did for example themockup.blog or what Sharla Gelfand did with sharla.party.\nNow your website should be up and running! If you don‚Äôt see a site (it 404s), then I would check to make sure you set the Publish Director to _site, otherwise it won‚Äôt know where to find the actual HTML content.\nStep 9: Blog post workflows\n\nWorkflow difference: Furthermore, website pages and root pages of blogs are re-rendered when the site is rebuilt but blog articles are not. Each blog article has to be rendered on its own, with intent. Why? Given that R package upgrades have a tendency to break older code, continuously re-rendering old posts is nearly impossible to do without errors, especially over longer periods of time.\n\nThis means you can ‚ÄúBuild Site‚Äù frequently locally to check out how things work. This is personally the workflow I prefer vs having to commit the output to GitHub or a GitHub branch just to see the preview. You can also knit individual blog posts and they will adapt to your theme, so you can again test local changes whenever you‚Äôd like!\nTo get things into ‚Äúproduction‚Äù once you have set up Netlify, you‚Äôll just need to knit the new blog post, then commit and push to GitHub.\nYou can use command line git or the git integration in RStudio.\nExample of git in RStudioBasic idea is click commit and then push.\nExample of a commitNext Steps\nIf this guide didn‚Äôt provide enough detail, make sure to check out the Blog Post Workflow that goes into specific examples, like importing posts from elsewhere, changing URLs, updating old posts, etc.\nNow that you have a website running you can either leave it exactly as it is formatted, and just add new posts or you can do a little bit of customization to the ‚ÄúAbout Me‚Äù, Home page, etc.\nA lot of options are already covered at Distill for R Markdown: Creating a Blog\nA few notes:\nIf you want Twitter cards to show up with your images, you need to add a preview: some_img_name.png argument to the YAML header for each post.\nIf you define a custom domain you‚Äôll need to change the base_url at the _site.yml file\nCustomize Appearance\nProbably of most interest to folks is customizing the appearance of the blog.\nIn general the strategy you should use is to inspect parts of the website for the class names and then you can apply CSS to change it\nA nice overview of the ‚ÄúInspect‚Äù tool is covered here\nHTML/CSS classes and selectors are covered in the Mozilla docs here\nTo use a custom CSS file, you‚Äôll need to change the output in _site.yml to include the below:\n\n\noutput:\n  distill::distill_article:\n    css: styles.css\n\n\n\nI keep my styles.css file at the same level as my _site.yml file.\nExample changes\nYou‚Äôll need to store all of these in your styles.css file, and note that some of them depend on other changes - specifically to use custom fonts you ALSO have to import the custom fonts!\nBold silver title, pink background\n\n.distill-site-nav {\n  color: #C0C0C0;\n  background-color: #FF1493;\n  font-size: 20px;\n  font-weight: 900;\n}\n\nWant entire webpage to be ‚Äúpink‚Äù?\nbody {\n  background-color: #FF1493;\n}\nChange hover color in nav bar\n.distill-site-nav a:hover {\n  color: #383838;\n}\nChange header font or color\n/* Change appearance of headers */\nh1, h2, h3, h4, h5 {\n  font-family: 'Fira Mono', sans-serif;\n  color: color: #383838;\n}\nImport custom fonts from Google\n/* Import fonts from Google's API */\n@import url('https://fonts.googleapis.com/css2?family=Lato');\n@import url('https://fonts.googleapis.com/css2?family=Fira+Mono');\nUse those fonts throughout\n/* Use specific font in the body of the text */\nhtml, body, p {\n\n  font-family: 'Lato', sans-serif;\n  font-weight: 200;\n  line-height: 1.3;\n  font-size: 1.0em;\n  color: #333333;\n  font-style: normal;\n\n}\nChange in-line code\n/* Change the appearance of in-line code chunks */\ncode {\n  font-family: 'Fira Mono', sans-serif;\n  color: #383838;\n  background: #F5F5F5;\n  font-weight: 400;\n  font-size: 0.9em;\n}\nChange code chunk colors\nd-code {\n  background: grey;\n}\n\n\n\n",
    "preview": "posts/2020-07-31-building-a-blog-with-distill/modern.jpeg",
    "last_modified": "2022-06-07T15:39:59+00:00",
    "input_file": {}
  }
]
